
beunBoardSPI.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000020da  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000023c  00802000  000020da  0000216e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000001a2  0080223c  0080223c  000023aa  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000023aa  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002408  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000178  00000000  00000000  00002448  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005316  00000000  00000000  000025c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003a3f  00000000  00000000  000078d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001196  00000000  00000000  0000b315  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000534  00000000  00000000  0000c4ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002ebf  00000000  00000000  0000c9e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000149e  00000000  00000000  0000f89f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000188  00000000  00000000  00010d3d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 c4 01 	jmp	0x388	; 0x388 <__ctors_end>
       4:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
       8:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
       c:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
      10:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
      14:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
      18:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
      1c:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
      20:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
      24:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
      28:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
      2c:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
      30:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
      34:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
      38:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
      3c:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
      40:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
      44:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
      48:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
      4c:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
      50:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
      54:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
      58:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
      5c:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
      60:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
      64:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
      68:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
      6c:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
      70:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
      74:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
      78:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
      7c:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
      80:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
      84:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
      88:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
      8c:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
      90:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
      94:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
      98:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
      9c:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
      a0:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
      a4:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
      a8:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
      ac:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
      b0:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
      b4:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
      b8:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
      bc:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
      c0:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
      c4:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
      c8:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
      cc:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
      d0:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
      d4:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
      d8:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
      dc:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
      e0:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
      e4:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
      e8:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
      ec:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
      f0:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
      f4:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
      f8:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
      fc:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
     100:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
     104:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
     108:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
     10c:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
     110:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
     114:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
     118:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
     11c:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
     120:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
     124:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
     128:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
     12c:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
     130:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
     134:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
     138:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
     13c:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
     140:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
     144:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
     148:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
     14c:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
     150:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
     154:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
     158:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
     15c:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
     160:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
     164:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
     168:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
     16c:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
     170:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
     174:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
     178:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
     17c:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
     180:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
     184:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
     188:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
     18c:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
     190:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
     194:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
     198:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
     19c:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
     1a0:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
     1a4:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
     1a8:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
     1ac:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
     1b0:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
     1b4:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
     1b8:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
     1bc:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
     1c0:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
     1c4:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
     1c8:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
     1cc:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
     1d0:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
     1d4:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
     1d8:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
     1dc:	0c 94 53 06 	jmp	0xca6	; 0xca6 <__vector_119>
     1e0:	0c 94 7b 06 	jmp	0xcf6	; 0xcf6 <__vector_120>
     1e4:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
     1e8:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
     1ec:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
     1f0:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
     1f4:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
     1f8:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
     1fc:	07 63       	ori	r16, 0x37	; 55
     1fe:	42 36       	cpi	r20, 0x62	; 98
     200:	b7 9b       	sbis	0x16, 7	; 22
     202:	d8 a7       	std	Y+40, r29	; 0x28
     204:	1a 39       	cpi	r17, 0x9A	; 154
     206:	68 56       	subi	r22, 0x68	; 104
     208:	18 ae       	std	Y+56, r1	; 0x38
     20a:	ba ab       	std	Y+50, r27	; 0x32
     20c:	55 8c       	ldd	r5, Z+29	; 0x1d
     20e:	1d 3c       	cpi	r17, 0xCD	; 205
     210:	b7 cc       	rjmp	.-1682   	; 0xfffffb80 <__eeprom_end+0xff7efb80>
     212:	57 63       	ori	r21, 0x37	; 55
     214:	bd 6d       	ori	r27, 0xDD	; 221
     216:	ed fd       	.word	0xfded	; ????
     218:	75 3e       	cpi	r23, 0xE5	; 229
     21a:	f6 17       	cp	r31, r22
     21c:	72 31       	cpi	r23, 0x12	; 18
     21e:	bf 00       	.word	0x00bf	; ????
     220:	00 00       	nop
     222:	80 3f       	cpi	r24, 0xF0	; 240
     224:	08 00       	.word	0x0008	; ????
     226:	00 00       	nop
     228:	be 92       	st	-X, r11
     22a:	24 49       	sbci	r18, 0x94	; 148
     22c:	12 3e       	cpi	r17, 0xE2	; 226
     22e:	ab aa       	std	Y+51, r10	; 0x33
     230:	aa 2a       	or	r10, r26
     232:	be cd       	rjmp	.-1156   	; 0xfffffdb0 <__eeprom_end+0xff7efdb0>
     234:	cc cc       	rjmp	.-1640   	; 0xfffffbce <__eeprom_end+0xff7efbce>
     236:	4c 3e       	cpi	r20, 0xEC	; 236
     238:	00 00       	nop
     23a:	00 80       	ld	r0, Z
     23c:	be ab       	std	Y+54, r27	; 0x36
     23e:	aa aa       	std	Y+50, r10	; 0x32
     240:	aa 3e       	cpi	r26, 0xEA	; 234
     242:	00 00       	nop
     244:	00 00       	nop
     246:	bf 00       	.word	0x00bf	; ????
     248:	00 00       	nop
     24a:	80 3f       	cpi	r24, 0xF0	; 240
     24c:	00 00       	nop
     24e:	00 00       	nop
     250:	00 08       	sbc	r0, r0
     252:	41 78       	andi	r20, 0x81	; 129
     254:	d3 bb       	out	0x13, r29	; 19
     256:	43 87       	std	Z+11, r20	; 0x0b
     258:	d1 13       	cpse	r29, r17
     25a:	3d 19       	sub	r19, r13
     25c:	0e 3c       	cpi	r16, 0xCE	; 206
     25e:	c3 bd       	out	0x23, r28	; 35
     260:	42 82       	std	Z+2, r4	; 0x02
     262:	ad 2b       	or	r26, r29
     264:	3e 68       	ori	r19, 0x8E	; 142
     266:	ec 82       	std	Y+4, r14	; 0x04
     268:	76 be       	out	0x36, r7	; 54
     26a:	d9 8f       	std	Y+25, r29	; 0x19
     26c:	e1 a9       	ldd	r30, Z+49	; 0x31
     26e:	3e 4c       	sbci	r19, 0xCE	; 206
     270:	80 ef       	ldi	r24, 0xF0	; 240
     272:	ff be       	out	0x3f, r15	; 63
     274:	01 c4       	rjmp	.+2050   	; 0xa78 <uartF0_fputc+0x16>
     276:	ff 7f       	andi	r31, 0xFF	; 255
     278:	3f 00       	.word	0x003f	; ????
     27a:	00 00       	nop
	...

0000027e <__trampolines_start>:
     27e:	0c 94 f1 04 	jmp	0x9e2	; 0x9e2 <uartF0_fgetc>
     282:	0c 94 31 05 	jmp	0xa62	; 0xa62 <uartF0_fputc>

00000286 <__trampolines_end>:
     286:	6e 61       	ori	r22, 0x1E	; 30
     288:	6e 00       	.word	0x006e	; ????

0000028a <__c.2332>:
     28a:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     29a:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     2aa:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     2ba:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     2ca:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     2da:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     2ea:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     2fa:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     30a:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     31a:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     32a:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     33a:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     34a:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     35a:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     36a:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     37a:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

00000388 <__ctors_end>:
     388:	11 24       	eor	r1, r1
     38a:	1f be       	out	0x3f, r1	; 63
     38c:	cf ef       	ldi	r28, 0xFF	; 255
     38e:	cd bf       	out	0x3d, r28	; 61
     390:	df e5       	ldi	r29, 0x5F	; 95
     392:	de bf       	out	0x3e, r29	; 62
     394:	00 e0       	ldi	r16, 0x00	; 0
     396:	0c bf       	out	0x3c, r16	; 60

00000398 <__do_copy_data>:
     398:	12 e2       	ldi	r17, 0x22	; 34
     39a:	a0 e0       	ldi	r26, 0x00	; 0
     39c:	b0 e2       	ldi	r27, 0x20	; 32
     39e:	ea ed       	ldi	r30, 0xDA	; 218
     3a0:	f0 e2       	ldi	r31, 0x20	; 32
     3a2:	00 e0       	ldi	r16, 0x00	; 0
     3a4:	0b bf       	out	0x3b, r16	; 59
     3a6:	02 c0       	rjmp	.+4      	; 0x3ac <__do_copy_data+0x14>
     3a8:	07 90       	elpm	r0, Z+
     3aa:	0d 92       	st	X+, r0
     3ac:	ac 33       	cpi	r26, 0x3C	; 60
     3ae:	b1 07       	cpc	r27, r17
     3b0:	d9 f7       	brne	.-10     	; 0x3a8 <__do_copy_data+0x10>

000003b2 <__do_clear_bss>:
     3b2:	23 e2       	ldi	r18, 0x23	; 35
     3b4:	ac e3       	ldi	r26, 0x3C	; 60
     3b6:	b2 e2       	ldi	r27, 0x22	; 34
     3b8:	01 c0       	rjmp	.+2      	; 0x3bc <.do_clear_bss_start>

000003ba <.do_clear_bss_loop>:
     3ba:	1d 92       	st	X+, r1

000003bc <.do_clear_bss_start>:
     3bc:	ae 3d       	cpi	r26, 0xDE	; 222
     3be:	b2 07       	cpc	r27, r18
     3c0:	e1 f7       	brne	.-8      	; 0x3ba <.do_clear_bss_loop>
     3c2:	0e 94 c3 06 	call	0xd86	; 0xd86 <main>
     3c6:	0c 94 6b 10 	jmp	0x20d6	; 0x20d6 <_exit>

000003ca <__bad_interrupt>:
     3ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000003ce <setBNO080pins>:
float BNO080getLinAccelZ(void);
uint8_t BNO080getLinAccelAccuracy(void);

void setBNO080pins(void){
	//The INT pin: input, acvtive low
	PORTA.DIRCLR	= _INT;			//PIN0
     3ce:	e0 e0       	ldi	r30, 0x00	; 0
     3d0:	f6 e0       	ldi	r31, 0x06	; 6
     3d2:	81 e0       	ldi	r24, 0x01	; 1
     3d4:	82 83       	std	Z+2, r24	; 0x02
	PORTA.PIN0CTRL	= PORT_OPC_PULLUP_gc;
     3d6:	88 e1       	ldi	r24, 0x18	; 24
     3d8:	80 8b       	std	Z+16, r24	; 0x10
	//The RST pin: output, active low
	PORTA.DIRSET	= _RST;			//PIN1
     3da:	92 e0       	ldi	r25, 0x02	; 2
     3dc:	91 83       	std	Z+1, r25	; 0x01
	//PORTA.PIN1CTRL	= PORT_OPC_PULLUP_gc;
	//The PSO/Wake pin: output, needs to be high to enable SPI-mode serves as wake operation, active low.
	PORTA.DIRSET	= _WAKE;		//PIN6
     3de:	90 e4       	ldi	r25, 0x40	; 64
     3e0:	91 83       	std	Z+1, r25	; 0x01
	PORTA.PIN6CTRL	= PORT_OPC_PULLUP_gc;
     3e2:	86 8b       	std	Z+22, r24	; 0x16
     3e4:	08 95       	ret

000003e6 <BNO080waitForSPI>:
		printf("ID response failed...\n");
	}
	return 0;
}

uint8_t BNO080waitForSPI(void){
     3e6:	cf 93       	push	r28

/*! \brief Result of the test. */
bool success = true;

int CheckPinLevel(PORT_t* PortCheck, uint8_t pinCheck) {
	int PortMask = PortCheck->IN;
     3e8:	80 91 08 06 	lds	r24, 0x0608	; 0x800608 <__TEXT_REGION_LENGTH__+0x700608>
}

uint8_t BNO080waitForSPI(void){
	for (uint8_t counter = 0; counter < 125; counter++)
	{
		if (CheckPinLevel(&PORTA, _INT) == LOW)
     3ec:	80 fd       	sbrc	r24, 0
     3ee:	17 c0       	rjmp	.+46     	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
     3f0:	03 c0       	rjmp	.+6      	; 0x3f8 <BNO080waitForSPI+0x12>

/*! \brief Result of the test. */
bool success = true;

int CheckPinLevel(PORT_t* PortCheck, uint8_t pinCheck) {
	int PortMask = PortCheck->IN;
     3f2:	80 85       	ldd	r24, Z+8	; 0x08
}

uint8_t BNO080waitForSPI(void){
	for (uint8_t counter = 0; counter < 125; counter++)
	{
		if (CheckPinLevel(&PORTA, _INT) == LOW)
     3f4:	80 fd       	sbrc	r24, 0
     3f6:	06 c0       	rjmp	.+12     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
		{
			printf("_INT == LOW\n");
     3f8:	80 e1       	ldi	r24, 0x10	; 16
     3fa:	90 e2       	ldi	r25, 0x20	; 32
     3fc:	0e 94 dd 0f 	call	0x1fba	; 0x1fba <puts>
			return 1;
     400:	c1 e0       	ldi	r28, 0x01	; 1
     402:	17 c0       	rjmp	.+46     	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     404:	83 ef       	ldi	r24, 0xF3	; 243
     406:	91 e0       	ldi	r25, 0x01	; 1
     408:	01 97       	sbiw	r24, 0x01	; 1
     40a:	f1 f7       	brne	.-4      	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
     40c:	00 c0       	rjmp	.+0      	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
     40e:	00 00       	nop
     410:	c1 50       	subi	r28, 0x01	; 1
	}
	return 0;
}

uint8_t BNO080waitForSPI(void){
	for (uint8_t counter = 0; counter < 125; counter++)
     412:	79 f7       	brne	.-34     	; 0x3f2 <BNO080waitForSPI+0xc>
			return 1;
		}
		_delay_ms(1);
	}
	//response failed
	printf("SPI INT timeout\n");
     414:	8c e1       	ldi	r24, 0x1C	; 28
     416:	90 e2       	ldi	r25, 0x20	; 32
     418:	0e 94 dd 0f 	call	0x1fba	; 0x1fba <puts>
	return 0;
     41c:	0a c0       	rjmp	.+20     	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
     41e:	83 ef       	ldi	r24, 0xF3	; 243
     420:	91 e0       	ldi	r25, 0x01	; 1
     422:	01 97       	sbiw	r24, 0x01	; 1
     424:	f1 f7       	brne	.-4      	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
     426:	00 c0       	rjmp	.+0      	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
     428:	00 00       	nop
     42a:	cc e7       	ldi	r28, 0x7C	; 124

/*! \brief Result of the test. */
bool success = true;

int CheckPinLevel(PORT_t* PortCheck, uint8_t pinCheck) {
	int PortMask = PortCheck->IN;
     42c:	e0 e0       	ldi	r30, 0x00	; 0
     42e:	f6 e0       	ldi	r31, 0x06	; 6
     430:	e0 cf       	rjmp	.-64     	; 0x3f2 <BNO080waitForSPI+0xc>
		_delay_ms(1);
	}
	//response failed
	printf("SPI INT timeout\n");
	return 0;
}
     432:	8c 2f       	mov	r24, r28
     434:	cf 91       	pop	r28
     436:	08 95       	ret

00000438 <BNO080sendPacket>:
		return 1;
	}
	else return 0;
}

bool BNO080sendPacket(uint8_t channelNumber, uint8_t dataLength){
     438:	9f 92       	push	r9
     43a:	af 92       	push	r10
     43c:	bf 92       	push	r11
     43e:	cf 92       	push	r12
     440:	df 92       	push	r13
     442:	ef 92       	push	r14
     444:	ff 92       	push	r15
     446:	0f 93       	push	r16
     448:	1f 93       	push	r17
     44a:	cf 93       	push	r28
     44c:	df 93       	push	r29
     44e:	c8 2f       	mov	r28, r24
     450:	d6 2f       	mov	r29, r22
	uint8_t packetLength = dataLength + 4; //Add four bytes for the header
	//Wait for BNO080 to indicate it is available for communication
	PORTA.OUTCLR = _WAKE;
     452:	80 e4       	ldi	r24, 0x40	; 64
     454:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__TEXT_REGION_LENGTH__+0x700606>
	//Check for wake response BNO080
	if(BNO080waitForSPI()) {
     458:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <BNO080waitForSPI>
     45c:	88 23       	and	r24, r24
     45e:	09 f4       	brne	.+2      	; 0x462 <BNO080sendPacket+0x2a>
     460:	63 c0       	rjmp	.+198    	; 0x528 <BNO080sendPacket+0xf0>
	}
	else return 0;
}

bool BNO080sendPacket(uint8_t channelNumber, uint8_t dataLength){
	uint8_t packetLength = dataLength + 4; //Add four bytes for the header
     462:	68 94       	set
     464:	99 24       	eor	r9, r9
     466:	92 f8       	bld	r9, 2
     468:	9d 0e       	add	r9, r29
	//Wait for BNO080 to indicate it is available for communication
	PORTA.OUTCLR = _WAKE;
	//Check for wake response BNO080
	if(BNO080waitForSPI()) {
		printf("BNO080 is awake!\n");
     46a:	8c e2       	ldi	r24, 0x2C	; 44
     46c:	90 e2       	ldi	r25, 0x20	; 32
     46e:	0e 94 dd 0f 	call	0x1fba	; 0x1fba <puts>
		//Select the BNO080 and release from wake
		PORTD.OUTCLR = SPI_SS_bm;
     472:	80 e1       	ldi	r24, 0x10	; 16
     474:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
		PORTA.OUTSET = _WAKE;
     478:	80 e4       	ldi	r24, 0x40	; 64
     47a:	80 93 05 06 	sts	0x0605, r24	; 0x800605 <__TEXT_REGION_LENGTH__+0x700605>
		printf("Host send packet to BNO080\n");
     47e:	8d e3       	ldi	r24, 0x3D	; 61
     480:	90 e2       	ldi	r25, 0x20	; 32
     482:	0e 94 dd 0f 	call	0x1fba	; 0x1fba <puts>
		//Send the 4 byte packet header
		spi_transfer((packetLength & 0xFF));
     486:	89 2d       	mov	r24, r9
     488:	0e 94 b9 06 	call	0xd72	; 0xd72 <spi_transfer>
		spi_transfer((packetLength >> 8));
     48c:	80 e0       	ldi	r24, 0x00	; 0
     48e:	0e 94 b9 06 	call	0xd72	; 0xd72 <spi_transfer>
		spi_transfer(channelNumber);
     492:	8c 2f       	mov	r24, r28
     494:	0e 94 b9 06 	call	0xd72	; 0xd72 <spi_transfer>
		spi_transfer((sequenceNumber[channelNumber]++));
     498:	ec 2f       	mov	r30, r28
     49a:	f0 e0       	ldi	r31, 0x00	; 0
     49c:	e4 5c       	subi	r30, 0xC4	; 196
     49e:	fd 4d       	sbci	r31, 0xDD	; 221
     4a0:	80 81       	ld	r24, Z
     4a2:	91 e0       	ldi	r25, 0x01	; 1
     4a4:	98 0f       	add	r25, r24
     4a6:	90 83       	st	Z, r25
     4a8:	0e 94 b9 06 	call	0xd72	; 0xd72 <spi_transfer>
		for (uint8_t i = 0; i < dataLength; i++) {
     4ac:	dd 23       	and	r29, r29
     4ae:	59 f1       	breq	.+86     	; 0x506 <BNO080sendPacket+0xce>
     4b0:	0f 2e       	mov	r0, r31
     4b2:	f5 e4       	ldi	r31, 0x45	; 69
     4b4:	af 2e       	mov	r10, r31
     4b6:	f3 e2       	ldi	r31, 0x23	; 35
     4b8:	bf 2e       	mov	r11, r31
     4ba:	f0 2d       	mov	r31, r0
     4bc:	d1 50       	subi	r29, 0x01	; 1
     4be:	6d 2f       	mov	r22, r29
     4c0:	70 e0       	ldi	r23, 0x00	; 0
     4c2:	cb 01       	movw	r24, r22
     4c4:	8a 5b       	subi	r24, 0xBA	; 186
     4c6:	9c 4d       	sbci	r25, 0xDC	; 220
     4c8:	6c 01       	movw	r12, r24
     4ca:	e5 01       	movw	r28, r10
			printf("shtpdata[%d]: %d \n",i, shtpData[i]);
     4cc:	08 e5       	ldi	r16, 0x58	; 88
     4ce:	10 e2       	ldi	r17, 0x20	; 32
     4d0:	7e 01       	movw	r14, r28
     4d2:	88 81       	ld	r24, Y
     4d4:	1f 92       	push	r1
     4d6:	8f 93       	push	r24
     4d8:	ce 01       	movw	r24, r28
     4da:	8a 19       	sub	r24, r10
     4dc:	9b 09       	sbc	r25, r11
     4de:	9f 93       	push	r25
     4e0:	8f 93       	push	r24
     4e2:	1f 93       	push	r17
     4e4:	0f 93       	push	r16
     4e6:	0e 94 c9 0f 	call	0x1f92	; 0x1f92 <printf>
     4ea:	21 96       	adiw	r28, 0x01	; 1
			spi_transfer(shtpData[i]);
     4ec:	f7 01       	movw	r30, r14
     4ee:	80 81       	ld	r24, Z
     4f0:	0e 94 b9 06 	call	0xd72	; 0xd72 <spi_transfer>
		//Send the 4 byte packet header
		spi_transfer((packetLength & 0xFF));
		spi_transfer((packetLength >> 8));
		spi_transfer(channelNumber);
		spi_transfer((sequenceNumber[channelNumber]++));
		for (uint8_t i = 0; i < dataLength; i++) {
     4f4:	0f 90       	pop	r0
     4f6:	0f 90       	pop	r0
     4f8:	0f 90       	pop	r0
     4fa:	0f 90       	pop	r0
     4fc:	0f 90       	pop	r0
     4fe:	0f 90       	pop	r0
     500:	cc 15       	cp	r28, r12
     502:	dd 05       	cpc	r29, r13
     504:	29 f7       	brne	.-54     	; 0x4d0 <BNO080sendPacket+0x98>
			printf("shtpdata[%d]: %d \n",i, shtpData[i]);
			spi_transfer(shtpData[i]);
			//SPI_MasterTransmitByte(&spiMasterD,shtpData[i]);
		}
		//SPI_MasterSSHigh(ssPort, PIN4_bm);
		PORTD.OUTSET = SPI_SS_bm;
     506:	80 e1       	ldi	r24, 0x10	; 16
     508:	80 93 65 06 	sts	0x0665, r24	; 0x800665 <__TEXT_REGION_LENGTH__+0x700665>
		uint16_t lenght = ((uint16_t) (packetLength >> 8)<< 8 | (packetLength & 0xFF));
		printf("-----Lenght = %d\n", lenght);
     50c:	1f 92       	push	r1
     50e:	9f 92       	push	r9
     510:	8b e6       	ldi	r24, 0x6B	; 107
     512:	90 e2       	ldi	r25, 0x20	; 32
     514:	9f 93       	push	r25
     516:	8f 93       	push	r24
     518:	0e 94 c9 0f 	call	0x1f92	; 0x1f92 <printf>
		
		return true;
     51c:	0f 90       	pop	r0
     51e:	0f 90       	pop	r0
     520:	0f 90       	pop	r0
     522:	0f 90       	pop	r0
     524:	81 e0       	ldi	r24, 0x01	; 1
     526:	04 c0       	rjmp	.+8      	; 0x530 <BNO080sendPacket+0xf8>
	}
	PORTA.OUTSET = _WAKE;
     528:	80 e4       	ldi	r24, 0x40	; 64
     52a:	80 93 05 06 	sts	0x0605, r24	; 0x800605 <__TEXT_REGION_LENGTH__+0x700605>
	return false;
     52e:	80 e0       	ldi	r24, 0x00	; 0
}
     530:	df 91       	pop	r29
     532:	cf 91       	pop	r28
     534:	1f 91       	pop	r17
     536:	0f 91       	pop	r16
     538:	ff 90       	pop	r15
     53a:	ef 90       	pop	r14
     53c:	df 90       	pop	r13
     53e:	cf 90       	pop	r12
     540:	bf 90       	pop	r11
     542:	af 90       	pop	r10
     544:	9f 90       	pop	r9
     546:	08 95       	ret

00000548 <BNO080setFeatureCommand>:

void BNO080setFeatureCommand(uint8_t reportID, uint16_t timeBetweenReports, uint32_t specificConfig){
     548:	cf 92       	push	r12
     54a:	df 92       	push	r13
     54c:	ff 92       	push	r15
     54e:	0f 93       	push	r16
     550:	1f 93       	push	r17
     552:	cf 93       	push	r28
     554:	df 93       	push	r29
     556:	f8 2e       	mov	r15, r24
     558:	6b 01       	movw	r12, r22
     55a:	02 2f       	mov	r16, r18
     55c:	13 2f       	mov	r17, r19
     55e:	d4 2f       	mov	r29, r20
     560:	c5 2f       	mov	r28, r21
	printf("setFeatureCommand! \n");
     562:	8d e7       	ldi	r24, 0x7D	; 125
     564:	90 e2       	ldi	r25, 0x20	; 32
     566:	0e 94 dd 0f 	call	0x1fba	; 0x1fba <puts>
	uint32_t microsBetweenReports = (uint32_t)timeBetweenReports * 1000L;
     56a:	96 01       	movw	r18, r12
     56c:	a8 ee       	ldi	r26, 0xE8	; 232
     56e:	b3 e0       	ldi	r27, 0x03	; 3
     570:	0e 94 90 0e 	call	0x1d20	; 0x1d20 <__umulhisi3>
	
	shtpData[0] = SHTP_REPORT_SET_FEATURE_COMMAND;	 //Set feature command. Reference page 55
     574:	e5 e4       	ldi	r30, 0x45	; 69
     576:	f3 e2       	ldi	r31, 0x23	; 35
     578:	2d ef       	ldi	r18, 0xFD	; 253
     57a:	20 83       	st	Z, r18
	shtpData[1] = reportID;							   //Feature Report ID. 0x01 = Accelerometer, 0x05 = Rotation vector
     57c:	f1 82       	std	Z+1, r15	; 0x01
	shtpData[2] = 0;								   //Feature flags
     57e:	12 82       	std	Z+2, r1	; 0x02
	shtpData[3] = 0;								   //Change sensitivity (LSB)
     580:	13 82       	std	Z+3, r1	; 0x03
	shtpData[4] = 0;								   //Change sensitivity (MSB)
     582:	14 82       	std	Z+4, r1	; 0x04
	shtpData[5] = (microsBetweenReports >> 0) & 0xFF;  //Report interval (LSB) in microseconds. 0x7A120 = 500ms
     584:	65 83       	std	Z+5, r22	; 0x05
	shtpData[6] = (microsBetweenReports >> 8) & 0xFF;  //Report interval
     586:	76 83       	std	Z+6, r23	; 0x06
	shtpData[7] = (microsBetweenReports >> 16) & 0xFF; //Report interval
     588:	87 83       	std	Z+7, r24	; 0x07
	shtpData[8] = (microsBetweenReports >> 24) & 0xFF; //Report interval (MSB)
     58a:	90 87       	std	Z+8, r25	; 0x08
	shtpData[9] = 0;								   //Batch Interval (LSB)
     58c:	11 86       	std	Z+9, r1	; 0x09
	shtpData[10] = 0;								   //Batch Interval
     58e:	12 86       	std	Z+10, r1	; 0x0a
	shtpData[11] = 0;								   //Batch Interval
     590:	13 86       	std	Z+11, r1	; 0x0b
	shtpData[12] = 0;								   //Batch Interval (MSB)
     592:	14 86       	std	Z+12, r1	; 0x0c
	shtpData[13] = (specificConfig >> 0) & 0xFF;	   //Sensor-specific config (LSB)
     594:	05 87       	std	Z+13, r16	; 0x0d
	shtpData[14] = (specificConfig >> 8) & 0xFF;	   //Sensor-specific config
     596:	16 87       	std	Z+14, r17	; 0x0e
	shtpData[15] = (specificConfig >> 16) & 0xFF;	  //Sensor-specific config
     598:	d7 87       	std	Z+15, r29	; 0x0f
	shtpData[16] = (specificConfig >> 24) & 0xFF;	  //Sensor-specific config (MSB)
     59a:	c0 8b       	std	Z+16, r28	; 0x10
	
	//Transmit packet on channel 2, 17 bytes
	BNO080sendPacket(CHANNEL_CONTROL, 17);
     59c:	61 e1       	ldi	r22, 0x11	; 17
     59e:	82 e0       	ldi	r24, 0x02	; 2
     5a0:	0e 94 1c 02 	call	0x438	; 0x438 <BNO080sendPacket>
}
     5a4:	df 91       	pop	r29
     5a6:	cf 91       	pop	r28
     5a8:	1f 91       	pop	r17
     5aa:	0f 91       	pop	r16
     5ac:	ff 90       	pop	r15
     5ae:	df 90       	pop	r13
     5b0:	cf 90       	pop	r12
     5b2:	08 95       	ret

000005b4 <BNO080receivePacket>:

bool BNO080receivePacket(void){
     5b4:	ef 92       	push	r14
     5b6:	ff 92       	push	r15
     5b8:	0f 93       	push	r16
     5ba:	1f 93       	push	r17
     5bc:	cf 93       	push	r28
     5be:	df 93       	push	r29

	if (!BNO080waitForSPI()){
     5c0:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <BNO080waitForSPI>
     5c4:	81 11       	cpse	r24, r1
     5c6:	06 c0       	rjmp	.+12     	; 0x5d4 <BNO080receivePacket+0x20>
		printf("nothing to receive...\n");
     5c8:	81 e9       	ldi	r24, 0x91	; 145
     5ca:	90 e2       	ldi	r25, 0x20	; 32
     5cc:	0e 94 dd 0f 	call	0x1fba	; 0x1fba <puts>
		return false;
     5d0:	80 e0       	ldi	r24, 0x00	; 0
     5d2:	7c c0       	rjmp	.+248    	; 0x6cc <BNO080receivePacket+0x118>
	}
	printf("ready to receive!\n");
     5d4:	87 ea       	ldi	r24, 0xA7	; 167
     5d6:	90 e2       	ldi	r25, 0x20	; 32
     5d8:	0e 94 dd 0f 	call	0x1fba	; 0x1fba <puts>
			
	//SPI_MasterSSLow(ssPort, PIN4_bm);
	PORTD.OUTCLR = SPI_SS_bm;
     5dc:	80 e1       	ldi	r24, 0x10	; 16
     5de:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
		
	//Get first four bytes to find out how much data we need to read
	uint8_t packetLSB = spi_transfer(FOO);//SPI_MasterReceiveByte(&spiMasterD);
     5e2:	80 e0       	ldi	r24, 0x00	; 0
     5e4:	0e 94 b9 06 	call	0xd72	; 0xd72 <spi_transfer>
     5e8:	08 2f       	mov	r16, r24
	uint8_t packetMSB  = spi_transfer(FOO);//SPI_MasterReceiveByte(&spiMasterD);
     5ea:	80 e0       	ldi	r24, 0x00	; 0
     5ec:	0e 94 b9 06 	call	0xd72	; 0xd72 <spi_transfer>
     5f0:	c8 2f       	mov	r28, r24
	uint8_t channelNumber  = spi_transfer(FOO);//SPI_MasterReceiveByte(&spiMasterD);
     5f2:	80 e0       	ldi	r24, 0x00	; 0
     5f4:	0e 94 b9 06 	call	0xd72	; 0xd72 <spi_transfer>
     5f8:	d8 2f       	mov	r29, r24
	uint8_t sequenceNumber  = spi_transfer(FOO);//SPI_MasterReceiveByte(&spiMasterD);
     5fa:	80 e0       	ldi	r24, 0x00	; 0
     5fc:	0e 94 b9 06 	call	0xd72	; 0xd72 <spi_transfer>
	shtpHeader[0] = packetLSB;
     600:	ee e0       	ldi	r30, 0x0E	; 14
     602:	f3 e2       	ldi	r31, 0x23	; 35
     604:	00 83       	st	Z, r16
	shtpHeader[1] = packetMSB;
     606:	c1 83       	std	Z+1, r28	; 0x01
	shtpHeader[2] = channelNumber;
     608:	d2 83       	std	Z+2, r29	; 0x02
	shtpHeader[3] = sequenceNumber;
     60a:	83 83       	std	Z+3, r24	; 0x03
	//Calculate the number of data bytes in this packet
	uint16_t dataLength = ((uint16_t)packetMSB << 8 | packetLSB);
     60c:	10 e0       	ldi	r17, 0x00	; 0
     60e:	1c 2b       	or	r17, r28
	dataLength &= ~(1 << 15); //Clear the MSbit.
     610:	1f 77       	andi	r17, 0x7F	; 127
	if (dataLength == 0){
     612:	01 15       	cp	r16, r1
     614:	11 05       	cpc	r17, r1
     616:	49 f4       	brne	.+18     	; 0x62a <BNO080receivePacket+0x76>
		printf("dataLength = 0...\n");
     618:	89 eb       	ldi	r24, 0xB9	; 185
     61a:	90 e2       	ldi	r25, 0x20	; 32
     61c:	0e 94 dd 0f 	call	0x1fba	; 0x1fba <puts>
		PORTD.OUTSET = SPI_SS_bm;
     620:	80 e1       	ldi	r24, 0x10	; 16
     622:	80 93 65 06 	sts	0x0665, r24	; 0x800665 <__TEXT_REGION_LENGTH__+0x700665>
		return false; //Packet is empty
     626:	80 e0       	ldi	r24, 0x00	; 0
     628:	51 c0       	rjmp	.+162    	; 0x6cc <BNO080receivePacket+0x118>
	}
	dataLength -= 4; //Remove the header bytes from the data count
     62a:	04 50       	subi	r16, 0x04	; 4
     62c:	11 09       	sbc	r17, r1
	//Read incoming data into the shtpData array
	uint8_t incoming = 0;
	for(uint16_t dataSpot = 0; dataSpot < dataLength; dataSpot++) {
     62e:	b9 f0       	breq	.+46     	; 0x65e <BNO080receivePacket+0xaa>
     630:	0f 2e       	mov	r0, r31
     632:	f5 e4       	ldi	r31, 0x45	; 69
     634:	ef 2e       	mov	r14, r31
     636:	f3 e2       	ldi	r31, 0x23	; 35
     638:	ff 2e       	mov	r15, r31
     63a:	f0 2d       	mov	r31, r0
     63c:	c0 e0       	ldi	r28, 0x00	; 0
     63e:	d0 e0       	ldi	r29, 0x00	; 0
		incoming = spi_transfer(FOO);//SPI_MasterReceiveByte(&spiMasterD);
     640:	80 e0       	ldi	r24, 0x00	; 0
     642:	0e 94 b9 06 	call	0xd72	; 0xd72 <spi_transfer>
		if (dataSpot < MAX_PACKET_SIZE) //BNO080 can respond with upto 270 bytes, avoid overflow
     646:	c0 38       	cpi	r28, 0x80	; 128
     648:	d1 05       	cpc	r29, r1
     64a:	10 f4       	brcc	.+4      	; 0x650 <BNO080receivePacket+0x9c>
			shtpData[dataSpot] = incoming;
     64c:	f7 01       	movw	r30, r14
     64e:	80 83       	st	Z, r24
		return false; //Packet is empty
	}
	dataLength -= 4; //Remove the header bytes from the data count
	//Read incoming data into the shtpData array
	uint8_t incoming = 0;
	for(uint16_t dataSpot = 0; dataSpot < dataLength; dataSpot++) {
     650:	21 96       	adiw	r28, 0x01	; 1
     652:	ff ef       	ldi	r31, 0xFF	; 255
     654:	ef 1a       	sub	r14, r31
     656:	ff 0a       	sbc	r15, r31
     658:	c0 17       	cp	r28, r16
     65a:	d1 07       	cpc	r29, r17
     65c:	88 f3       	brcs	.-30     	; 0x640 <BNO080receivePacket+0x8c>
		incoming = spi_transfer(FOO);//SPI_MasterReceiveByte(&spiMasterD);
		if (dataSpot < MAX_PACKET_SIZE) //BNO080 can respond with upto 270 bytes, avoid overflow
			shtpData[dataSpot] = incoming;
	}
	//SPI_MasterSSHigh(ssPort, PIN4_bm); //Release BNO080
	PORTD.OUTSET = SPI_SS_bm;
     65e:	80 e1       	ldi	r24, 0x10	; 16
     660:	80 93 65 06 	sts	0x0665, r24	; 0x800665 <__TEXT_REGION_LENGTH__+0x700665>
	printf("SHPT header 1: %d \n", shtpHeader[0]);
     664:	ce e0       	ldi	r28, 0x0E	; 14
     666:	d3 e2       	ldi	r29, 0x23	; 35
     668:	88 81       	ld	r24, Y
     66a:	1f 92       	push	r1
     66c:	8f 93       	push	r24
     66e:	8b ec       	ldi	r24, 0xCB	; 203
     670:	90 e2       	ldi	r25, 0x20	; 32
     672:	9f 93       	push	r25
     674:	8f 93       	push	r24
     676:	0e 94 c9 0f 	call	0x1f92	; 0x1f92 <printf>
	printf("SHPT header 2: %d \n", shtpHeader[1]);
     67a:	89 81       	ldd	r24, Y+1	; 0x01
     67c:	1f 92       	push	r1
     67e:	8f 93       	push	r24
     680:	8f ed       	ldi	r24, 0xDF	; 223
     682:	90 e2       	ldi	r25, 0x20	; 32
     684:	9f 93       	push	r25
     686:	8f 93       	push	r24
     688:	0e 94 c9 0f 	call	0x1f92	; 0x1f92 <printf>
	printf("SHPT header 3: %d \n", shtpHeader[2]);
     68c:	8a 81       	ldd	r24, Y+2	; 0x02
     68e:	1f 92       	push	r1
     690:	8f 93       	push	r24
     692:	83 ef       	ldi	r24, 0xF3	; 243
     694:	90 e2       	ldi	r25, 0x20	; 32
     696:	9f 93       	push	r25
     698:	8f 93       	push	r24
     69a:	0e 94 c9 0f 	call	0x1f92	; 0x1f92 <printf>
	printf("SHPT header 4: %d \n", shtpHeader[3]);
     69e:	8b 81       	ldd	r24, Y+3	; 0x03
     6a0:	1f 92       	push	r1
     6a2:	8f 93       	push	r24
     6a4:	87 e0       	ldi	r24, 0x07	; 7
     6a6:	91 e2       	ldi	r25, 0x21	; 33
     6a8:	9f 93       	push	r25
     6aa:	8f 93       	push	r24
     6ac:	0e 94 c9 0f 	call	0x1f92	; 0x1f92 <printf>
	printf("dataLength = %d\n", dataLength);
     6b0:	1f 93       	push	r17
     6b2:	0f 93       	push	r16
     6b4:	8b e1       	ldi	r24, 0x1B	; 27
     6b6:	91 e2       	ldi	r25, 0x21	; 33
     6b8:	9f 93       	push	r25
     6ba:	8f 93       	push	r24
     6bc:	0e 94 c9 0f 	call	0x1f92	; 0x1f92 <printf>
	return true;
     6c0:	8d b7       	in	r24, 0x3d	; 61
     6c2:	9e b7       	in	r25, 0x3e	; 62
     6c4:	44 96       	adiw	r24, 0x14	; 20
     6c6:	8d bf       	out	0x3d, r24	; 61
     6c8:	9e bf       	out	0x3e, r25	; 62
     6ca:	81 e0       	ldi	r24, 0x01	; 1
}
     6cc:	df 91       	pop	r29
     6ce:	cf 91       	pop	r28
     6d0:	1f 91       	pop	r17
     6d2:	0f 91       	pop	r16
     6d4:	ff 90       	pop	r15
     6d6:	ef 90       	pop	r14
     6d8:	08 95       	ret

000006da <BNO080BeginSPI>:


}

uint8_t BNO080BeginSPI(void){
	setBNO080pins();
     6da:	0e 94 e7 01 	call	0x3ce	; 0x3ce <setBNO080pins>
	spi_init();	//Turn on SPI hardware
     6de:	0e 94 ac 06 	call	0xd58	; 0xd58 <spi_init>
	
	PORTD.OUTSET = SPI_SS_bm;	//Deselect BNO080
     6e2:	80 e1       	ldi	r24, 0x10	; 16
     6e4:	80 93 65 06 	sts	0x0665, r24	; 0x800665 <__TEXT_REGION_LENGTH__+0x700665>
	
	//Configure the BNO080 for SPI communication
	PORTA.OUTSET = _WAKE;	//Before boot up the PS0/WAK pin must be high to enter SPI mode
     6e8:	e0 e0       	ldi	r30, 0x00	; 0
     6ea:	f6 e0       	ldi	r31, 0x06	; 6
     6ec:	80 e4       	ldi	r24, 0x40	; 64
     6ee:	85 83       	std	Z+5, r24	; 0x05
	PORTA.OUTCLR = _RST;	//Reset BNO080
     6f0:	82 e0       	ldi	r24, 0x02	; 2
     6f2:	86 83       	std	Z+6, r24	; 0x06
     6f4:	a7 ee       	ldi	r26, 0xE7	; 231
     6f6:	b3 e0       	ldi	r27, 0x03	; 3
     6f8:	11 97       	sbiw	r26, 0x01	; 1
     6fa:	f1 f7       	brne	.-4      	; 0x6f8 <BNO080BeginSPI+0x1e>
     6fc:	00 c0       	rjmp	.+0      	; 0x6fe <BNO080BeginSPI+0x24>
     6fe:	00 00       	nop
	_delay_ms(2);			//Wait 2 milisec
	PORTA.OUTSET = _RST;	//Bring out of reset
     700:	85 83       	std	Z+5, r24	; 0x05
	
	//Wait for first assertion of INT before using WAK pin. Can take ~104ms
	printf("- 1st wait\n");
     702:	8c e2       	ldi	r24, 0x2C	; 44
     704:	91 e2       	ldi	r25, 0x21	; 33
     706:	0e 94 dd 0f 	call	0x1fba	; 0x1fba <puts>
	BNO080waitForSPI();
     70a:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <BNO080waitForSPI>
	
	//At system startup, the hub must send its full advertisement message (see 5.2 and 5.3) to the
	//host. It must not send any other data until this step is complete.
	//When BNO080 first boots it broadcasts big startup packet
	//Read it and dump it
	printf("- 2nd wait\n");
     70e:	87 e3       	ldi	r24, 0x37	; 55
     710:	91 e2       	ldi	r25, 0x21	; 33
     712:	0e 94 dd 0f 	call	0x1fba	; 0x1fba <puts>
	BNO080waitForSPI(); //Wait for assertion of INT before reading advert message.
     716:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <BNO080waitForSPI>
	BNO080receivePacket();
     71a:	0e 94 da 02 	call	0x5b4	; 0x5b4 <BNO080receivePacket>
	//The BNO080 will then transmit an unsolicited Initialize Response (see 6.4.5.2)
	//Read it and dump it
	printf("- 3rd wait\n");
     71e:	82 e4       	ldi	r24, 0x42	; 66
     720:	91 e2       	ldi	r25, 0x21	; 33
     722:	0e 94 dd 0f 	call	0x1fba	; 0x1fba <puts>
	BNO080waitForSPI(); //Wait for assertion of INT before reading Init response
     726:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <BNO080waitForSPI>
	BNO080receivePacket();
     72a:	0e 94 da 02 	call	0x5b4	; 0x5b4 <BNO080receivePacket>
	
	//Check communication with device
	shtpData[0] = SHTP_REPORT_PRODUCT_ID_REQUEST; //Request the product ID and reset info
     72e:	e5 e4       	ldi	r30, 0x45	; 69
     730:	f3 e2       	ldi	r31, 0x23	; 35
     732:	89 ef       	ldi	r24, 0xF9	; 249
     734:	80 83       	st	Z, r24
	shtpData[1] = 0;
     736:	11 82       	std	Z+1, r1	; 0x01
	
	//Transmit packet on channel 2, 2 bytes
	printf("-f BNO080sendPacket\n");
     738:	8d e4       	ldi	r24, 0x4D	; 77
     73a:	91 e2       	ldi	r25, 0x21	; 33
     73c:	0e 94 dd 0f 	call	0x1fba	; 0x1fba <puts>
	BNO080sendPacket(CHANNEL_CONTROL, 2);
     740:	62 e0       	ldi	r22, 0x02	; 2
     742:	82 e0       	ldi	r24, 0x02	; 2
     744:	0e 94 1c 02 	call	0x438	; 0x438 <BNO080sendPacket>
	
	//Now we wait for response
	printf("- await packet\n");
     748:	81 e6       	ldi	r24, 0x61	; 97
     74a:	91 e2       	ldi	r25, 0x21	; 33
     74c:	0e 94 dd 0f 	call	0x1fba	; 0x1fba <puts>
	BNO080waitForSPI();
     750:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <BNO080waitForSPI>
	if (BNO080receivePacket())
     754:	0e 94 da 02 	call	0x5b4	; 0x5b4 <BNO080receivePacket>
     758:	88 23       	and	r24, r24
     75a:	a1 f0       	breq	.+40     	; 0x784 <BNO080BeginSPI+0xaa>
	{
		if (shtpData[0] == SHTP_REPORT_PRODUCT_ID_RESPONSE)
     75c:	80 91 45 23 	lds	r24, 0x2345	; 0x802345 <shtpData>
     760:	88 3f       	cpi	r24, 0xF8	; 248
     762:	51 f4       	brne	.+20     	; 0x778 <BNO080BeginSPI+0x9e>
		{
			printf("correct ID response!");
     764:	80 e7       	ldi	r24, 0x70	; 112
     766:	91 e2       	ldi	r25, 0x21	; 33
     768:	9f 93       	push	r25
     76a:	8f 93       	push	r24
     76c:	0e 94 c9 0f 	call	0x1f92	; 0x1f92 <printf>
			return 1;
     770:	0f 90       	pop	r0
     772:	0f 90       	pop	r0
     774:	81 e0       	ldi	r24, 0x01	; 1
     776:	08 95       	ret
		}
		printf("ID response failed...\n");
     778:	85 e8       	ldi	r24, 0x85	; 133
     77a:	91 e2       	ldi	r25, 0x21	; 33
     77c:	0e 94 dd 0f 	call	0x1fba	; 0x1fba <puts>
	}
	return 0;
     780:	80 e0       	ldi	r24, 0x00	; 0
     782:	08 95       	ret
     784:	80 e0       	ldi	r24, 0x00	; 0
}
     786:	08 95       	ret

00000788 <initBNO080>:
	printf("SPI INT timeout\n");
	return 0;
}

uint8_t initBNO080(void){
	if( BNO080BeginSPI()) {
     788:	0e 94 6d 03 	call	0x6da	; 0x6da <BNO080BeginSPI>
     78c:	91 e0       	ldi	r25, 0x01	; 1
     78e:	81 11       	cpse	r24, r1
     790:	01 c0       	rjmp	.+2      	; 0x794 <initBNO080+0xc>
     792:	90 e0       	ldi	r25, 0x00	; 0
		return 1;
	}
	else return 0;
}
     794:	89 2f       	mov	r24, r25
     796:	08 95       	ret

00000798 <BNO080parseInputReport>:
	printf("SHPT header 4: %d \n", shtpHeader[3]);
	printf("dataLength = %d\n", dataLength);
	return true;
}

void BNO080parseInputReport(void) {
     798:	df 92       	push	r13
     79a:	ef 92       	push	r14
     79c:	ff 92       	push	r15
     79e:	0f 93       	push	r16
     7a0:	1f 93       	push	r17
     7a2:	cf 93       	push	r28
     7a4:	df 93       	push	r29
	printf("Parse input report \n");
     7a6:	8b e9       	ldi	r24, 0x9B	; 155
     7a8:	91 e2       	ldi	r25, 0x21	; 33
     7aa:	0e 94 dd 0f 	call	0x1fba	; 0x1fba <puts>
	//Calculate the number of data bytes in this packet
	int16_t dataLength = ((uint16_t)shtpHeader[1] << 8 | shtpHeader[0]);
	dataLength &= ~(1 << 15); //Clear the MSbit. This bit indicates if this package is a continuation of the last.
	dataLength -= 4; //Remove the header bytes from the data count
	
	timeStamp = ((uint32_t)shtpData[4] << (8 * 3)) | ((uint32_t)shtpData[3] << (8 * 2)) | ((uint32_t)shtpData[2] << (8 * 1)) | ((uint32_t)shtpData[1] << (8 * 0));
     7ae:	e5 e4       	ldi	r30, 0x45	; 69
     7b0:	f3 e2       	ldi	r31, 0x23	; 35
     7b2:	24 81       	ldd	r18, Z+4	; 0x04
     7b4:	83 81       	ldd	r24, Z+3	; 0x03
     7b6:	90 e0       	ldi	r25, 0x00	; 0
     7b8:	a0 e0       	ldi	r26, 0x00	; 0
     7ba:	b0 e0       	ldi	r27, 0x00	; 0
     7bc:	dc 01       	movw	r26, r24
     7be:	99 27       	eor	r25, r25
     7c0:	88 27       	eor	r24, r24
     7c2:	b2 2b       	or	r27, r18
     7c4:	21 81       	ldd	r18, Z+1	; 0x01
     7c6:	82 2b       	or	r24, r18
     7c8:	22 81       	ldd	r18, Z+2	; 0x02
     7ca:	92 2b       	or	r25, r18
     7cc:	80 93 32 23 	sts	0x2332, r24	; 0x802332 <timeStamp>
     7d0:	90 93 33 23 	sts	0x2333, r25	; 0x802333 <timeStamp+0x1>
     7d4:	a0 93 34 23 	sts	0x2334, r26	; 0x802334 <timeStamp+0x2>
     7d8:	b0 93 35 23 	sts	0x2335, r27	; 0x802335 <timeStamp+0x3>
	
	uint8_t status = shtpData[5 + 2] & 0x03; //Get status bits
     7dc:	87 81       	ldd	r24, Z+7	; 0x07
     7de:	83 70       	andi	r24, 0x03	; 3
     7e0:	d8 2e       	mov	r13, r24
	uint16_t data1 = (uint16_t)shtpData[REPORT_ID_INDEX + 5] << 8 | shtpData[REPORT_ID_INDEX + 4];
     7e2:	e2 84       	ldd	r14, Z+10	; 0x0a
     7e4:	f1 2c       	mov	r15, r1
     7e6:	fe 2c       	mov	r15, r14
     7e8:	ee 24       	eor	r14, r14
     7ea:	81 85       	ldd	r24, Z+9	; 0x09
     7ec:	e8 2a       	or	r14, r24
	uint16_t data2 = (uint16_t)shtpData[REPORT_ID_INDEX + 7] << 8 | shtpData[REPORT_ID_INDEX + 6];
     7ee:	04 85       	ldd	r16, Z+12	; 0x0c
     7f0:	10 e0       	ldi	r17, 0x00	; 0
     7f2:	10 2f       	mov	r17, r16
     7f4:	00 27       	eor	r16, r16
     7f6:	83 85       	ldd	r24, Z+11	; 0x0b
     7f8:	08 2b       	or	r16, r24
	uint16_t data3 = (uint16_t)shtpData[REPORT_ID_INDEX + 9] << 8 | shtpData[REPORT_ID_INDEX + 8];
     7fa:	86 85       	ldd	r24, Z+14	; 0x0e
     7fc:	90 e0       	ldi	r25, 0x00	; 0
     7fe:	98 2f       	mov	r25, r24
     800:	88 27       	eor	r24, r24
     802:	25 85       	ldd	r18, Z+13	; 0x0d
     804:	ec 01       	movw	r28, r24
     806:	c2 2b       	or	r28, r18
		data4 = (uint16_t)shtpData[REPORT_ID_INDEX + 11] << 8 | shtpData[REPORT_ID_INDEX + 10];
	if (dataLength - 5 > 11)
		data5 = (uint16_t)shtpData[REPORT_ID_INDEX + 13] << 8 | shtpData[REPORT_ID_INDEX + 12];
	
	//Store these generic values to their proper global variable
	if (shtpData[REPORT_ID_INDEX] == SENSOR_REPORTID_ACCELEROMETER)
     808:	85 81       	ldd	r24, Z+5	; 0x05
     80a:	81 30       	cpi	r24, 0x01	; 1
     80c:	99 f4       	brne	.+38     	; 0x834 <BNO080parseInputReport+0x9c>
	{
		accelAccuracy = status;
     80e:	8d 2d       	mov	r24, r13
     810:	90 e0       	ldi	r25, 0x00	; 0
     812:	80 93 d4 23 	sts	0x23D4, r24	; 0x8023d4 <accelAccuracy>
     816:	90 93 d5 23 	sts	0x23D5, r25	; 0x8023d5 <accelAccuracy+0x1>
		rawAccelX = data1;
     81a:	e0 92 cf 23 	sts	0x23CF, r14	; 0x8023cf <rawAccelX>
     81e:	f0 92 d0 23 	sts	0x23D0, r15	; 0x8023d0 <rawAccelX+0x1>
		rawAccelY = data2;
     822:	00 93 d6 23 	sts	0x23D6, r16	; 0x8023d6 <rawAccelY>
     826:	10 93 d7 23 	sts	0x23D7, r17	; 0x8023d7 <rawAccelY+0x1>
		rawAccelZ = data3;
     82a:	c0 93 3a 23 	sts	0x233A, r28	; 0x80233a <rawAccelZ>
     82e:	d0 93 3b 23 	sts	0x233B, r29	; 0x80233b <rawAccelZ+0x1>
     832:	18 c0       	rjmp	.+48     	; 0x864 <BNO080parseInputReport+0xcc>
	}
	else if (shtpData[REPORT_ID_INDEX] == SENSOR_REPORTID_LINEAR_ACCELERATION)
     834:	84 30       	cpi	r24, 0x04	; 4
     836:	b1 f4       	brne	.+44     	; 0x864 <BNO080parseInputReport+0xcc>
	{
		printf("Linear ACC!!\n");
     838:	8f ea       	ldi	r24, 0xAF	; 175
     83a:	91 e2       	ldi	r25, 0x21	; 33
     83c:	0e 94 dd 0f 	call	0x1fba	; 0x1fba <puts>
		accelLinAccuracy = status;
     840:	8d 2d       	mov	r24, r13
     842:	90 e0       	ldi	r25, 0x00	; 0
     844:	80 93 38 23 	sts	0x2338, r24	; 0x802338 <accelLinAccuracy>
     848:	90 93 39 23 	sts	0x2339, r25	; 0x802339 <accelLinAccuracy+0x1>
		rawLinAccelX = data1;
     84c:	e0 92 36 23 	sts	0x2336, r14	; 0x802336 <rawLinAccelX>
     850:	f0 92 37 23 	sts	0x2337, r15	; 0x802337 <rawLinAccelX+0x1>
		rawLinAccelY = data2;
     854:	00 93 d2 23 	sts	0x23D2, r16	; 0x8023d2 <rawLinAccelY>
     858:	10 93 d3 23 	sts	0x23D3, r17	; 0x8023d3 <rawLinAccelY+0x1>
		rawLinAccelZ = data3;
     85c:	c0 93 3c 23 	sts	0x233C, r28	; 0x80233c <rawLinAccelZ>
     860:	d0 93 3d 23 	sts	0x233D, r29	; 0x80233d <rawLinAccelZ+0x1>
	}
}
     864:	df 91       	pop	r29
     866:	cf 91       	pop	r28
     868:	1f 91       	pop	r17
     86a:	0f 91       	pop	r16
     86c:	ff 90       	pop	r15
     86e:	ef 90       	pop	r14
     870:	df 90       	pop	r13
     872:	08 95       	ret

00000874 <BNO080enableLinearAccelerometer>:

void BNO080enableLinearAccelerometer(uint16_t timeBetweenReports){
     874:	cf 93       	push	r28
     876:	df 93       	push	r29
     878:	ec 01       	movw	r28, r24
	printf("Set Linear Accelerometer! \n");
     87a:	8c eb       	ldi	r24, 0xBC	; 188
     87c:	91 e2       	ldi	r25, 0x21	; 33
     87e:	0e 94 dd 0f 	call	0x1fba	; 0x1fba <puts>
	BNO080setFeatureCommand(SENSOR_REPORTID_LINEAR_ACCELERATION, timeBetweenReports, 0);
     882:	20 e0       	ldi	r18, 0x00	; 0
     884:	30 e0       	ldi	r19, 0x00	; 0
     886:	a9 01       	movw	r20, r18
     888:	be 01       	movw	r22, r28
     88a:	84 e0       	ldi	r24, 0x04	; 4
     88c:	0e 94 a4 02 	call	0x548	; 0x548 <BNO080setFeatureCommand>
}
     890:	df 91       	pop	r29
     892:	cf 91       	pop	r28
     894:	08 95       	ret

00000896 <BNO080parseCommandReport>:

void BNO080parseCommandReport(void) {
	printf("Parse command report \n");
     896:	87 ed       	ldi	r24, 0xD7	; 215
     898:	91 e2       	ldi	r25, 0x21	; 33
     89a:	0e 94 dd 0f 	call	0x1fba	; 0x1fba <puts>
	if (shtpData[0] == SHTP_REPORT_COMMAND_RESPONSE)
     89e:	80 91 45 23 	lds	r24, 0x2345	; 0x802345 <shtpData>
     8a2:	81 3f       	cpi	r24, 0xF1	; 241
     8a4:	41 f4       	brne	.+16     	; 0x8b6 <BNO080parseCommandReport+0x20>
	{
		//The BNO080 responds with this report to command requests. It's up to use to remember which command we issued.
		uint8_t command = shtpData[2]; //This is the Command byte of the response

		if (command == COMMAND_ME_CALIBRATE)
     8a6:	80 91 47 23 	lds	r24, 0x2347	; 0x802347 <shtpData+0x2>
     8aa:	87 30       	cpi	r24, 0x07	; 7
     8ac:	21 f4       	brne	.+8      	; 0x8b6 <BNO080parseCommandReport+0x20>
		{
			calibrationStatus = shtpData[5 + 0]; //R0 - Status (0 = success, non-zero = fail)
     8ae:	80 91 4a 23 	lds	r24, 0x234A	; 0x80234a <shtpData+0x5>
     8b2:	80 93 d1 23 	sts	0x23D1, r24	; 0x8023d1 <calibrationStatus>
     8b6:	08 95       	ret

000008b8 <BNO080dataAvailable>:
		}
	}
}

bool BNO080dataAvailable(void){
     8b8:	cf 93       	push	r28
	if(!bit_is_clear(PORTA.IN, PIN1_bm))
     8ba:	80 91 08 06 	lds	r24, 0x0608	; 0x800608 <__TEXT_REGION_LENGTH__+0x700608>
     8be:	82 fd       	sbrc	r24, 2
     8c0:	1d c0       	rjmp	.+58     	; 0x8fc <BNO080dataAvailable+0x44>
		return false;
	
	if (BNO080receivePacket() == true)
     8c2:	0e 94 da 02 	call	0x5b4	; 0x5b4 <BNO080receivePacket>
     8c6:	c8 2f       	mov	r28, r24
     8c8:	88 23       	and	r24, r24
     8ca:	e9 f0       	breq	.+58     	; 0x906 <BNO080dataAvailable+0x4e>
	{
		printf("Received packet!\n");
     8cc:	8d ee       	ldi	r24, 0xED	; 237
     8ce:	91 e2       	ldi	r25, 0x21	; 33
     8d0:	0e 94 dd 0f 	call	0x1fba	; 0x1fba <puts>
		//Check to see if this packet is a sensor reporting its data to us
		if (shtpHeader[2] == CHANNEL_REPORTS && shtpData[0] == SHTP_REPORT_BASE_TIMESTAMP){
     8d4:	80 91 10 23 	lds	r24, 0x2310	; 0x802310 <shtpHeader+0x2>
     8d8:	83 30       	cpi	r24, 0x03	; 3
     8da:	59 f4       	brne	.+22     	; 0x8f2 <BNO080dataAvailable+0x3a>
     8dc:	80 91 45 23 	lds	r24, 0x2345	; 0x802345 <shtpData>
     8e0:	8b 3f       	cpi	r24, 0xFB	; 251
     8e2:	71 f4       	brne	.+28     	; 0x900 <BNO080dataAvailable+0x48>
			BNO080parseInputReport();
     8e4:	0e 94 cc 03 	call	0x798	; 0x798 <BNO080parseInputReport>
			printf("Data available!\n");
     8e8:	8e ef       	ldi	r24, 0xFE	; 254
     8ea:	91 e2       	ldi	r25, 0x21	; 33
     8ec:	0e 94 dd 0f 	call	0x1fba	; 0x1fba <puts>
			return (true);
     8f0:	0a c0       	rjmp	.+20     	; 0x906 <BNO080dataAvailable+0x4e>
		}
		else if (shtpHeader[2] == CHANNEL_CONTROL)
     8f2:	82 30       	cpi	r24, 0x02	; 2
     8f4:	39 f4       	brne	.+14     	; 0x904 <BNO080dataAvailable+0x4c>
		{
			BNO080parseCommandReport(); //This will update responses to commands, calibrationStatus, etc.
     8f6:	0e 94 4b 04 	call	0x896	; 0x896 <BNO080parseCommandReport>
			return (true);
     8fa:	05 c0       	rjmp	.+10     	; 0x906 <BNO080dataAvailable+0x4e>
	}
}

bool BNO080dataAvailable(void){
	if(!bit_is_clear(PORTA.IN, PIN1_bm))
		return false;
     8fc:	c0 e0       	ldi	r28, 0x00	; 0
     8fe:	03 c0       	rjmp	.+6      	; 0x906 <BNO080dataAvailable+0x4e>
		{
			BNO080parseCommandReport(); //This will update responses to commands, calibrationStatus, etc.
			return (true);
		}
	}
	return false;
     900:	c0 e0       	ldi	r28, 0x00	; 0
     902:	01 c0       	rjmp	.+2      	; 0x906 <BNO080dataAvailable+0x4e>
     904:	c0 e0       	ldi	r28, 0x00	; 0
}
     906:	8c 2f       	mov	r24, r28
     908:	cf 91       	pop	r28
     90a:	08 95       	ret

0000090c <qToFloat>:

float qToFloat(int16_t fixedPointValue, uint8_t qPoint)
{
     90c:	cf 92       	push	r12
     90e:	df 92       	push	r13
     910:	ef 92       	push	r14
     912:	ff 92       	push	r15
     914:	cf 93       	push	r28
     916:	c6 2f       	mov	r28, r22
	float qFloat = fixedPointValue;
     918:	bc 01       	movw	r22, r24
     91a:	99 0f       	add	r25, r25
     91c:	88 0b       	sbc	r24, r24
     91e:	99 0b       	sbc	r25, r25
     920:	0e 94 33 08 	call	0x1066	; 0x1066 <__floatsisf>
     924:	6b 01       	movw	r12, r22
     926:	7c 01       	movw	r14, r24
	qFloat *= pow(2, qPoint * -1);
     928:	6c 2f       	mov	r22, r28
     92a:	70 e0       	ldi	r23, 0x00	; 0
     92c:	71 95       	neg	r23
     92e:	61 95       	neg	r22
     930:	71 09       	sbc	r23, r1
     932:	07 2e       	mov	r0, r23
     934:	00 0c       	add	r0, r0
     936:	88 0b       	sbc	r24, r24
     938:	99 0b       	sbc	r25, r25
     93a:	0e 94 33 08 	call	0x1066	; 0x1066 <__floatsisf>
     93e:	9b 01       	movw	r18, r22
     940:	ac 01       	movw	r20, r24
     942:	60 e0       	ldi	r22, 0x00	; 0
     944:	70 e0       	ldi	r23, 0x00	; 0
     946:	80 e0       	ldi	r24, 0x00	; 0
     948:	90 e4       	ldi	r25, 0x40	; 64
     94a:	0e 94 2c 09 	call	0x1258	; 0x1258 <pow>
     94e:	9b 01       	movw	r18, r22
     950:	ac 01       	movw	r20, r24
	return (qFloat);
     952:	c7 01       	movw	r24, r14
     954:	b6 01       	movw	r22, r12
     956:	0e 94 bf 08 	call	0x117e	; 0x117e <__mulsf3>
}
     95a:	cf 91       	pop	r28
     95c:	ff 90       	pop	r15
     95e:	ef 90       	pop	r14
     960:	df 90       	pop	r13
     962:	cf 90       	pop	r12
     964:	08 95       	ret

00000966 <BNO080getLinAccelX>:
//Return the acceleration component
float BNO080getLinAccelX(void) {
	float accel = qToFloat(rawLinAccelX, linear_accelerometer_Q1);
     966:	60 91 00 20 	lds	r22, 0x2000	; 0x802000 <__DATA_REGION_ORIGIN__>
     96a:	80 91 36 23 	lds	r24, 0x2336	; 0x802336 <rawLinAccelX>
     96e:	90 91 37 23 	lds	r25, 0x2337	; 0x802337 <rawLinAccelX+0x1>
     972:	0e 94 86 04 	call	0x90c	; 0x90c <qToFloat>
	return (accel);
}
     976:	08 95       	ret

00000978 <BNO080getLinAccelY>:
//Return the acceleration component
float BNO080getLinAccelY(void)
{
	float accel = qToFloat(rawLinAccelY, linear_accelerometer_Q1);
     978:	60 91 00 20 	lds	r22, 0x2000	; 0x802000 <__DATA_REGION_ORIGIN__>
     97c:	80 91 d2 23 	lds	r24, 0x23D2	; 0x8023d2 <rawLinAccelY>
     980:	90 91 d3 23 	lds	r25, 0x23D3	; 0x8023d3 <rawLinAccelY+0x1>
     984:	0e 94 86 04 	call	0x90c	; 0x90c <qToFloat>
	return (accel);
}
     988:	08 95       	ret

0000098a <BNO080getLinAccelZ>:

//Return the acceleration component
float BNO080getLinAccelZ(void)
{
	float accel = qToFloat(rawLinAccelZ, linear_accelerometer_Q1);
     98a:	60 91 00 20 	lds	r22, 0x2000	; 0x802000 <__DATA_REGION_ORIGIN__>
     98e:	80 91 3c 23 	lds	r24, 0x233C	; 0x80233c <rawLinAccelZ>
     992:	90 91 3d 23 	lds	r25, 0x233D	; 0x80233d <rawLinAccelZ+0x1>
     996:	0e 94 86 04 	call	0x90c	; 0x90c <qToFloat>
	return (accel);
}
     99a:	08 95       	ret

0000099c <BNO080getLinAccelAccuracy>:

//Return the acceleration component
uint8_t BNO080getLinAccelAccuracy(void)
{
	return (accelLinAccuracy);
}
     99c:	80 91 38 23 	lds	r24, 0x2338	; 0x802338 <accelLinAccuracy>
     9a0:	08 95       	ret

000009a2 <CanRead_F0>:
    }
  }
  *p = '\0';

  return buf;
}
     9a2:	80 91 a7 22 	lds	r24, 0x22A7	; 0x8022a7 <rx_f0_wridx>
     9a6:	90 91 a6 22 	lds	r25, 0x22A6	; 0x8022a6 <rx_f0_rdidx>
     9aa:	89 17       	cp	r24, r25
     9ac:	10 f0       	brcs	.+4      	; 0x9b2 <CanRead_F0+0x10>
     9ae:	89 1b       	sub	r24, r25
     9b0:	08 95       	ret
     9b2:	8c 59       	subi	r24, 0x9C	; 156
     9b4:	89 1b       	sub	r24, r25
     9b6:	08 95       	ret

000009b8 <ReadByte_F0>:
     9b8:	cf 93       	push	r28
     9ba:	c0 91 a6 22 	lds	r28, 0x22A6	; 0x8022a6 <rx_f0_rdidx>
     9be:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <CanRead_F0>
     9c2:	88 23       	and	r24, r24
     9c4:	e1 f3       	breq	.-8      	; 0x9be <ReadByte_F0+0x6>
     9c6:	ec 2f       	mov	r30, r28
     9c8:	f0 e0       	ldi	r31, 0x00	; 0
     9ca:	ee 5b       	subi	r30, 0xBE	; 190
     9cc:	fd 4d       	sbci	r31, 0xDD	; 221
     9ce:	80 81       	ld	r24, Z
     9d0:	91 e0       	ldi	r25, 0x01	; 1
     9d2:	9c 0f       	add	r25, r28
     9d4:	94 36       	cpi	r25, 0x64	; 100
     9d6:	08 f0       	brcs	.+2      	; 0x9da <ReadByte_F0+0x22>
     9d8:	90 e0       	ldi	r25, 0x00	; 0
     9da:	90 93 a6 22 	sts	0x22A6, r25	; 0x8022a6 <rx_f0_rdidx>
     9de:	cf 91       	pop	r28
     9e0:	08 95       	ret

000009e2 <uartF0_fgetc>:
     9e2:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <ReadByte_F0>
     9e6:	90 e0       	ldi	r25, 0x00	; 0
     9e8:	08 95       	ret

000009ea <CanWrite_F0>:
     9ea:	20 91 0d 23 	lds	r18, 0x230D	; 0x80230d <tx_f0_wridx>
     9ee:	91 e0       	ldi	r25, 0x01	; 1
     9f0:	92 0f       	add	r25, r18
     9f2:	80 91 0c 23 	lds	r24, 0x230C	; 0x80230c <tx_f0_rdidx>
     9f6:	94 36       	cpi	r25, 0x64	; 100
     9f8:	10 f0       	brcs	.+4      	; 0x9fe <CanWrite_F0+0x14>
     9fa:	9d e9       	ldi	r25, 0x9D	; 157
     9fc:	92 0f       	add	r25, r18
     9fe:	89 17       	cp	r24, r25
     a00:	10 f0       	brcs	.+4      	; 0xa06 <CanWrite_F0+0x1c>
     a02:	89 1b       	sub	r24, r25
     a04:	08 95       	ret
     a06:	8c 59       	subi	r24, 0x9C	; 156
     a08:	89 1b       	sub	r24, r25
     a0a:	08 95       	ret

00000a0c <WriteByte_F0>:
     a0c:	0f 93       	push	r16
     a0e:	1f 93       	push	r17
     a10:	cf 93       	push	r28
     a12:	df 93       	push	r29
     a14:	d8 2f       	mov	r29, r24
     a16:	00 ea       	ldi	r16, 0xA0	; 160
     a18:	1b e0       	ldi	r17, 0x0B	; 11
     a1a:	c1 e2       	ldi	r28, 0x21	; 33
     a1c:	02 c0       	rjmp	.+4      	; 0xa22 <WriteByte_F0+0x16>
     a1e:	f8 01       	movw	r30, r16
     a20:	c3 83       	std	Z+3, r28	; 0x03
     a22:	0e 94 f5 04 	call	0x9ea	; 0x9ea <CanWrite_F0>
     a26:	88 23       	and	r24, r24
     a28:	d1 f3       	breq	.-12     	; 0xa1e <WriteByte_F0+0x12>
     a2a:	80 91 0d 23 	lds	r24, 0x230D	; 0x80230d <tx_f0_wridx>
     a2e:	e8 2f       	mov	r30, r24
     a30:	f0 e0       	ldi	r31, 0x00	; 0
     a32:	e8 55       	subi	r30, 0x58	; 88
     a34:	fd 4d       	sbci	r31, 0xDD	; 221
     a36:	d0 83       	st	Z, r29
     a38:	8f 5f       	subi	r24, 0xFF	; 255
     a3a:	84 36       	cpi	r24, 0x64	; 100
     a3c:	08 f0       	brcs	.+2      	; 0xa40 <WriteByte_F0+0x34>
     a3e:	80 e0       	ldi	r24, 0x00	; 0
     a40:	e0 ea       	ldi	r30, 0xA0	; 160
     a42:	f0 e0       	ldi	r31, 0x00	; 0
     a44:	92 81       	ldd	r25, Z+2	; 0x02
     a46:	29 2f       	mov	r18, r25
     a48:	2e 7f       	andi	r18, 0xFE	; 254
     a4a:	22 83       	std	Z+2, r18	; 0x02
     a4c:	80 93 0d 23 	sts	0x230D, r24	; 0x80230d <tx_f0_wridx>
     a50:	81 e2       	ldi	r24, 0x21	; 33
     a52:	80 93 a3 0b 	sts	0x0BA3, r24	; 0x800ba3 <__TEXT_REGION_LENGTH__+0x700ba3>
     a56:	92 83       	std	Z+2, r25	; 0x02
     a58:	df 91       	pop	r29
     a5a:	cf 91       	pop	r28
     a5c:	1f 91       	pop	r17
     a5e:	0f 91       	pop	r16
     a60:	08 95       	ret

00000a62 <uartF0_fputc>:
     a62:	cf 93       	push	r28
     a64:	df 93       	push	r29
     a66:	d8 2f       	mov	r29, r24
     a68:	cf ef       	ldi	r28, 0xFF	; 255
     a6a:	03 c0       	rjmp	.+6      	; 0xa72 <uartF0_fputc+0x10>
     a6c:	cc 23       	and	r28, r28
     a6e:	91 f0       	breq	.+36     	; 0xa94 <uartF0_fputc+0x32>
     a70:	c1 50       	subi	r28, 0x01	; 1
     a72:	0e 94 f5 04 	call	0x9ea	; 0x9ea <CanWrite_F0>
     a76:	88 23       	and	r24, r24
     a78:	c9 f3       	breq	.-14     	; 0xa6c <uartF0_fputc+0xa>
     a7a:	cc 23       	and	r28, r28
     a7c:	71 f0       	breq	.+28     	; 0xa9a <uartF0_fputc+0x38>
     a7e:	da 30       	cpi	r29, 0x0A	; 10
     a80:	19 f4       	brne	.+6      	; 0xa88 <uartF0_fputc+0x26>
     a82:	8d e0       	ldi	r24, 0x0D	; 13
     a84:	0e 94 06 05 	call	0xa0c	; 0xa0c <WriteByte_F0>
     a88:	8d 2f       	mov	r24, r29
     a8a:	0e 94 06 05 	call	0xa0c	; 0xa0c <WriteByte_F0>
     a8e:	80 e0       	ldi	r24, 0x00	; 0
     a90:	90 e0       	ldi	r25, 0x00	; 0
     a92:	05 c0       	rjmp	.+10     	; 0xa9e <uartF0_fputc+0x3c>
     a94:	81 e0       	ldi	r24, 0x01	; 1
     a96:	90 e0       	ldi	r25, 0x00	; 0
     a98:	02 c0       	rjmp	.+4      	; 0xa9e <uartF0_fputc+0x3c>
     a9a:	81 e0       	ldi	r24, 0x01	; 1
     a9c:	90 e0       	ldi	r25, 0x00	; 0
     a9e:	df 91       	pop	r29
     aa0:	cf 91       	pop	r28
     aa2:	08 95       	ret

00000aa4 <init_stream>:
 *           If you want to use another baud rate you can change it in this function.
 *
 *  \return  void
 */
void init_stream(uint32_t f_cpu)
{
     aa4:	4f 92       	push	r4
     aa6:	5f 92       	push	r5
     aa8:	6f 92       	push	r6
     aaa:	7f 92       	push	r7
     aac:	8f 92       	push	r8
     aae:	9f 92       	push	r9
     ab0:	af 92       	push	r10
     ab2:	bf 92       	push	r11
     ab4:	ef 92       	push	r14
     ab6:	ff 92       	push	r15
     ab8:	0f 93       	push	r16
     aba:	1f 93       	push	r17
     abc:	cf 93       	push	r28
     abe:	4b 01       	movw	r8, r22
     ac0:	5c 01       	movw	r10, r24
     ac2:	07 e0       	ldi	r16, 0x07	; 7
     ac4:	10 e0       	ldi	r17, 0x00	; 0
static int8_t calc_bscale(uint32_t f_cpu, uint32_t baud, uint8_t clk2x)
{
  int8_t   bscale;
  uint16_t bsel;

  for (bscale = -7; bscale<8; bscale++) {
     ac6:	c9 ef       	ldi	r28, 0xF9	; 249

  factor = factor >> (clk2x & 0x01);
  if ( scale < 0 ) {
    return round(  (((double)(f_cpu)/(factor*(double)(baud))) - 1) * (1<<-(scale))  );
  } else {
    return round(  ((double)(f_cpu)/(factor*(double)(baud))/(1<<(scale))) - 1);
     ac8:	ee 24       	eor	r14, r14
     aca:	e3 94       	inc	r14
     acc:	f1 2c       	mov	r15, r1
static uint16_t calc_bsel(uint32_t f_cpu, uint32_t baud, int8_t scale, uint8_t clk2x)
{
  uint8_t factor = 16;

  factor = factor >> (clk2x & 0x01);
  if ( scale < 0 ) {
     ace:	cc 23       	and	r28, r28
     ad0:	54 f5       	brge	.+84     	; 0xb26 <init_stream+0x82>
    return round(  (((double)(f_cpu)/(factor*(double)(baud))) - 1) * (1<<-(scale))  );
     ad2:	c5 01       	movw	r24, r10
     ad4:	b4 01       	movw	r22, r8
     ad6:	0e 94 31 08 	call	0x1062	; 0x1062 <__floatunsisf>
     ada:	20 e0       	ldi	r18, 0x00	; 0
     adc:	30 e0       	ldi	r19, 0x00	; 0
     ade:	41 ee       	ldi	r20, 0xE1	; 225
     ae0:	59 e4       	ldi	r21, 0x49	; 73
     ae2:	0e 94 90 07 	call	0xf20	; 0xf20 <__divsf3>
     ae6:	20 e0       	ldi	r18, 0x00	; 0
     ae8:	30 e0       	ldi	r19, 0x00	; 0
     aea:	40 e8       	ldi	r20, 0x80	; 128
     aec:	5f e3       	ldi	r21, 0x3F	; 63
     aee:	0e 94 23 07 	call	0xe46	; 0xe46 <__subsf3>
     af2:	2b 01       	movw	r4, r22
     af4:	3c 01       	movw	r6, r24
     af6:	b7 01       	movw	r22, r14
     af8:	00 2e       	mov	r0, r16
     afa:	02 c0       	rjmp	.+4      	; 0xb00 <init_stream+0x5c>
     afc:	66 0f       	add	r22, r22
     afe:	77 1f       	adc	r23, r23
     b00:	0a 94       	dec	r0
     b02:	e2 f7       	brpl	.-8      	; 0xafc <init_stream+0x58>
     b04:	07 2e       	mov	r0, r23
     b06:	00 0c       	add	r0, r0
     b08:	88 0b       	sbc	r24, r24
     b0a:	99 0b       	sbc	r25, r25
     b0c:	0e 94 33 08 	call	0x1066	; 0x1066 <__floatsisf>
     b10:	9b 01       	movw	r18, r22
     b12:	ac 01       	movw	r20, r24
     b14:	c3 01       	movw	r24, r6
     b16:	b2 01       	movw	r22, r4
     b18:	0e 94 bf 08 	call	0x117e	; 0x117e <__mulsf3>
     b1c:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <round>
     b20:	0e 94 02 08 	call	0x1004	; 0x1004 <__fixunssfsi>
     b24:	2c c0       	rjmp	.+88     	; 0xb7e <init_stream+0xda>
  } else {
    return round(  ((double)(f_cpu)/(factor*(double)(baud))/(1<<(scale))) - 1);
     b26:	c5 01       	movw	r24, r10
     b28:	b4 01       	movw	r22, r8
     b2a:	0e 94 31 08 	call	0x1062	; 0x1062 <__floatunsisf>
     b2e:	20 e0       	ldi	r18, 0x00	; 0
     b30:	30 e0       	ldi	r19, 0x00	; 0
     b32:	41 ee       	ldi	r20, 0xE1	; 225
     b34:	59 e4       	ldi	r21, 0x49	; 73
     b36:	0e 94 90 07 	call	0xf20	; 0xf20 <__divsf3>
     b3a:	2b 01       	movw	r4, r22
     b3c:	3c 01       	movw	r6, r24
     b3e:	88 27       	eor	r24, r24
     b40:	99 27       	eor	r25, r25
     b42:	80 1b       	sub	r24, r16
     b44:	91 0b       	sbc	r25, r17
     b46:	b7 01       	movw	r22, r14
     b48:	02 c0       	rjmp	.+4      	; 0xb4e <init_stream+0xaa>
     b4a:	66 0f       	add	r22, r22
     b4c:	77 1f       	adc	r23, r23
     b4e:	8a 95       	dec	r24
     b50:	e2 f7       	brpl	.-8      	; 0xb4a <init_stream+0xa6>
     b52:	07 2e       	mov	r0, r23
     b54:	00 0c       	add	r0, r0
     b56:	88 0b       	sbc	r24, r24
     b58:	99 0b       	sbc	r25, r25
     b5a:	0e 94 33 08 	call	0x1066	; 0x1066 <__floatsisf>
     b5e:	9b 01       	movw	r18, r22
     b60:	ac 01       	movw	r20, r24
     b62:	c3 01       	movw	r24, r6
     b64:	b2 01       	movw	r22, r4
     b66:	0e 94 90 07 	call	0xf20	; 0xf20 <__divsf3>
     b6a:	20 e0       	ldi	r18, 0x00	; 0
     b6c:	30 e0       	ldi	r19, 0x00	; 0
     b6e:	40 e8       	ldi	r20, 0x80	; 128
     b70:	5f e3       	ldi	r21, 0x3F	; 63
     b72:	0e 94 23 07 	call	0xe46	; 0xe46 <__subsf3>
     b76:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <round>
     b7a:	0e 94 02 08 	call	0x1004	; 0x1004 <__fixunssfsi>
{
  int8_t   bscale;
  uint16_t bsel;

  for (bscale = -7; bscale<8; bscale++) {
    if ( (bsel = calc_bsel(f_cpu, baud, bscale, clk2x)) < 4096 ) return bscale;
     b7e:	61 15       	cp	r22, r1
     b80:	70 41       	sbci	r23, 0x10	; 16
     b82:	38 f0       	brcs	.+14     	; 0xb92 <init_stream+0xee>
     b84:	cf 5f       	subi	r28, 0xFF	; 255
     b86:	01 50       	subi	r16, 0x01	; 1
     b88:	11 09       	sbc	r17, r1
static int8_t calc_bscale(uint32_t f_cpu, uint32_t baud, uint8_t clk2x)
{
  int8_t   bscale;
  uint16_t bsel;

  for (bscale = -7; bscale<8; bscale++) {
     b8a:	c8 30       	cpi	r28, 0x08	; 8
     b8c:	09 f0       	breq	.+2      	; 0xb90 <init_stream+0xec>
     b8e:	9f cf       	rjmp	.-194    	; 0xace <init_stream+0x2a>
     b90:	31 c0       	rjmp	.+98     	; 0xbf4 <init_stream+0x150>
static uint16_t calc_bsel(uint32_t f_cpu, uint32_t baud, int8_t scale, uint8_t clk2x)
{
  uint8_t factor = 16;

  factor = factor >> (clk2x & 0x01);
  if ( scale < 0 ) {
     b92:	cc 23       	and	r28, r28
     b94:	7c f5       	brge	.+94     	; 0xbf4 <init_stream+0x150>
    return round(  (((double)(f_cpu)/(factor*(double)(baud))) - 1) * (1<<-(scale))  );
     b96:	c5 01       	movw	r24, r10
     b98:	b4 01       	movw	r22, r8
     b9a:	0e 94 31 08 	call	0x1062	; 0x1062 <__floatunsisf>
     b9e:	20 e0       	ldi	r18, 0x00	; 0
     ba0:	30 e0       	ldi	r19, 0x00	; 0
     ba2:	41 ee       	ldi	r20, 0xE1	; 225
     ba4:	59 e4       	ldi	r21, 0x49	; 73
     ba6:	0e 94 90 07 	call	0xf20	; 0xf20 <__divsf3>
     baa:	20 e0       	ldi	r18, 0x00	; 0
     bac:	30 e0       	ldi	r19, 0x00	; 0
     bae:	40 e8       	ldi	r20, 0x80	; 128
     bb0:	5f e3       	ldi	r21, 0x3F	; 63
     bb2:	0e 94 23 07 	call	0xe46	; 0xe46 <__subsf3>
     bb6:	4b 01       	movw	r8, r22
     bb8:	5c 01       	movw	r10, r24
     bba:	2c 2f       	mov	r18, r28
     bbc:	33 27       	eor	r19, r19
     bbe:	21 95       	neg	r18
     bc0:	0c f4       	brge	.+2      	; 0xbc4 <init_stream+0x120>
     bc2:	30 95       	com	r19
     bc4:	61 e0       	ldi	r22, 0x01	; 1
     bc6:	70 e0       	ldi	r23, 0x00	; 0
     bc8:	02 c0       	rjmp	.+4      	; 0xbce <init_stream+0x12a>
     bca:	66 0f       	add	r22, r22
     bcc:	77 1f       	adc	r23, r23
     bce:	2a 95       	dec	r18
     bd0:	e2 f7       	brpl	.-8      	; 0xbca <init_stream+0x126>
     bd2:	07 2e       	mov	r0, r23
     bd4:	00 0c       	add	r0, r0
     bd6:	88 0b       	sbc	r24, r24
     bd8:	99 0b       	sbc	r25, r25
     bda:	0e 94 33 08 	call	0x1066	; 0x1066 <__floatsisf>
     bde:	9b 01       	movw	r18, r22
     be0:	ac 01       	movw	r20, r24
     be2:	c5 01       	movw	r24, r10
     be4:	b4 01       	movw	r22, r8
     be6:	0e 94 bf 08 	call	0x117e	; 0x117e <__mulsf3>
     bea:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <round>
     bee:	0e 94 02 08 	call	0x1004	; 0x1004 <__fixunssfsi>
     bf2:	2a c0       	rjmp	.+84     	; 0xc48 <init_stream+0x1a4>
  } else {
    return round(  ((double)(f_cpu)/(factor*(double)(baud))/(1<<(scale))) - 1);
     bf4:	c5 01       	movw	r24, r10
     bf6:	b4 01       	movw	r22, r8
     bf8:	0e 94 31 08 	call	0x1062	; 0x1062 <__floatunsisf>
     bfc:	20 e0       	ldi	r18, 0x00	; 0
     bfe:	30 e0       	ldi	r19, 0x00	; 0
     c00:	41 ee       	ldi	r20, 0xE1	; 225
     c02:	59 e4       	ldi	r21, 0x49	; 73
     c04:	0e 94 90 07 	call	0xf20	; 0xf20 <__divsf3>
     c08:	4b 01       	movw	r8, r22
     c0a:	5c 01       	movw	r10, r24
     c0c:	61 e0       	ldi	r22, 0x01	; 1
     c0e:	70 e0       	ldi	r23, 0x00	; 0
     c10:	0c 2e       	mov	r0, r28
     c12:	02 c0       	rjmp	.+4      	; 0xc18 <init_stream+0x174>
     c14:	66 0f       	add	r22, r22
     c16:	77 1f       	adc	r23, r23
     c18:	0a 94       	dec	r0
     c1a:	e2 f7       	brpl	.-8      	; 0xc14 <init_stream+0x170>
     c1c:	07 2e       	mov	r0, r23
     c1e:	00 0c       	add	r0, r0
     c20:	88 0b       	sbc	r24, r24
     c22:	99 0b       	sbc	r25, r25
     c24:	0e 94 33 08 	call	0x1066	; 0x1066 <__floatsisf>
     c28:	9b 01       	movw	r18, r22
     c2a:	ac 01       	movw	r20, r24
     c2c:	c5 01       	movw	r24, r10
     c2e:	b4 01       	movw	r22, r8
     c30:	0e 94 90 07 	call	0xf20	; 0xf20 <__divsf3>
     c34:	20 e0       	ldi	r18, 0x00	; 0
     c36:	30 e0       	ldi	r19, 0x00	; 0
     c38:	40 e8       	ldi	r20, 0x80	; 128
     c3a:	5f e3       	ldi	r21, 0x3F	; 63
     c3c:	0e 94 23 07 	call	0xe46	; 0xe46 <__subsf3>
     c40:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <round>
     c44:	0e 94 02 08 	call	0x1004	; 0x1004 <__fixunssfsi>
  int8_t bscale;

  bscale = calc_bscale(f_cpu, BAUD_115K2, UART_NO_DOUBLE_CLK);
  bsel   = calc_bsel(f_cpu, BAUD_115K2, bscale, UART_NO_DOUBLE_CLK);

	PORTF.PIN2CTRL = PORT_OPC_PULLUP_gc;  // pullup on rx
     c48:	e0 ea       	ldi	r30, 0xA0	; 160
     c4a:	f6 e0       	ldi	r31, 0x06	; 6
     c4c:	88 e1       	ldi	r24, 0x18	; 24
     c4e:	82 8b       	std	Z+18, r24	; 0x12
	PORTF.OUTSET = PIN3_bm;               // tx high
     c50:	98 e0       	ldi	r25, 0x08	; 8
     c52:	95 83       	std	Z+5, r25	; 0x05
	PORTF.DIRSET = PIN3_bm;
     c54:	91 83       	std	Z+1, r25	; 0x01
	PORTF.DIRCLR = PIN2_bm;
     c56:	94 e0       	ldi	r25, 0x04	; 4
     c58:	92 83       	std	Z+2, r25	; 0x02

	USARTF0.BAUDCTRLA = (bsel & USART_BSEL_gm);
     c5a:	e0 ea       	ldi	r30, 0xA0	; 160
     c5c:	fb e0       	ldi	r31, 0x0B	; 11
     c5e:	66 83       	std	Z+6, r22	; 0x06
	USARTF0.BAUDCTRLB = ((bscale << USART_BSCALE_gp) & USART_BSCALE_gm) |
     c60:	7f 70       	andi	r23, 0x0F	; 15
     c62:	c2 95       	swap	r28
     c64:	c0 7f       	andi	r28, 0xF0	; 240
     c66:	c7 2b       	or	r28, r23
     c68:	c7 83       	std	Z+7, r28	; 0x07
                      ((bsel >> 8) & ~USART_BSCALE_gm);
	
 	USARTF0.CTRLB = USART_RXEN_bm | USART_TXEN_bm;
     c6a:	84 83       	std	Z+4, r24	; 0x04

	USARTF0.CTRLA = USART_RXCINTLVL_MED_gc | 
     c6c:	80 e2       	ldi	r24, 0x20	; 32
     c6e:	83 83       	std	Z+3, r24	; 0x03
                  USART_TXCINTLVL_OFF_gc | USART_DREINTLVL_OFF_gc;
	
	PMIC.CTRL |= PMIC_MEDLVLEN_bm | PMIC_LOLVLEN_bm;
     c70:	e0 ea       	ldi	r30, 0xA0	; 160
     c72:	f0 e0       	ldi	r31, 0x00	; 0
     c74:	82 81       	ldd	r24, Z+2	; 0x02
     c76:	83 60       	ori	r24, 0x03	; 3
     c78:	82 83       	std	Z+2, r24	; 0x02
  stdout = stdin = &uartF0_stdinout;
     c7a:	e8 ed       	ldi	r30, 0xD8	; 216
     c7c:	f3 e2       	ldi	r31, 0x23	; 35
     c7e:	82 e0       	ldi	r24, 0x02	; 2
     c80:	90 e2       	ldi	r25, 0x20	; 32
     c82:	80 83       	st	Z, r24
     c84:	91 83       	std	Z+1, r25	; 0x01
     c86:	82 83       	std	Z+2, r24	; 0x02
     c88:	93 83       	std	Z+3, r25	; 0x03
	
} // init_stream
     c8a:	cf 91       	pop	r28
     c8c:	1f 91       	pop	r17
     c8e:	0f 91       	pop	r16
     c90:	ff 90       	pop	r15
     c92:	ef 90       	pop	r14
     c94:	bf 90       	pop	r11
     c96:	af 90       	pop	r10
     c98:	9f 90       	pop	r9
     c9a:	8f 90       	pop	r8
     c9c:	7f 90       	pop	r7
     c9e:	6f 90       	pop	r6
     ca0:	5f 90       	pop	r5
     ca2:	4f 90       	pop	r4
     ca4:	08 95       	ret

00000ca6 <__vector_119>:
} // WriteByte_F0 

/*  \brief  ISR for receiving bytes from UARTF0.
 *          It puts the received byte in the RX buffer
 */
ISR(USARTF0_RXC_vect) {
     ca6:	1f 92       	push	r1
     ca8:	0f 92       	push	r0
     caa:	0f b6       	in	r0, 0x3f	; 63
     cac:	0f 92       	push	r0
     cae:	11 24       	eor	r1, r1
     cb0:	0b b6       	in	r0, 0x3b	; 59
     cb2:	0f 92       	push	r0
     cb4:	8f 93       	push	r24
     cb6:	9f 93       	push	r25
     cb8:	ef 93       	push	r30
     cba:	ff 93       	push	r31
	
	uint8_t curSlot, nextSlot;
	
	curSlot = rx_f0_wridx;
     cbc:	80 91 a7 22 	lds	r24, 0x22A7	; 0x8022a7 <rx_f0_wridx>
	rx_f0_buf[curSlot] = USARTF0.DATA;
     cc0:	e8 2f       	mov	r30, r24
     cc2:	f0 e0       	ldi	r31, 0x00	; 0
     cc4:	90 91 a0 0b 	lds	r25, 0x0BA0	; 0x800ba0 <__TEXT_REGION_LENGTH__+0x700ba0>
     cc8:	ee 5b       	subi	r30, 0xBE	; 190
     cca:	fd 4d       	sbci	r31, 0xDD	; 221
     ccc:	90 83       	st	Z, r25
	
	nextSlot = curSlot + 1;
     cce:	8f 5f       	subi	r24, 0xFF	; 255
	if(nextSlot >= RXBUF_DEPTH_F0)
     cd0:	84 36       	cpi	r24, 0x64	; 100
     cd2:	08 f0       	brcs	.+2      	; 0xcd6 <__vector_119+0x30>
	nextSlot = 0;
     cd4:	80 e0       	ldi	r24, 0x00	; 0
	
	if(nextSlot != rx_f0_rdidx)
     cd6:	90 91 a6 22 	lds	r25, 0x22A6	; 0x8022a6 <rx_f0_rdidx>
     cda:	89 13       	cpse	r24, r25
	rx_f0_wridx = nextSlot;
     cdc:	80 93 a7 22 	sts	0x22A7, r24	; 0x8022a7 <rx_f0_wridx>
	
} // ISR(USARTF0_RXC_vect)
     ce0:	ff 91       	pop	r31
     ce2:	ef 91       	pop	r30
     ce4:	9f 91       	pop	r25
     ce6:	8f 91       	pop	r24
     ce8:	0f 90       	pop	r0
     cea:	0b be       	out	0x3b, r0	; 59
     cec:	0f 90       	pop	r0
     cee:	0f be       	out	0x3f, r0	; 63
     cf0:	0f 90       	pop	r0
     cf2:	1f 90       	pop	r1
     cf4:	18 95       	reti

00000cf6 <__vector_120>:


/*  \brief  ISR for transmitting bytes to UARTF0.
 *          If there is a byte to send in the TX buffer, it will be send
 */
ISR(USARTF0_DRE_vect) {
     cf6:	1f 92       	push	r1
     cf8:	0f 92       	push	r0
     cfa:	0f b6       	in	r0, 0x3f	; 63
     cfc:	0f 92       	push	r0
     cfe:	11 24       	eor	r1, r1
     d00:	0b b6       	in	r0, 0x3b	; 59
     d02:	0f 92       	push	r0
     d04:	2f 93       	push	r18
     d06:	8f 93       	push	r24
     d08:	9f 93       	push	r25
     d0a:	ef 93       	push	r30
     d0c:	ff 93       	push	r31
	
	uint8_t curSlot, nextSlot, lastSlot;
	
	nextSlot = curSlot = tx_f0_rdidx;
     d0e:	80 91 0c 23 	lds	r24, 0x230C	; 0x80230c <tx_f0_rdidx>
	lastSlot = tx_f0_wridx;
     d12:	90 91 0d 23 	lds	r25, 0x230D	; 0x80230d <tx_f0_wridx>
	
	if(curSlot != lastSlot) {
     d16:	89 17       	cp	r24, r25
     d18:	69 f0       	breq	.+26     	; 0xd34 <__vector_120+0x3e>
		USARTF0.DATA = tx_f0_buf[curSlot];
     d1a:	e8 2f       	mov	r30, r24
     d1c:	f0 e0       	ldi	r31, 0x00	; 0
     d1e:	e8 55       	subi	r30, 0x58	; 88
     d20:	fd 4d       	sbci	r31, 0xDD	; 221
     d22:	20 81       	ld	r18, Z
     d24:	20 93 a0 0b 	sts	0x0BA0, r18	; 0x800ba0 <__TEXT_REGION_LENGTH__+0x700ba0>
		nextSlot = curSlot + 1;
     d28:	8f 5f       	subi	r24, 0xFF	; 255
		if(nextSlot >= TXBUF_DEPTH_F0)
     d2a:	84 36       	cpi	r24, 0x64	; 100
     d2c:	08 f0       	brcs	.+2      	; 0xd30 <__vector_120+0x3a>
		nextSlot = 0;
     d2e:	80 e0       	ldi	r24, 0x00	; 0
	}
	if(nextSlot == lastSlot)
     d30:	89 13       	cpse	r24, r25
     d32:	04 c0       	rjmp	.+8      	; 0xd3c <__vector_120+0x46>
	USARTF0.CTRLA = USART_RXCINTLVL_MED_gc | USART_TXCINTLVL_OFF_gc | USART_DREINTLVL_OFF_gc;
     d34:	80 e2       	ldi	r24, 0x20	; 32
     d36:	80 93 a3 0b 	sts	0x0BA3, r24	; 0x800ba3 <__TEXT_REGION_LENGTH__+0x700ba3>
     d3a:	89 2f       	mov	r24, r25
	
	tx_f0_rdidx = nextSlot;
     d3c:	80 93 0c 23 	sts	0x230C, r24	; 0x80230c <tx_f0_rdidx>
	
} // ISR(USARTF0_DRE_vect) 
     d40:	ff 91       	pop	r31
     d42:	ef 91       	pop	r30
     d44:	9f 91       	pop	r25
     d46:	8f 91       	pop	r24
     d48:	2f 91       	pop	r18
     d4a:	0f 90       	pop	r0
     d4c:	0b be       	out	0x3b, r0	; 59
     d4e:	0f 90       	pop	r0
     d50:	0f be       	out	0x3f, r0	; 63
     d52:	0f 90       	pop	r0
     d54:	1f 90       	pop	r1
     d56:	18 95       	reti

00000d58 <spi_init>:
#include <avr/io.h>
#include "spi.h"

void spi_init(void)
{
	PORTD.DIRSET  =  SPI_SCK_bm|SPI_MOSI_bm|SPI_SS_bm;
     d58:	e0 e6       	ldi	r30, 0x60	; 96
     d5a:	f6 e0       	ldi	r31, 0x06	; 6
     d5c:	80 eb       	ldi	r24, 0xB0	; 176
     d5e:	81 83       	std	Z+1, r24	; 0x01
	PORTD.DIRCLR  =  SPI_MISO_bm;
     d60:	80 e4       	ldi	r24, 0x40	; 64
     d62:	82 83       	std	Z+2, r24	; 0x02
	PORTD.PIN6CTRL	= PORT_OPC_PULLDOWN_gc;
     d64:	80 e1       	ldi	r24, 0x10	; 16
     d66:	86 8b       	std	Z+22, r24	; 0x16
	PORTD.OUTSET  =  SPI_SS_bm;
     d68:	85 83       	std	Z+5, r24	; 0x05
	SPID.CTRL     =  SPI_ENABLE_bm |         // enable SPI
     d6a:	8c e5       	ldi	r24, 0x5C	; 92
     d6c:	80 93 c0 09 	sts	0x09C0, r24	; 0x8009c0 <__TEXT_REGION_LENGTH__+0x7009c0>
     d70:	08 95       	ret

00000d72 <spi_transfer>:
	SPI_PRESCALER_DIV4_gc;  // prescaling 4
}

uint8_t spi_transfer(uint8_t data)
{
	SPID.DATA = data;
     d72:	80 93 c3 09 	sts	0x09C3, r24	; 0x8009c3 <__TEXT_REGION_LENGTH__+0x7009c3>
	while(!(SPID.STATUS & (SPI_IF_bm)));
     d76:	e0 ec       	ldi	r30, 0xC0	; 192
     d78:	f9 e0       	ldi	r31, 0x09	; 9
     d7a:	82 81       	ldd	r24, Z+2	; 0x02
     d7c:	88 23       	and	r24, r24
     d7e:	ec f7       	brge	.-6      	; 0xd7a <spi_transfer+0x8>

	return SPID.DATA;
     d80:	80 91 c3 09 	lds	r24, 0x09C3	; 0x8009c3 <__TEXT_REGION_LENGTH__+0x7009c3>
}
     d84:	08 95       	ret

00000d86 <main>:
 *
 *  The variable, 'success', will be non-zero when the function reaches the
 *  infinite for-loop if the test was successful.
 */ 
int main(void)
{
     d86:	6f 92       	push	r6
     d88:	7f 92       	push	r7
     d8a:	8f 92       	push	r8
     d8c:	9f 92       	push	r9
     d8e:	af 92       	push	r10
     d90:	bf 92       	push	r11
     d92:	cf 92       	push	r12
     d94:	df 92       	push	r13
     d96:	ef 92       	push	r14
     d98:	ff 92       	push	r15
     d9a:	0f 93       	push	r16
     d9c:	1f 93       	push	r17
     d9e:	cf 93       	push	r28
     da0:	df 93       	push	r29
	float x = 0;
	float y = 0;
	float z = 0;
	uint8_t linAccuracy = 0;
	/* Instantiate pointer to ssPort. */
	init_stream(F_CPU);
     da2:	60 e8       	ldi	r22, 0x80	; 128
     da4:	74 e8       	ldi	r23, 0x84	; 132
     da6:	8e e1       	ldi	r24, 0x1E	; 30
     da8:	90 e0       	ldi	r25, 0x00	; 0
     daa:	0e 94 52 05 	call	0xaa4	; 0xaa4 <init_stream>
	sei();
     dae:	78 94       	sei
	if(!initBNO080()) return 0;
     db0:	0e 94 c4 03 	call	0x788	; 0x788 <initBNO080>
     db4:	88 23       	and	r24, r24
     db6:	b1 f1       	breq	.+108    	; 0xe24 <main+0x9e>
	
	BNO080enableLinearAccelerometer(1000);
     db8:	88 ee       	ldi	r24, 0xE8	; 232
     dba:	93 e0       	ldi	r25, 0x03	; 3
     dbc:	0e 94 3a 04 	call	0x874	; 0x874 <BNO080enableLinearAccelerometer>
		{
			x = BNO080getLinAccelX();
			y = BNO080getLinAccelY();
			z = BNO080getLinAccelZ();
			linAccuracy = BNO080getLinAccelAccuracy();
			printf("x: %0.2f, y: %0.2f, z: %0.2f, accuratie: %d \n", x, y, z, linAccuracy);
     dc0:	ce e0       	ldi	r28, 0x0E	; 14
     dc2:	d2 e2       	ldi	r29, 0x22	; 34
	sei();
	if(!initBNO080()) return 0;
	
	BNO080enableLinearAccelerometer(1000);
	while(1) {
		if (BNO080dataAvailable())
     dc4:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <BNO080dataAvailable>
     dc8:	88 23       	and	r24, r24
     dca:	e1 f3       	breq	.-8      	; 0xdc4 <main+0x3e>
		{
			x = BNO080getLinAccelX();
     dcc:	0e 94 b3 04 	call	0x966	; 0x966 <BNO080getLinAccelX>
     dd0:	16 2f       	mov	r17, r22
     dd2:	07 2f       	mov	r16, r23
     dd4:	f8 2e       	mov	r15, r24
     dd6:	e9 2e       	mov	r14, r25
			y = BNO080getLinAccelY();
     dd8:	0e 94 bc 04 	call	0x978	; 0x978 <BNO080getLinAccelY>
     ddc:	d6 2e       	mov	r13, r22
     dde:	c7 2e       	mov	r12, r23
     de0:	b8 2e       	mov	r11, r24
     de2:	a9 2e       	mov	r10, r25
			z = BNO080getLinAccelZ();
     de4:	0e 94 c5 04 	call	0x98a	; 0x98a <BNO080getLinAccelZ>
     de8:	96 2e       	mov	r9, r22
     dea:	87 2e       	mov	r8, r23
     dec:	78 2e       	mov	r7, r24
     dee:	69 2e       	mov	r6, r25
			linAccuracy = BNO080getLinAccelAccuracy();
     df0:	0e 94 ce 04 	call	0x99c	; 0x99c <BNO080getLinAccelAccuracy>
			printf("x: %0.2f, y: %0.2f, z: %0.2f, accuratie: %d \n", x, y, z, linAccuracy);
     df4:	1f 92       	push	r1
     df6:	8f 93       	push	r24
     df8:	6f 92       	push	r6
     dfa:	7f 92       	push	r7
     dfc:	8f 92       	push	r8
     dfe:	9f 92       	push	r9
     e00:	af 92       	push	r10
     e02:	bf 92       	push	r11
     e04:	cf 92       	push	r12
     e06:	df 92       	push	r13
     e08:	ef 92       	push	r14
     e0a:	ff 92       	push	r15
     e0c:	0f 93       	push	r16
     e0e:	1f 93       	push	r17
     e10:	df 93       	push	r29
     e12:	cf 93       	push	r28
     e14:	0e 94 c9 0f 	call	0x1f92	; 0x1f92 <printf>
     e18:	8d b7       	in	r24, 0x3d	; 61
     e1a:	9e b7       	in	r25, 0x3e	; 62
     e1c:	40 96       	adiw	r24, 0x10	; 16
     e1e:	8d bf       	out	0x3d, r24	; 61
     e20:	9e bf       	out	0x3e, r25	; 62
     e22:	d0 cf       	rjmp	.-96     	; 0xdc4 <main+0x3e>
			
		}	
	} 
}
     e24:	80 e0       	ldi	r24, 0x00	; 0
     e26:	90 e0       	ldi	r25, 0x00	; 0
     e28:	df 91       	pop	r29
     e2a:	cf 91       	pop	r28
     e2c:	1f 91       	pop	r17
     e2e:	0f 91       	pop	r16
     e30:	ff 90       	pop	r15
     e32:	ef 90       	pop	r14
     e34:	df 90       	pop	r13
     e36:	cf 90       	pop	r12
     e38:	bf 90       	pop	r11
     e3a:	af 90       	pop	r10
     e3c:	9f 90       	pop	r9
     e3e:	8f 90       	pop	r8
     e40:	7f 90       	pop	r7
     e42:	6f 90       	pop	r6
     e44:	08 95       	ret

00000e46 <__subsf3>:
     e46:	50 58       	subi	r21, 0x80	; 128

00000e48 <__addsf3>:
     e48:	bb 27       	eor	r27, r27
     e4a:	aa 27       	eor	r26, r26
     e4c:	0e 94 3b 07 	call	0xe76	; 0xe76 <__addsf3x>
     e50:	0c 94 85 08 	jmp	0x110a	; 0x110a <__fp_round>
     e54:	0e 94 77 08 	call	0x10ee	; 0x10ee <__fp_pscA>
     e58:	38 f0       	brcs	.+14     	; 0xe68 <__addsf3+0x20>
     e5a:	0e 94 7e 08 	call	0x10fc	; 0x10fc <__fp_pscB>
     e5e:	20 f0       	brcs	.+8      	; 0xe68 <__addsf3+0x20>
     e60:	39 f4       	brne	.+14     	; 0xe70 <__addsf3+0x28>
     e62:	9f 3f       	cpi	r25, 0xFF	; 255
     e64:	19 f4       	brne	.+6      	; 0xe6c <__addsf3+0x24>
     e66:	26 f4       	brtc	.+8      	; 0xe70 <__addsf3+0x28>
     e68:	0c 94 74 08 	jmp	0x10e8	; 0x10e8 <__fp_nan>
     e6c:	0e f4       	brtc	.+2      	; 0xe70 <__addsf3+0x28>
     e6e:	e0 95       	com	r30
     e70:	e7 fb       	bst	r30, 7
     e72:	0c 94 6e 08 	jmp	0x10dc	; 0x10dc <__fp_inf>

00000e76 <__addsf3x>:
     e76:	e9 2f       	mov	r30, r25
     e78:	0e 94 96 08 	call	0x112c	; 0x112c <__fp_split3>
     e7c:	58 f3       	brcs	.-42     	; 0xe54 <__addsf3+0xc>
     e7e:	ba 17       	cp	r27, r26
     e80:	62 07       	cpc	r22, r18
     e82:	73 07       	cpc	r23, r19
     e84:	84 07       	cpc	r24, r20
     e86:	95 07       	cpc	r25, r21
     e88:	20 f0       	brcs	.+8      	; 0xe92 <__addsf3x+0x1c>
     e8a:	79 f4       	brne	.+30     	; 0xeaa <__addsf3x+0x34>
     e8c:	a6 f5       	brtc	.+104    	; 0xef6 <__addsf3x+0x80>
     e8e:	0c 94 b8 08 	jmp	0x1170	; 0x1170 <__fp_zero>
     e92:	0e f4       	brtc	.+2      	; 0xe96 <__addsf3x+0x20>
     e94:	e0 95       	com	r30
     e96:	0b 2e       	mov	r0, r27
     e98:	ba 2f       	mov	r27, r26
     e9a:	a0 2d       	mov	r26, r0
     e9c:	0b 01       	movw	r0, r22
     e9e:	b9 01       	movw	r22, r18
     ea0:	90 01       	movw	r18, r0
     ea2:	0c 01       	movw	r0, r24
     ea4:	ca 01       	movw	r24, r20
     ea6:	a0 01       	movw	r20, r0
     ea8:	11 24       	eor	r1, r1
     eaa:	ff 27       	eor	r31, r31
     eac:	59 1b       	sub	r21, r25
     eae:	99 f0       	breq	.+38     	; 0xed6 <__addsf3x+0x60>
     eb0:	59 3f       	cpi	r21, 0xF9	; 249
     eb2:	50 f4       	brcc	.+20     	; 0xec8 <__addsf3x+0x52>
     eb4:	50 3e       	cpi	r21, 0xE0	; 224
     eb6:	68 f1       	brcs	.+90     	; 0xf12 <__addsf3x+0x9c>
     eb8:	1a 16       	cp	r1, r26
     eba:	f0 40       	sbci	r31, 0x00	; 0
     ebc:	a2 2f       	mov	r26, r18
     ebe:	23 2f       	mov	r18, r19
     ec0:	34 2f       	mov	r19, r20
     ec2:	44 27       	eor	r20, r20
     ec4:	58 5f       	subi	r21, 0xF8	; 248
     ec6:	f3 cf       	rjmp	.-26     	; 0xeae <__addsf3x+0x38>
     ec8:	46 95       	lsr	r20
     eca:	37 95       	ror	r19
     ecc:	27 95       	ror	r18
     ece:	a7 95       	ror	r26
     ed0:	f0 40       	sbci	r31, 0x00	; 0
     ed2:	53 95       	inc	r21
     ed4:	c9 f7       	brne	.-14     	; 0xec8 <__addsf3x+0x52>
     ed6:	7e f4       	brtc	.+30     	; 0xef6 <__addsf3x+0x80>
     ed8:	1f 16       	cp	r1, r31
     eda:	ba 0b       	sbc	r27, r26
     edc:	62 0b       	sbc	r22, r18
     ede:	73 0b       	sbc	r23, r19
     ee0:	84 0b       	sbc	r24, r20
     ee2:	ba f0       	brmi	.+46     	; 0xf12 <__addsf3x+0x9c>
     ee4:	91 50       	subi	r25, 0x01	; 1
     ee6:	a1 f0       	breq	.+40     	; 0xf10 <__addsf3x+0x9a>
     ee8:	ff 0f       	add	r31, r31
     eea:	bb 1f       	adc	r27, r27
     eec:	66 1f       	adc	r22, r22
     eee:	77 1f       	adc	r23, r23
     ef0:	88 1f       	adc	r24, r24
     ef2:	c2 f7       	brpl	.-16     	; 0xee4 <__addsf3x+0x6e>
     ef4:	0e c0       	rjmp	.+28     	; 0xf12 <__addsf3x+0x9c>
     ef6:	ba 0f       	add	r27, r26
     ef8:	62 1f       	adc	r22, r18
     efa:	73 1f       	adc	r23, r19
     efc:	84 1f       	adc	r24, r20
     efe:	48 f4       	brcc	.+18     	; 0xf12 <__addsf3x+0x9c>
     f00:	87 95       	ror	r24
     f02:	77 95       	ror	r23
     f04:	67 95       	ror	r22
     f06:	b7 95       	ror	r27
     f08:	f7 95       	ror	r31
     f0a:	9e 3f       	cpi	r25, 0xFE	; 254
     f0c:	08 f0       	brcs	.+2      	; 0xf10 <__addsf3x+0x9a>
     f0e:	b0 cf       	rjmp	.-160    	; 0xe70 <__addsf3+0x28>
     f10:	93 95       	inc	r25
     f12:	88 0f       	add	r24, r24
     f14:	08 f0       	brcs	.+2      	; 0xf18 <__addsf3x+0xa2>
     f16:	99 27       	eor	r25, r25
     f18:	ee 0f       	add	r30, r30
     f1a:	97 95       	ror	r25
     f1c:	87 95       	ror	r24
     f1e:	08 95       	ret

00000f20 <__divsf3>:
     f20:	0e 94 a4 07 	call	0xf48	; 0xf48 <__divsf3x>
     f24:	0c 94 85 08 	jmp	0x110a	; 0x110a <__fp_round>
     f28:	0e 94 7e 08 	call	0x10fc	; 0x10fc <__fp_pscB>
     f2c:	58 f0       	brcs	.+22     	; 0xf44 <__divsf3+0x24>
     f2e:	0e 94 77 08 	call	0x10ee	; 0x10ee <__fp_pscA>
     f32:	40 f0       	brcs	.+16     	; 0xf44 <__divsf3+0x24>
     f34:	29 f4       	brne	.+10     	; 0xf40 <__divsf3+0x20>
     f36:	5f 3f       	cpi	r21, 0xFF	; 255
     f38:	29 f0       	breq	.+10     	; 0xf44 <__divsf3+0x24>
     f3a:	0c 94 6e 08 	jmp	0x10dc	; 0x10dc <__fp_inf>
     f3e:	51 11       	cpse	r21, r1
     f40:	0c 94 b9 08 	jmp	0x1172	; 0x1172 <__fp_szero>
     f44:	0c 94 74 08 	jmp	0x10e8	; 0x10e8 <__fp_nan>

00000f48 <__divsf3x>:
     f48:	0e 94 96 08 	call	0x112c	; 0x112c <__fp_split3>
     f4c:	68 f3       	brcs	.-38     	; 0xf28 <__divsf3+0x8>

00000f4e <__divsf3_pse>:
     f4e:	99 23       	and	r25, r25
     f50:	b1 f3       	breq	.-20     	; 0xf3e <__divsf3+0x1e>
     f52:	55 23       	and	r21, r21
     f54:	91 f3       	breq	.-28     	; 0xf3a <__divsf3+0x1a>
     f56:	95 1b       	sub	r25, r21
     f58:	55 0b       	sbc	r21, r21
     f5a:	bb 27       	eor	r27, r27
     f5c:	aa 27       	eor	r26, r26
     f5e:	62 17       	cp	r22, r18
     f60:	73 07       	cpc	r23, r19
     f62:	84 07       	cpc	r24, r20
     f64:	38 f0       	brcs	.+14     	; 0xf74 <__divsf3_pse+0x26>
     f66:	9f 5f       	subi	r25, 0xFF	; 255
     f68:	5f 4f       	sbci	r21, 0xFF	; 255
     f6a:	22 0f       	add	r18, r18
     f6c:	33 1f       	adc	r19, r19
     f6e:	44 1f       	adc	r20, r20
     f70:	aa 1f       	adc	r26, r26
     f72:	a9 f3       	breq	.-22     	; 0xf5e <__divsf3_pse+0x10>
     f74:	35 d0       	rcall	.+106    	; 0xfe0 <__divsf3_pse+0x92>
     f76:	0e 2e       	mov	r0, r30
     f78:	3a f0       	brmi	.+14     	; 0xf88 <__divsf3_pse+0x3a>
     f7a:	e0 e8       	ldi	r30, 0x80	; 128
     f7c:	32 d0       	rcall	.+100    	; 0xfe2 <__divsf3_pse+0x94>
     f7e:	91 50       	subi	r25, 0x01	; 1
     f80:	50 40       	sbci	r21, 0x00	; 0
     f82:	e6 95       	lsr	r30
     f84:	00 1c       	adc	r0, r0
     f86:	ca f7       	brpl	.-14     	; 0xf7a <__divsf3_pse+0x2c>
     f88:	2b d0       	rcall	.+86     	; 0xfe0 <__divsf3_pse+0x92>
     f8a:	fe 2f       	mov	r31, r30
     f8c:	29 d0       	rcall	.+82     	; 0xfe0 <__divsf3_pse+0x92>
     f8e:	66 0f       	add	r22, r22
     f90:	77 1f       	adc	r23, r23
     f92:	88 1f       	adc	r24, r24
     f94:	bb 1f       	adc	r27, r27
     f96:	26 17       	cp	r18, r22
     f98:	37 07       	cpc	r19, r23
     f9a:	48 07       	cpc	r20, r24
     f9c:	ab 07       	cpc	r26, r27
     f9e:	b0 e8       	ldi	r27, 0x80	; 128
     fa0:	09 f0       	breq	.+2      	; 0xfa4 <__divsf3_pse+0x56>
     fa2:	bb 0b       	sbc	r27, r27
     fa4:	80 2d       	mov	r24, r0
     fa6:	bf 01       	movw	r22, r30
     fa8:	ff 27       	eor	r31, r31
     faa:	93 58       	subi	r25, 0x83	; 131
     fac:	5f 4f       	sbci	r21, 0xFF	; 255
     fae:	3a f0       	brmi	.+14     	; 0xfbe <__divsf3_pse+0x70>
     fb0:	9e 3f       	cpi	r25, 0xFE	; 254
     fb2:	51 05       	cpc	r21, r1
     fb4:	78 f0       	brcs	.+30     	; 0xfd4 <__divsf3_pse+0x86>
     fb6:	0c 94 6e 08 	jmp	0x10dc	; 0x10dc <__fp_inf>
     fba:	0c 94 b9 08 	jmp	0x1172	; 0x1172 <__fp_szero>
     fbe:	5f 3f       	cpi	r21, 0xFF	; 255
     fc0:	e4 f3       	brlt	.-8      	; 0xfba <__divsf3_pse+0x6c>
     fc2:	98 3e       	cpi	r25, 0xE8	; 232
     fc4:	d4 f3       	brlt	.-12     	; 0xfba <__divsf3_pse+0x6c>
     fc6:	86 95       	lsr	r24
     fc8:	77 95       	ror	r23
     fca:	67 95       	ror	r22
     fcc:	b7 95       	ror	r27
     fce:	f7 95       	ror	r31
     fd0:	9f 5f       	subi	r25, 0xFF	; 255
     fd2:	c9 f7       	brne	.-14     	; 0xfc6 <__divsf3_pse+0x78>
     fd4:	88 0f       	add	r24, r24
     fd6:	91 1d       	adc	r25, r1
     fd8:	96 95       	lsr	r25
     fda:	87 95       	ror	r24
     fdc:	97 f9       	bld	r25, 7
     fde:	08 95       	ret
     fe0:	e1 e0       	ldi	r30, 0x01	; 1
     fe2:	66 0f       	add	r22, r22
     fe4:	77 1f       	adc	r23, r23
     fe6:	88 1f       	adc	r24, r24
     fe8:	bb 1f       	adc	r27, r27
     fea:	62 17       	cp	r22, r18
     fec:	73 07       	cpc	r23, r19
     fee:	84 07       	cpc	r24, r20
     ff0:	ba 07       	cpc	r27, r26
     ff2:	20 f0       	brcs	.+8      	; 0xffc <__divsf3_pse+0xae>
     ff4:	62 1b       	sub	r22, r18
     ff6:	73 0b       	sbc	r23, r19
     ff8:	84 0b       	sbc	r24, r20
     ffa:	ba 0b       	sbc	r27, r26
     ffc:	ee 1f       	adc	r30, r30
     ffe:	88 f7       	brcc	.-30     	; 0xfe2 <__divsf3_pse+0x94>
    1000:	e0 95       	com	r30
    1002:	08 95       	ret

00001004 <__fixunssfsi>:
    1004:	0e 94 9e 08 	call	0x113c	; 0x113c <__fp_splitA>
    1008:	88 f0       	brcs	.+34     	; 0x102c <__fixunssfsi+0x28>
    100a:	9f 57       	subi	r25, 0x7F	; 127
    100c:	98 f0       	brcs	.+38     	; 0x1034 <__fixunssfsi+0x30>
    100e:	b9 2f       	mov	r27, r25
    1010:	99 27       	eor	r25, r25
    1012:	b7 51       	subi	r27, 0x17	; 23
    1014:	b0 f0       	brcs	.+44     	; 0x1042 <__fixunssfsi+0x3e>
    1016:	e1 f0       	breq	.+56     	; 0x1050 <__fixunssfsi+0x4c>
    1018:	66 0f       	add	r22, r22
    101a:	77 1f       	adc	r23, r23
    101c:	88 1f       	adc	r24, r24
    101e:	99 1f       	adc	r25, r25
    1020:	1a f0       	brmi	.+6      	; 0x1028 <__fixunssfsi+0x24>
    1022:	ba 95       	dec	r27
    1024:	c9 f7       	brne	.-14     	; 0x1018 <__fixunssfsi+0x14>
    1026:	14 c0       	rjmp	.+40     	; 0x1050 <__fixunssfsi+0x4c>
    1028:	b1 30       	cpi	r27, 0x01	; 1
    102a:	91 f0       	breq	.+36     	; 0x1050 <__fixunssfsi+0x4c>
    102c:	0e 94 b8 08 	call	0x1170	; 0x1170 <__fp_zero>
    1030:	b1 e0       	ldi	r27, 0x01	; 1
    1032:	08 95       	ret
    1034:	0c 94 b8 08 	jmp	0x1170	; 0x1170 <__fp_zero>
    1038:	67 2f       	mov	r22, r23
    103a:	78 2f       	mov	r23, r24
    103c:	88 27       	eor	r24, r24
    103e:	b8 5f       	subi	r27, 0xF8	; 248
    1040:	39 f0       	breq	.+14     	; 0x1050 <__fixunssfsi+0x4c>
    1042:	b9 3f       	cpi	r27, 0xF9	; 249
    1044:	cc f3       	brlt	.-14     	; 0x1038 <__fixunssfsi+0x34>
    1046:	86 95       	lsr	r24
    1048:	77 95       	ror	r23
    104a:	67 95       	ror	r22
    104c:	b3 95       	inc	r27
    104e:	d9 f7       	brne	.-10     	; 0x1046 <__fixunssfsi+0x42>
    1050:	3e f4       	brtc	.+14     	; 0x1060 <__fixunssfsi+0x5c>
    1052:	90 95       	com	r25
    1054:	80 95       	com	r24
    1056:	70 95       	com	r23
    1058:	61 95       	neg	r22
    105a:	7f 4f       	sbci	r23, 0xFF	; 255
    105c:	8f 4f       	sbci	r24, 0xFF	; 255
    105e:	9f 4f       	sbci	r25, 0xFF	; 255
    1060:	08 95       	ret

00001062 <__floatunsisf>:
    1062:	e8 94       	clt
    1064:	09 c0       	rjmp	.+18     	; 0x1078 <__floatsisf+0x12>

00001066 <__floatsisf>:
    1066:	97 fb       	bst	r25, 7
    1068:	3e f4       	brtc	.+14     	; 0x1078 <__floatsisf+0x12>
    106a:	90 95       	com	r25
    106c:	80 95       	com	r24
    106e:	70 95       	com	r23
    1070:	61 95       	neg	r22
    1072:	7f 4f       	sbci	r23, 0xFF	; 255
    1074:	8f 4f       	sbci	r24, 0xFF	; 255
    1076:	9f 4f       	sbci	r25, 0xFF	; 255
    1078:	99 23       	and	r25, r25
    107a:	a9 f0       	breq	.+42     	; 0x10a6 <__floatsisf+0x40>
    107c:	f9 2f       	mov	r31, r25
    107e:	96 e9       	ldi	r25, 0x96	; 150
    1080:	bb 27       	eor	r27, r27
    1082:	93 95       	inc	r25
    1084:	f6 95       	lsr	r31
    1086:	87 95       	ror	r24
    1088:	77 95       	ror	r23
    108a:	67 95       	ror	r22
    108c:	b7 95       	ror	r27
    108e:	f1 11       	cpse	r31, r1
    1090:	f8 cf       	rjmp	.-16     	; 0x1082 <__floatsisf+0x1c>
    1092:	fa f4       	brpl	.+62     	; 0x10d2 <__floatsisf+0x6c>
    1094:	bb 0f       	add	r27, r27
    1096:	11 f4       	brne	.+4      	; 0x109c <__floatsisf+0x36>
    1098:	60 ff       	sbrs	r22, 0
    109a:	1b c0       	rjmp	.+54     	; 0x10d2 <__floatsisf+0x6c>
    109c:	6f 5f       	subi	r22, 0xFF	; 255
    109e:	7f 4f       	sbci	r23, 0xFF	; 255
    10a0:	8f 4f       	sbci	r24, 0xFF	; 255
    10a2:	9f 4f       	sbci	r25, 0xFF	; 255
    10a4:	16 c0       	rjmp	.+44     	; 0x10d2 <__floatsisf+0x6c>
    10a6:	88 23       	and	r24, r24
    10a8:	11 f0       	breq	.+4      	; 0x10ae <__floatsisf+0x48>
    10aa:	96 e9       	ldi	r25, 0x96	; 150
    10ac:	11 c0       	rjmp	.+34     	; 0x10d0 <__floatsisf+0x6a>
    10ae:	77 23       	and	r23, r23
    10b0:	21 f0       	breq	.+8      	; 0x10ba <__floatsisf+0x54>
    10b2:	9e e8       	ldi	r25, 0x8E	; 142
    10b4:	87 2f       	mov	r24, r23
    10b6:	76 2f       	mov	r23, r22
    10b8:	05 c0       	rjmp	.+10     	; 0x10c4 <__floatsisf+0x5e>
    10ba:	66 23       	and	r22, r22
    10bc:	71 f0       	breq	.+28     	; 0x10da <__floatsisf+0x74>
    10be:	96 e8       	ldi	r25, 0x86	; 134
    10c0:	86 2f       	mov	r24, r22
    10c2:	70 e0       	ldi	r23, 0x00	; 0
    10c4:	60 e0       	ldi	r22, 0x00	; 0
    10c6:	2a f0       	brmi	.+10     	; 0x10d2 <__floatsisf+0x6c>
    10c8:	9a 95       	dec	r25
    10ca:	66 0f       	add	r22, r22
    10cc:	77 1f       	adc	r23, r23
    10ce:	88 1f       	adc	r24, r24
    10d0:	da f7       	brpl	.-10     	; 0x10c8 <__floatsisf+0x62>
    10d2:	88 0f       	add	r24, r24
    10d4:	96 95       	lsr	r25
    10d6:	87 95       	ror	r24
    10d8:	97 f9       	bld	r25, 7
    10da:	08 95       	ret

000010dc <__fp_inf>:
    10dc:	97 f9       	bld	r25, 7
    10de:	9f 67       	ori	r25, 0x7F	; 127
    10e0:	80 e8       	ldi	r24, 0x80	; 128
    10e2:	70 e0       	ldi	r23, 0x00	; 0
    10e4:	60 e0       	ldi	r22, 0x00	; 0
    10e6:	08 95       	ret

000010e8 <__fp_nan>:
    10e8:	9f ef       	ldi	r25, 0xFF	; 255
    10ea:	80 ec       	ldi	r24, 0xC0	; 192
    10ec:	08 95       	ret

000010ee <__fp_pscA>:
    10ee:	00 24       	eor	r0, r0
    10f0:	0a 94       	dec	r0
    10f2:	16 16       	cp	r1, r22
    10f4:	17 06       	cpc	r1, r23
    10f6:	18 06       	cpc	r1, r24
    10f8:	09 06       	cpc	r0, r25
    10fa:	08 95       	ret

000010fc <__fp_pscB>:
    10fc:	00 24       	eor	r0, r0
    10fe:	0a 94       	dec	r0
    1100:	12 16       	cp	r1, r18
    1102:	13 06       	cpc	r1, r19
    1104:	14 06       	cpc	r1, r20
    1106:	05 06       	cpc	r0, r21
    1108:	08 95       	ret

0000110a <__fp_round>:
    110a:	09 2e       	mov	r0, r25
    110c:	03 94       	inc	r0
    110e:	00 0c       	add	r0, r0
    1110:	11 f4       	brne	.+4      	; 0x1116 <__fp_round+0xc>
    1112:	88 23       	and	r24, r24
    1114:	52 f0       	brmi	.+20     	; 0x112a <__fp_round+0x20>
    1116:	bb 0f       	add	r27, r27
    1118:	40 f4       	brcc	.+16     	; 0x112a <__fp_round+0x20>
    111a:	bf 2b       	or	r27, r31
    111c:	11 f4       	brne	.+4      	; 0x1122 <__fp_round+0x18>
    111e:	60 ff       	sbrs	r22, 0
    1120:	04 c0       	rjmp	.+8      	; 0x112a <__fp_round+0x20>
    1122:	6f 5f       	subi	r22, 0xFF	; 255
    1124:	7f 4f       	sbci	r23, 0xFF	; 255
    1126:	8f 4f       	sbci	r24, 0xFF	; 255
    1128:	9f 4f       	sbci	r25, 0xFF	; 255
    112a:	08 95       	ret

0000112c <__fp_split3>:
    112c:	57 fd       	sbrc	r21, 7
    112e:	90 58       	subi	r25, 0x80	; 128
    1130:	44 0f       	add	r20, r20
    1132:	55 1f       	adc	r21, r21
    1134:	59 f0       	breq	.+22     	; 0x114c <__fp_splitA+0x10>
    1136:	5f 3f       	cpi	r21, 0xFF	; 255
    1138:	71 f0       	breq	.+28     	; 0x1156 <__fp_splitA+0x1a>
    113a:	47 95       	ror	r20

0000113c <__fp_splitA>:
    113c:	88 0f       	add	r24, r24
    113e:	97 fb       	bst	r25, 7
    1140:	99 1f       	adc	r25, r25
    1142:	61 f0       	breq	.+24     	; 0x115c <__fp_splitA+0x20>
    1144:	9f 3f       	cpi	r25, 0xFF	; 255
    1146:	79 f0       	breq	.+30     	; 0x1166 <__fp_splitA+0x2a>
    1148:	87 95       	ror	r24
    114a:	08 95       	ret
    114c:	12 16       	cp	r1, r18
    114e:	13 06       	cpc	r1, r19
    1150:	14 06       	cpc	r1, r20
    1152:	55 1f       	adc	r21, r21
    1154:	f2 cf       	rjmp	.-28     	; 0x113a <__fp_split3+0xe>
    1156:	46 95       	lsr	r20
    1158:	f1 df       	rcall	.-30     	; 0x113c <__fp_splitA>
    115a:	08 c0       	rjmp	.+16     	; 0x116c <__fp_splitA+0x30>
    115c:	16 16       	cp	r1, r22
    115e:	17 06       	cpc	r1, r23
    1160:	18 06       	cpc	r1, r24
    1162:	99 1f       	adc	r25, r25
    1164:	f1 cf       	rjmp	.-30     	; 0x1148 <__fp_splitA+0xc>
    1166:	86 95       	lsr	r24
    1168:	71 05       	cpc	r23, r1
    116a:	61 05       	cpc	r22, r1
    116c:	08 94       	sec
    116e:	08 95       	ret

00001170 <__fp_zero>:
    1170:	e8 94       	clt

00001172 <__fp_szero>:
    1172:	bb 27       	eor	r27, r27
    1174:	66 27       	eor	r22, r22
    1176:	77 27       	eor	r23, r23
    1178:	cb 01       	movw	r24, r22
    117a:	97 f9       	bld	r25, 7
    117c:	08 95       	ret

0000117e <__mulsf3>:
    117e:	0e 94 d2 08 	call	0x11a4	; 0x11a4 <__mulsf3x>
    1182:	0c 94 85 08 	jmp	0x110a	; 0x110a <__fp_round>
    1186:	0e 94 77 08 	call	0x10ee	; 0x10ee <__fp_pscA>
    118a:	38 f0       	brcs	.+14     	; 0x119a <__mulsf3+0x1c>
    118c:	0e 94 7e 08 	call	0x10fc	; 0x10fc <__fp_pscB>
    1190:	20 f0       	brcs	.+8      	; 0x119a <__mulsf3+0x1c>
    1192:	95 23       	and	r25, r21
    1194:	11 f0       	breq	.+4      	; 0x119a <__mulsf3+0x1c>
    1196:	0c 94 6e 08 	jmp	0x10dc	; 0x10dc <__fp_inf>
    119a:	0c 94 74 08 	jmp	0x10e8	; 0x10e8 <__fp_nan>
    119e:	11 24       	eor	r1, r1
    11a0:	0c 94 b9 08 	jmp	0x1172	; 0x1172 <__fp_szero>

000011a4 <__mulsf3x>:
    11a4:	0e 94 96 08 	call	0x112c	; 0x112c <__fp_split3>
    11a8:	70 f3       	brcs	.-36     	; 0x1186 <__mulsf3+0x8>

000011aa <__mulsf3_pse>:
    11aa:	95 9f       	mul	r25, r21
    11ac:	c1 f3       	breq	.-16     	; 0x119e <__mulsf3+0x20>
    11ae:	95 0f       	add	r25, r21
    11b0:	50 e0       	ldi	r21, 0x00	; 0
    11b2:	55 1f       	adc	r21, r21
    11b4:	62 9f       	mul	r22, r18
    11b6:	f0 01       	movw	r30, r0
    11b8:	72 9f       	mul	r23, r18
    11ba:	bb 27       	eor	r27, r27
    11bc:	f0 0d       	add	r31, r0
    11be:	b1 1d       	adc	r27, r1
    11c0:	63 9f       	mul	r22, r19
    11c2:	aa 27       	eor	r26, r26
    11c4:	f0 0d       	add	r31, r0
    11c6:	b1 1d       	adc	r27, r1
    11c8:	aa 1f       	adc	r26, r26
    11ca:	64 9f       	mul	r22, r20
    11cc:	66 27       	eor	r22, r22
    11ce:	b0 0d       	add	r27, r0
    11d0:	a1 1d       	adc	r26, r1
    11d2:	66 1f       	adc	r22, r22
    11d4:	82 9f       	mul	r24, r18
    11d6:	22 27       	eor	r18, r18
    11d8:	b0 0d       	add	r27, r0
    11da:	a1 1d       	adc	r26, r1
    11dc:	62 1f       	adc	r22, r18
    11de:	73 9f       	mul	r23, r19
    11e0:	b0 0d       	add	r27, r0
    11e2:	a1 1d       	adc	r26, r1
    11e4:	62 1f       	adc	r22, r18
    11e6:	83 9f       	mul	r24, r19
    11e8:	a0 0d       	add	r26, r0
    11ea:	61 1d       	adc	r22, r1
    11ec:	22 1f       	adc	r18, r18
    11ee:	74 9f       	mul	r23, r20
    11f0:	33 27       	eor	r19, r19
    11f2:	a0 0d       	add	r26, r0
    11f4:	61 1d       	adc	r22, r1
    11f6:	23 1f       	adc	r18, r19
    11f8:	84 9f       	mul	r24, r20
    11fa:	60 0d       	add	r22, r0
    11fc:	21 1d       	adc	r18, r1
    11fe:	82 2f       	mov	r24, r18
    1200:	76 2f       	mov	r23, r22
    1202:	6a 2f       	mov	r22, r26
    1204:	11 24       	eor	r1, r1
    1206:	9f 57       	subi	r25, 0x7F	; 127
    1208:	50 40       	sbci	r21, 0x00	; 0
    120a:	9a f0       	brmi	.+38     	; 0x1232 <__mulsf3_pse+0x88>
    120c:	f1 f0       	breq	.+60     	; 0x124a <__mulsf3_pse+0xa0>
    120e:	88 23       	and	r24, r24
    1210:	4a f0       	brmi	.+18     	; 0x1224 <__mulsf3_pse+0x7a>
    1212:	ee 0f       	add	r30, r30
    1214:	ff 1f       	adc	r31, r31
    1216:	bb 1f       	adc	r27, r27
    1218:	66 1f       	adc	r22, r22
    121a:	77 1f       	adc	r23, r23
    121c:	88 1f       	adc	r24, r24
    121e:	91 50       	subi	r25, 0x01	; 1
    1220:	50 40       	sbci	r21, 0x00	; 0
    1222:	a9 f7       	brne	.-22     	; 0x120e <__mulsf3_pse+0x64>
    1224:	9e 3f       	cpi	r25, 0xFE	; 254
    1226:	51 05       	cpc	r21, r1
    1228:	80 f0       	brcs	.+32     	; 0x124a <__mulsf3_pse+0xa0>
    122a:	0c 94 6e 08 	jmp	0x10dc	; 0x10dc <__fp_inf>
    122e:	0c 94 b9 08 	jmp	0x1172	; 0x1172 <__fp_szero>
    1232:	5f 3f       	cpi	r21, 0xFF	; 255
    1234:	e4 f3       	brlt	.-8      	; 0x122e <__mulsf3_pse+0x84>
    1236:	98 3e       	cpi	r25, 0xE8	; 232
    1238:	d4 f3       	brlt	.-12     	; 0x122e <__mulsf3_pse+0x84>
    123a:	86 95       	lsr	r24
    123c:	77 95       	ror	r23
    123e:	67 95       	ror	r22
    1240:	b7 95       	ror	r27
    1242:	f7 95       	ror	r31
    1244:	e7 95       	ror	r30
    1246:	9f 5f       	subi	r25, 0xFF	; 255
    1248:	c1 f7       	brne	.-16     	; 0x123a <__mulsf3_pse+0x90>
    124a:	fe 2b       	or	r31, r30
    124c:	88 0f       	add	r24, r24
    124e:	91 1d       	adc	r25, r1
    1250:	96 95       	lsr	r25
    1252:	87 95       	ror	r24
    1254:	97 f9       	bld	r25, 7
    1256:	08 95       	ret

00001258 <pow>:
    1258:	fa 01       	movw	r30, r20
    125a:	ee 0f       	add	r30, r30
    125c:	ff 1f       	adc	r31, r31
    125e:	30 96       	adiw	r30, 0x00	; 0
    1260:	21 05       	cpc	r18, r1
    1262:	31 05       	cpc	r19, r1
    1264:	a1 f1       	breq	.+104    	; 0x12ce <pow+0x76>
    1266:	61 15       	cp	r22, r1
    1268:	71 05       	cpc	r23, r1
    126a:	61 f4       	brne	.+24     	; 0x1284 <pow+0x2c>
    126c:	80 38       	cpi	r24, 0x80	; 128
    126e:	bf e3       	ldi	r27, 0x3F	; 63
    1270:	9b 07       	cpc	r25, r27
    1272:	49 f1       	breq	.+82     	; 0x12c6 <pow+0x6e>
    1274:	68 94       	set
    1276:	90 38       	cpi	r25, 0x80	; 128
    1278:	81 05       	cpc	r24, r1
    127a:	61 f0       	breq	.+24     	; 0x1294 <pow+0x3c>
    127c:	80 38       	cpi	r24, 0x80	; 128
    127e:	bf ef       	ldi	r27, 0xFF	; 255
    1280:	9b 07       	cpc	r25, r27
    1282:	41 f0       	breq	.+16     	; 0x1294 <pow+0x3c>
    1284:	99 23       	and	r25, r25
    1286:	4a f5       	brpl	.+82     	; 0x12da <pow+0x82>
    1288:	ff 3f       	cpi	r31, 0xFF	; 255
    128a:	e1 05       	cpc	r30, r1
    128c:	31 05       	cpc	r19, r1
    128e:	21 05       	cpc	r18, r1
    1290:	19 f1       	breq	.+70     	; 0x12d8 <pow+0x80>
    1292:	e8 94       	clt
    1294:	08 94       	sec
    1296:	e7 95       	ror	r30
    1298:	d9 01       	movw	r26, r18
    129a:	aa 23       	and	r26, r26
    129c:	29 f4       	brne	.+10     	; 0x12a8 <pow+0x50>
    129e:	ab 2f       	mov	r26, r27
    12a0:	be 2f       	mov	r27, r30
    12a2:	f8 5f       	subi	r31, 0xF8	; 248
    12a4:	d0 f3       	brcs	.-12     	; 0x129a <pow+0x42>
    12a6:	10 c0       	rjmp	.+32     	; 0x12c8 <pow+0x70>
    12a8:	ff 5f       	subi	r31, 0xFF	; 255
    12aa:	70 f4       	brcc	.+28     	; 0x12c8 <pow+0x70>
    12ac:	a6 95       	lsr	r26
    12ae:	e0 f7       	brcc	.-8      	; 0x12a8 <pow+0x50>
    12b0:	f7 39       	cpi	r31, 0x97	; 151
    12b2:	50 f0       	brcs	.+20     	; 0x12c8 <pow+0x70>
    12b4:	19 f0       	breq	.+6      	; 0x12bc <pow+0x64>
    12b6:	ff 3a       	cpi	r31, 0xAF	; 175
    12b8:	38 f4       	brcc	.+14     	; 0x12c8 <pow+0x70>
    12ba:	9f 77       	andi	r25, 0x7F	; 127
    12bc:	9f 93       	push	r25
    12be:	0d d0       	rcall	.+26     	; 0x12da <pow+0x82>
    12c0:	0f 90       	pop	r0
    12c2:	07 fc       	sbrc	r0, 7
    12c4:	90 58       	subi	r25, 0x80	; 128
    12c6:	08 95       	ret
    12c8:	46 f0       	brts	.+16     	; 0x12da <pow+0x82>
    12ca:	0c 94 74 08 	jmp	0x10e8	; 0x10e8 <__fp_nan>
    12ce:	60 e0       	ldi	r22, 0x00	; 0
    12d0:	70 e0       	ldi	r23, 0x00	; 0
    12d2:	80 e8       	ldi	r24, 0x80	; 128
    12d4:	9f e3       	ldi	r25, 0x3F	; 63
    12d6:	08 95       	ret
    12d8:	4f e7       	ldi	r20, 0x7F	; 127
    12da:	9f 77       	andi	r25, 0x7F	; 127
    12dc:	5f 93       	push	r21
    12de:	4f 93       	push	r20
    12e0:	3f 93       	push	r19
    12e2:	2f 93       	push	r18
    12e4:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <log>
    12e8:	2f 91       	pop	r18
    12ea:	3f 91       	pop	r19
    12ec:	4f 91       	pop	r20
    12ee:	5f 91       	pop	r21
    12f0:	0e 94 bf 08 	call	0x117e	; 0x117e <__mulsf3>
    12f4:	0c 94 a8 09 	jmp	0x1350	; 0x1350 <exp>

000012f8 <round>:
    12f8:	0e 94 9e 08 	call	0x113c	; 0x113c <__fp_splitA>
    12fc:	e8 f0       	brcs	.+58     	; 0x1338 <round+0x40>
    12fe:	9e 37       	cpi	r25, 0x7E	; 126
    1300:	e8 f0       	brcs	.+58     	; 0x133c <round+0x44>
    1302:	96 39       	cpi	r25, 0x96	; 150
    1304:	b8 f4       	brcc	.+46     	; 0x1334 <round+0x3c>
    1306:	9e 38       	cpi	r25, 0x8E	; 142
    1308:	48 f4       	brcc	.+18     	; 0x131c <round+0x24>
    130a:	67 2f       	mov	r22, r23
    130c:	78 2f       	mov	r23, r24
    130e:	88 27       	eor	r24, r24
    1310:	98 5f       	subi	r25, 0xF8	; 248
    1312:	f9 cf       	rjmp	.-14     	; 0x1306 <round+0xe>
    1314:	86 95       	lsr	r24
    1316:	77 95       	ror	r23
    1318:	67 95       	ror	r22
    131a:	93 95       	inc	r25
    131c:	95 39       	cpi	r25, 0x95	; 149
    131e:	d0 f3       	brcs	.-12     	; 0x1314 <round+0x1c>
    1320:	b6 2f       	mov	r27, r22
    1322:	b1 70       	andi	r27, 0x01	; 1
    1324:	6b 0f       	add	r22, r27
    1326:	71 1d       	adc	r23, r1
    1328:	81 1d       	adc	r24, r1
    132a:	20 f4       	brcc	.+8      	; 0x1334 <round+0x3c>
    132c:	87 95       	ror	r24
    132e:	77 95       	ror	r23
    1330:	67 95       	ror	r22
    1332:	93 95       	inc	r25
    1334:	0c 94 da 09 	jmp	0x13b4	; 0x13b4 <__fp_mintl>
    1338:	0c 94 f5 09 	jmp	0x13ea	; 0x13ea <__fp_mpack>
    133c:	0c 94 b9 08 	jmp	0x1172	; 0x1172 <__fp_szero>
    1340:	29 f4       	brne	.+10     	; 0x134c <round+0x54>
    1342:	16 f0       	brts	.+4      	; 0x1348 <round+0x50>
    1344:	0c 94 6e 08 	jmp	0x10dc	; 0x10dc <__fp_inf>
    1348:	0c 94 b8 08 	jmp	0x1170	; 0x1170 <__fp_zero>
    134c:	0c 94 74 08 	jmp	0x10e8	; 0x10e8 <__fp_nan>

00001350 <exp>:
    1350:	0e 94 9e 08 	call	0x113c	; 0x113c <__fp_splitA>
    1354:	a8 f3       	brcs	.-22     	; 0x1340 <round+0x48>
    1356:	96 38       	cpi	r25, 0x86	; 134
    1358:	a0 f7       	brcc	.-24     	; 0x1342 <round+0x4a>
    135a:	07 f8       	bld	r0, 7
    135c:	0f 92       	push	r0
    135e:	e8 94       	clt
    1360:	2b e3       	ldi	r18, 0x3B	; 59
    1362:	3a ea       	ldi	r19, 0xAA	; 170
    1364:	48 eb       	ldi	r20, 0xB8	; 184
    1366:	5f e7       	ldi	r21, 0x7F	; 127
    1368:	0e 94 d5 08 	call	0x11aa	; 0x11aa <__mulsf3_pse>
    136c:	0f 92       	push	r0
    136e:	0f 92       	push	r0
    1370:	0f 92       	push	r0
    1372:	4d b7       	in	r20, 0x3d	; 61
    1374:	5e b7       	in	r21, 0x3e	; 62
    1376:	0f 92       	push	r0
    1378:	0e 94 bc 0a 	call	0x1578	; 0x1578 <modf>
    137c:	ec ef       	ldi	r30, 0xFC	; 252
    137e:	f1 e0       	ldi	r31, 0x01	; 1
    1380:	0e 94 03 0a 	call	0x1406	; 0x1406 <__fp_powser>
    1384:	4f 91       	pop	r20
    1386:	5f 91       	pop	r21
    1388:	ef 91       	pop	r30
    138a:	ff 91       	pop	r31
    138c:	e5 95       	asr	r30
    138e:	ee 1f       	adc	r30, r30
    1390:	ff 1f       	adc	r31, r31
    1392:	49 f0       	breq	.+18     	; 0x13a6 <exp+0x56>
    1394:	fe 57       	subi	r31, 0x7E	; 126
    1396:	e0 68       	ori	r30, 0x80	; 128
    1398:	44 27       	eor	r20, r20
    139a:	ee 0f       	add	r30, r30
    139c:	44 1f       	adc	r20, r20
    139e:	fa 95       	dec	r31
    13a0:	e1 f7       	brne	.-8      	; 0x139a <exp+0x4a>
    13a2:	41 95       	neg	r20
    13a4:	55 0b       	sbc	r21, r21
    13a6:	0e 94 36 0a 	call	0x146c	; 0x146c <ldexp>
    13aa:	0f 90       	pop	r0
    13ac:	07 fe       	sbrs	r0, 7
    13ae:	0c 94 2a 0a 	jmp	0x1454	; 0x1454 <inverse>
    13b2:	08 95       	ret

000013b4 <__fp_mintl>:
    13b4:	88 23       	and	r24, r24
    13b6:	71 f4       	brne	.+28     	; 0x13d4 <__fp_mintl+0x20>
    13b8:	77 23       	and	r23, r23
    13ba:	21 f0       	breq	.+8      	; 0x13c4 <__fp_mintl+0x10>
    13bc:	98 50       	subi	r25, 0x08	; 8
    13be:	87 2b       	or	r24, r23
    13c0:	76 2f       	mov	r23, r22
    13c2:	07 c0       	rjmp	.+14     	; 0x13d2 <__fp_mintl+0x1e>
    13c4:	66 23       	and	r22, r22
    13c6:	11 f4       	brne	.+4      	; 0x13cc <__fp_mintl+0x18>
    13c8:	99 27       	eor	r25, r25
    13ca:	0d c0       	rjmp	.+26     	; 0x13e6 <__fp_mintl+0x32>
    13cc:	90 51       	subi	r25, 0x10	; 16
    13ce:	86 2b       	or	r24, r22
    13d0:	70 e0       	ldi	r23, 0x00	; 0
    13d2:	60 e0       	ldi	r22, 0x00	; 0
    13d4:	2a f0       	brmi	.+10     	; 0x13e0 <__fp_mintl+0x2c>
    13d6:	9a 95       	dec	r25
    13d8:	66 0f       	add	r22, r22
    13da:	77 1f       	adc	r23, r23
    13dc:	88 1f       	adc	r24, r24
    13de:	da f7       	brpl	.-10     	; 0x13d6 <__fp_mintl+0x22>
    13e0:	88 0f       	add	r24, r24
    13e2:	96 95       	lsr	r25
    13e4:	87 95       	ror	r24
    13e6:	97 f9       	bld	r25, 7
    13e8:	08 95       	ret

000013ea <__fp_mpack>:
    13ea:	9f 3f       	cpi	r25, 0xFF	; 255
    13ec:	31 f0       	breq	.+12     	; 0x13fa <__fp_mpack_finite+0xc>

000013ee <__fp_mpack_finite>:
    13ee:	91 50       	subi	r25, 0x01	; 1
    13f0:	20 f4       	brcc	.+8      	; 0x13fa <__fp_mpack_finite+0xc>
    13f2:	87 95       	ror	r24
    13f4:	77 95       	ror	r23
    13f6:	67 95       	ror	r22
    13f8:	b7 95       	ror	r27
    13fa:	88 0f       	add	r24, r24
    13fc:	91 1d       	adc	r25, r1
    13fe:	96 95       	lsr	r25
    1400:	87 95       	ror	r24
    1402:	97 f9       	bld	r25, 7
    1404:	08 95       	ret

00001406 <__fp_powser>:
    1406:	df 93       	push	r29
    1408:	cf 93       	push	r28
    140a:	1f 93       	push	r17
    140c:	0f 93       	push	r16
    140e:	ff 92       	push	r15
    1410:	ef 92       	push	r14
    1412:	df 92       	push	r13
    1414:	7b 01       	movw	r14, r22
    1416:	8c 01       	movw	r16, r24
    1418:	68 94       	set
    141a:	06 c0       	rjmp	.+12     	; 0x1428 <__fp_powser+0x22>
    141c:	da 2e       	mov	r13, r26
    141e:	ef 01       	movw	r28, r30
    1420:	0e 94 d2 08 	call	0x11a4	; 0x11a4 <__mulsf3x>
    1424:	fe 01       	movw	r30, r28
    1426:	e8 94       	clt
    1428:	a5 91       	lpm	r26, Z+
    142a:	25 91       	lpm	r18, Z+
    142c:	35 91       	lpm	r19, Z+
    142e:	45 91       	lpm	r20, Z+
    1430:	55 91       	lpm	r21, Z+
    1432:	a6 f3       	brts	.-24     	; 0x141c <__fp_powser+0x16>
    1434:	ef 01       	movw	r28, r30
    1436:	0e 94 3b 07 	call	0xe76	; 0xe76 <__addsf3x>
    143a:	fe 01       	movw	r30, r28
    143c:	97 01       	movw	r18, r14
    143e:	a8 01       	movw	r20, r16
    1440:	da 94       	dec	r13
    1442:	69 f7       	brne	.-38     	; 0x141e <__fp_powser+0x18>
    1444:	df 90       	pop	r13
    1446:	ef 90       	pop	r14
    1448:	ff 90       	pop	r15
    144a:	0f 91       	pop	r16
    144c:	1f 91       	pop	r17
    144e:	cf 91       	pop	r28
    1450:	df 91       	pop	r29
    1452:	08 95       	ret

00001454 <inverse>:
    1454:	9b 01       	movw	r18, r22
    1456:	ac 01       	movw	r20, r24
    1458:	60 e0       	ldi	r22, 0x00	; 0
    145a:	70 e0       	ldi	r23, 0x00	; 0
    145c:	80 e8       	ldi	r24, 0x80	; 128
    145e:	9f e3       	ldi	r25, 0x3F	; 63
    1460:	0c 94 90 07 	jmp	0xf20	; 0xf20 <__divsf3>
    1464:	0c 94 6e 08 	jmp	0x10dc	; 0x10dc <__fp_inf>
    1468:	0c 94 f5 09 	jmp	0x13ea	; 0x13ea <__fp_mpack>

0000146c <ldexp>:
    146c:	0e 94 9e 08 	call	0x113c	; 0x113c <__fp_splitA>
    1470:	d8 f3       	brcs	.-10     	; 0x1468 <inverse+0x14>
    1472:	99 23       	and	r25, r25
    1474:	c9 f3       	breq	.-14     	; 0x1468 <inverse+0x14>
    1476:	94 0f       	add	r25, r20
    1478:	51 1d       	adc	r21, r1
    147a:	a3 f3       	brvs	.-24     	; 0x1464 <inverse+0x10>
    147c:	91 50       	subi	r25, 0x01	; 1
    147e:	50 40       	sbci	r21, 0x00	; 0
    1480:	94 f0       	brlt	.+36     	; 0x14a6 <ldexp+0x3a>
    1482:	59 f0       	breq	.+22     	; 0x149a <ldexp+0x2e>
    1484:	88 23       	and	r24, r24
    1486:	32 f0       	brmi	.+12     	; 0x1494 <ldexp+0x28>
    1488:	66 0f       	add	r22, r22
    148a:	77 1f       	adc	r23, r23
    148c:	88 1f       	adc	r24, r24
    148e:	91 50       	subi	r25, 0x01	; 1
    1490:	50 40       	sbci	r21, 0x00	; 0
    1492:	c1 f7       	brne	.-16     	; 0x1484 <ldexp+0x18>
    1494:	9e 3f       	cpi	r25, 0xFE	; 254
    1496:	51 05       	cpc	r21, r1
    1498:	2c f7       	brge	.-54     	; 0x1464 <inverse+0x10>
    149a:	88 0f       	add	r24, r24
    149c:	91 1d       	adc	r25, r1
    149e:	96 95       	lsr	r25
    14a0:	87 95       	ror	r24
    14a2:	97 f9       	bld	r25, 7
    14a4:	08 95       	ret
    14a6:	5f 3f       	cpi	r21, 0xFF	; 255
    14a8:	ac f0       	brlt	.+42     	; 0x14d4 <ldexp+0x68>
    14aa:	98 3e       	cpi	r25, 0xE8	; 232
    14ac:	9c f0       	brlt	.+38     	; 0x14d4 <ldexp+0x68>
    14ae:	bb 27       	eor	r27, r27
    14b0:	86 95       	lsr	r24
    14b2:	77 95       	ror	r23
    14b4:	67 95       	ror	r22
    14b6:	b7 95       	ror	r27
    14b8:	08 f4       	brcc	.+2      	; 0x14bc <ldexp+0x50>
    14ba:	b1 60       	ori	r27, 0x01	; 1
    14bc:	93 95       	inc	r25
    14be:	c1 f7       	brne	.-16     	; 0x14b0 <ldexp+0x44>
    14c0:	bb 0f       	add	r27, r27
    14c2:	58 f7       	brcc	.-42     	; 0x149a <ldexp+0x2e>
    14c4:	11 f4       	brne	.+4      	; 0x14ca <ldexp+0x5e>
    14c6:	60 ff       	sbrs	r22, 0
    14c8:	e8 cf       	rjmp	.-48     	; 0x149a <ldexp+0x2e>
    14ca:	6f 5f       	subi	r22, 0xFF	; 255
    14cc:	7f 4f       	sbci	r23, 0xFF	; 255
    14ce:	8f 4f       	sbci	r24, 0xFF	; 255
    14d0:	9f 4f       	sbci	r25, 0xFF	; 255
    14d2:	e3 cf       	rjmp	.-58     	; 0x149a <ldexp+0x2e>
    14d4:	0c 94 b9 08 	jmp	0x1172	; 0x1172 <__fp_szero>
    14d8:	16 f0       	brts	.+4      	; 0x14de <ldexp+0x72>
    14da:	0c 94 f5 09 	jmp	0x13ea	; 0x13ea <__fp_mpack>
    14de:	0c 94 74 08 	jmp	0x10e8	; 0x10e8 <__fp_nan>
    14e2:	68 94       	set
    14e4:	0c 94 6e 08 	jmp	0x10dc	; 0x10dc <__fp_inf>

000014e8 <log>:
    14e8:	0e 94 9e 08 	call	0x113c	; 0x113c <__fp_splitA>
    14ec:	a8 f3       	brcs	.-22     	; 0x14d8 <ldexp+0x6c>
    14ee:	99 23       	and	r25, r25
    14f0:	c1 f3       	breq	.-16     	; 0x14e2 <ldexp+0x76>
    14f2:	ae f3       	brts	.-22     	; 0x14de <ldexp+0x72>
    14f4:	df 93       	push	r29
    14f6:	cf 93       	push	r28
    14f8:	1f 93       	push	r17
    14fa:	0f 93       	push	r16
    14fc:	ff 92       	push	r15
    14fe:	c9 2f       	mov	r28, r25
    1500:	dd 27       	eor	r29, r29
    1502:	88 23       	and	r24, r24
    1504:	2a f0       	brmi	.+10     	; 0x1510 <log+0x28>
    1506:	21 97       	sbiw	r28, 0x01	; 1
    1508:	66 0f       	add	r22, r22
    150a:	77 1f       	adc	r23, r23
    150c:	88 1f       	adc	r24, r24
    150e:	da f7       	brpl	.-10     	; 0x1506 <log+0x1e>
    1510:	20 e0       	ldi	r18, 0x00	; 0
    1512:	30 e0       	ldi	r19, 0x00	; 0
    1514:	40 e8       	ldi	r20, 0x80	; 128
    1516:	5f eb       	ldi	r21, 0xBF	; 191
    1518:	9f e3       	ldi	r25, 0x3F	; 63
    151a:	88 39       	cpi	r24, 0x98	; 152
    151c:	20 f0       	brcs	.+8      	; 0x1526 <log+0x3e>
    151e:	80 3e       	cpi	r24, 0xE0	; 224
    1520:	38 f0       	brcs	.+14     	; 0x1530 <log+0x48>
    1522:	21 96       	adiw	r28, 0x01	; 1
    1524:	8f 77       	andi	r24, 0x7F	; 127
    1526:	0e 94 24 07 	call	0xe48	; 0xe48 <__addsf3>
    152a:	e4 e2       	ldi	r30, 0x24	; 36
    152c:	f2 e0       	ldi	r31, 0x02	; 2
    152e:	04 c0       	rjmp	.+8      	; 0x1538 <log+0x50>
    1530:	0e 94 24 07 	call	0xe48	; 0xe48 <__addsf3>
    1534:	e1 e5       	ldi	r30, 0x51	; 81
    1536:	f2 e0       	ldi	r31, 0x02	; 2
    1538:	0e 94 03 0a 	call	0x1406	; 0x1406 <__fp_powser>
    153c:	8b 01       	movw	r16, r22
    153e:	be 01       	movw	r22, r28
    1540:	ec 01       	movw	r28, r24
    1542:	fb 2e       	mov	r15, r27
    1544:	6f 57       	subi	r22, 0x7F	; 127
    1546:	71 09       	sbc	r23, r1
    1548:	75 95       	asr	r23
    154a:	77 1f       	adc	r23, r23
    154c:	88 0b       	sbc	r24, r24
    154e:	99 0b       	sbc	r25, r25
    1550:	0e 94 33 08 	call	0x1066	; 0x1066 <__floatsisf>
    1554:	28 e1       	ldi	r18, 0x18	; 24
    1556:	32 e7       	ldi	r19, 0x72	; 114
    1558:	41 e3       	ldi	r20, 0x31	; 49
    155a:	5f e3       	ldi	r21, 0x3F	; 63
    155c:	0e 94 d2 08 	call	0x11a4	; 0x11a4 <__mulsf3x>
    1560:	af 2d       	mov	r26, r15
    1562:	98 01       	movw	r18, r16
    1564:	ae 01       	movw	r20, r28
    1566:	ff 90       	pop	r15
    1568:	0f 91       	pop	r16
    156a:	1f 91       	pop	r17
    156c:	cf 91       	pop	r28
    156e:	df 91       	pop	r29
    1570:	0e 94 3b 07 	call	0xe76	; 0xe76 <__addsf3x>
    1574:	0c 94 85 08 	jmp	0x110a	; 0x110a <__fp_round>

00001578 <modf>:
    1578:	fa 01       	movw	r30, r20
    157a:	dc 01       	movw	r26, r24
    157c:	aa 0f       	add	r26, r26
    157e:	bb 1f       	adc	r27, r27
    1580:	9b 01       	movw	r18, r22
    1582:	ac 01       	movw	r20, r24
    1584:	bf 57       	subi	r27, 0x7F	; 127
    1586:	28 f4       	brcc	.+10     	; 0x1592 <modf+0x1a>
    1588:	22 27       	eor	r18, r18
    158a:	33 27       	eor	r19, r19
    158c:	44 27       	eor	r20, r20
    158e:	50 78       	andi	r21, 0x80	; 128
    1590:	20 c0       	rjmp	.+64     	; 0x15d2 <modf+0x5a>
    1592:	b7 51       	subi	r27, 0x17	; 23
    1594:	90 f4       	brcc	.+36     	; 0x15ba <modf+0x42>
    1596:	ab 2f       	mov	r26, r27
    1598:	00 24       	eor	r0, r0
    159a:	46 95       	lsr	r20
    159c:	37 95       	ror	r19
    159e:	27 95       	ror	r18
    15a0:	01 1c       	adc	r0, r1
    15a2:	a3 95       	inc	r26
    15a4:	d2 f3       	brmi	.-12     	; 0x159a <modf+0x22>
    15a6:	00 20       	and	r0, r0
    15a8:	71 f0       	breq	.+28     	; 0x15c6 <modf+0x4e>
    15aa:	22 0f       	add	r18, r18
    15ac:	33 1f       	adc	r19, r19
    15ae:	44 1f       	adc	r20, r20
    15b0:	b3 95       	inc	r27
    15b2:	da f3       	brmi	.-10     	; 0x15aa <modf+0x32>
    15b4:	0e d0       	rcall	.+28     	; 0x15d2 <modf+0x5a>
    15b6:	0c 94 23 07 	jmp	0xe46	; 0xe46 <__subsf3>
    15ba:	61 30       	cpi	r22, 0x01	; 1
    15bc:	71 05       	cpc	r23, r1
    15be:	a0 e8       	ldi	r26, 0x80	; 128
    15c0:	8a 07       	cpc	r24, r26
    15c2:	b9 46       	sbci	r27, 0x69	; 105
    15c4:	30 f4       	brcc	.+12     	; 0x15d2 <modf+0x5a>
    15c6:	9b 01       	movw	r18, r22
    15c8:	ac 01       	movw	r20, r24
    15ca:	66 27       	eor	r22, r22
    15cc:	77 27       	eor	r23, r23
    15ce:	88 27       	eor	r24, r24
    15d0:	90 78       	andi	r25, 0x80	; 128
    15d2:	30 96       	adiw	r30, 0x00	; 0
    15d4:	21 f0       	breq	.+8      	; 0x15de <modf+0x66>
    15d6:	20 83       	st	Z, r18
    15d8:	31 83       	std	Z+1, r19	; 0x01
    15da:	42 83       	std	Z+2, r20	; 0x02
    15dc:	53 83       	std	Z+3, r21	; 0x03
    15de:	08 95       	ret

000015e0 <vfprintf>:
    15e0:	2f 92       	push	r2
    15e2:	3f 92       	push	r3
    15e4:	4f 92       	push	r4
    15e6:	5f 92       	push	r5
    15e8:	6f 92       	push	r6
    15ea:	7f 92       	push	r7
    15ec:	8f 92       	push	r8
    15ee:	9f 92       	push	r9
    15f0:	af 92       	push	r10
    15f2:	bf 92       	push	r11
    15f4:	cf 92       	push	r12
    15f6:	df 92       	push	r13
    15f8:	ef 92       	push	r14
    15fa:	ff 92       	push	r15
    15fc:	0f 93       	push	r16
    15fe:	1f 93       	push	r17
    1600:	cf 93       	push	r28
    1602:	df 93       	push	r29
    1604:	cd b7       	in	r28, 0x3d	; 61
    1606:	de b7       	in	r29, 0x3e	; 62
    1608:	60 97       	sbiw	r28, 0x10	; 16
    160a:	cd bf       	out	0x3d, r28	; 61
    160c:	de bf       	out	0x3e, r29	; 62
    160e:	7c 01       	movw	r14, r24
    1610:	1b 01       	movw	r2, r22
    1612:	6a 01       	movw	r12, r20
    1614:	fc 01       	movw	r30, r24
    1616:	16 82       	std	Z+6, r1	; 0x06
    1618:	17 82       	std	Z+7, r1	; 0x07
    161a:	83 81       	ldd	r24, Z+3	; 0x03
    161c:	81 ff       	sbrs	r24, 1
    161e:	44 c3       	rjmp	.+1672   	; 0x1ca8 <vfprintf+0x6c8>
    1620:	9e 01       	movw	r18, r28
    1622:	2f 5f       	subi	r18, 0xFF	; 255
    1624:	3f 4f       	sbci	r19, 0xFF	; 255
    1626:	39 01       	movw	r6, r18
    1628:	f7 01       	movw	r30, r14
    162a:	93 81       	ldd	r25, Z+3	; 0x03
    162c:	f1 01       	movw	r30, r2
    162e:	93 fd       	sbrc	r25, 3
    1630:	85 91       	lpm	r24, Z+
    1632:	93 ff       	sbrs	r25, 3
    1634:	81 91       	ld	r24, Z+
    1636:	1f 01       	movw	r2, r30
    1638:	88 23       	and	r24, r24
    163a:	09 f4       	brne	.+2      	; 0x163e <vfprintf+0x5e>
    163c:	31 c3       	rjmp	.+1634   	; 0x1ca0 <vfprintf+0x6c0>
    163e:	85 32       	cpi	r24, 0x25	; 37
    1640:	39 f4       	brne	.+14     	; 0x1650 <vfprintf+0x70>
    1642:	93 fd       	sbrc	r25, 3
    1644:	85 91       	lpm	r24, Z+
    1646:	93 ff       	sbrs	r25, 3
    1648:	81 91       	ld	r24, Z+
    164a:	1f 01       	movw	r2, r30
    164c:	85 32       	cpi	r24, 0x25	; 37
    164e:	39 f4       	brne	.+14     	; 0x165e <vfprintf+0x7e>
    1650:	b7 01       	movw	r22, r14
    1652:	90 e0       	ldi	r25, 0x00	; 0
    1654:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <fputc>
    1658:	56 01       	movw	r10, r12
    165a:	65 01       	movw	r12, r10
    165c:	e5 cf       	rjmp	.-54     	; 0x1628 <vfprintf+0x48>
    165e:	10 e0       	ldi	r17, 0x00	; 0
    1660:	51 2c       	mov	r5, r1
    1662:	91 2c       	mov	r9, r1
    1664:	ff e1       	ldi	r31, 0x1F	; 31
    1666:	f9 15       	cp	r31, r9
    1668:	d8 f0       	brcs	.+54     	; 0x16a0 <vfprintf+0xc0>
    166a:	8b 32       	cpi	r24, 0x2B	; 43
    166c:	79 f0       	breq	.+30     	; 0x168c <vfprintf+0xac>
    166e:	38 f4       	brcc	.+14     	; 0x167e <vfprintf+0x9e>
    1670:	80 32       	cpi	r24, 0x20	; 32
    1672:	79 f0       	breq	.+30     	; 0x1692 <vfprintf+0xb2>
    1674:	83 32       	cpi	r24, 0x23	; 35
    1676:	a1 f4       	brne	.+40     	; 0x16a0 <vfprintf+0xc0>
    1678:	f9 2d       	mov	r31, r9
    167a:	f0 61       	ori	r31, 0x10	; 16
    167c:	2e c0       	rjmp	.+92     	; 0x16da <vfprintf+0xfa>
    167e:	8d 32       	cpi	r24, 0x2D	; 45
    1680:	61 f0       	breq	.+24     	; 0x169a <vfprintf+0xba>
    1682:	80 33       	cpi	r24, 0x30	; 48
    1684:	69 f4       	brne	.+26     	; 0x16a0 <vfprintf+0xc0>
    1686:	29 2d       	mov	r18, r9
    1688:	21 60       	ori	r18, 0x01	; 1
    168a:	2d c0       	rjmp	.+90     	; 0x16e6 <vfprintf+0x106>
    168c:	39 2d       	mov	r19, r9
    168e:	32 60       	ori	r19, 0x02	; 2
    1690:	93 2e       	mov	r9, r19
    1692:	89 2d       	mov	r24, r9
    1694:	84 60       	ori	r24, 0x04	; 4
    1696:	98 2e       	mov	r9, r24
    1698:	2a c0       	rjmp	.+84     	; 0x16ee <vfprintf+0x10e>
    169a:	e9 2d       	mov	r30, r9
    169c:	e8 60       	ori	r30, 0x08	; 8
    169e:	15 c0       	rjmp	.+42     	; 0x16ca <vfprintf+0xea>
    16a0:	97 fc       	sbrc	r9, 7
    16a2:	2d c0       	rjmp	.+90     	; 0x16fe <vfprintf+0x11e>
    16a4:	20 ed       	ldi	r18, 0xD0	; 208
    16a6:	28 0f       	add	r18, r24
    16a8:	2a 30       	cpi	r18, 0x0A	; 10
    16aa:	88 f4       	brcc	.+34     	; 0x16ce <vfprintf+0xee>
    16ac:	96 fe       	sbrs	r9, 6
    16ae:	06 c0       	rjmp	.+12     	; 0x16bc <vfprintf+0xdc>
    16b0:	3a e0       	ldi	r19, 0x0A	; 10
    16b2:	13 9f       	mul	r17, r19
    16b4:	20 0d       	add	r18, r0
    16b6:	11 24       	eor	r1, r1
    16b8:	12 2f       	mov	r17, r18
    16ba:	19 c0       	rjmp	.+50     	; 0x16ee <vfprintf+0x10e>
    16bc:	8a e0       	ldi	r24, 0x0A	; 10
    16be:	58 9e       	mul	r5, r24
    16c0:	20 0d       	add	r18, r0
    16c2:	11 24       	eor	r1, r1
    16c4:	52 2e       	mov	r5, r18
    16c6:	e9 2d       	mov	r30, r9
    16c8:	e0 62       	ori	r30, 0x20	; 32
    16ca:	9e 2e       	mov	r9, r30
    16cc:	10 c0       	rjmp	.+32     	; 0x16ee <vfprintf+0x10e>
    16ce:	8e 32       	cpi	r24, 0x2E	; 46
    16d0:	31 f4       	brne	.+12     	; 0x16de <vfprintf+0xfe>
    16d2:	96 fc       	sbrc	r9, 6
    16d4:	e5 c2       	rjmp	.+1482   	; 0x1ca0 <vfprintf+0x6c0>
    16d6:	f9 2d       	mov	r31, r9
    16d8:	f0 64       	ori	r31, 0x40	; 64
    16da:	9f 2e       	mov	r9, r31
    16dc:	08 c0       	rjmp	.+16     	; 0x16ee <vfprintf+0x10e>
    16de:	8c 36       	cpi	r24, 0x6C	; 108
    16e0:	21 f4       	brne	.+8      	; 0x16ea <vfprintf+0x10a>
    16e2:	29 2d       	mov	r18, r9
    16e4:	20 68       	ori	r18, 0x80	; 128
    16e6:	92 2e       	mov	r9, r18
    16e8:	02 c0       	rjmp	.+4      	; 0x16ee <vfprintf+0x10e>
    16ea:	88 36       	cpi	r24, 0x68	; 104
    16ec:	41 f4       	brne	.+16     	; 0x16fe <vfprintf+0x11e>
    16ee:	f1 01       	movw	r30, r2
    16f0:	93 fd       	sbrc	r25, 3
    16f2:	85 91       	lpm	r24, Z+
    16f4:	93 ff       	sbrs	r25, 3
    16f6:	81 91       	ld	r24, Z+
    16f8:	1f 01       	movw	r2, r30
    16fa:	81 11       	cpse	r24, r1
    16fc:	b3 cf       	rjmp	.-154    	; 0x1664 <vfprintf+0x84>
    16fe:	9b eb       	ldi	r25, 0xBB	; 187
    1700:	98 0f       	add	r25, r24
    1702:	93 30       	cpi	r25, 0x03	; 3
    1704:	20 f4       	brcc	.+8      	; 0x170e <vfprintf+0x12e>
    1706:	99 2d       	mov	r25, r9
    1708:	90 61       	ori	r25, 0x10	; 16
    170a:	80 5e       	subi	r24, 0xE0	; 224
    170c:	07 c0       	rjmp	.+14     	; 0x171c <vfprintf+0x13c>
    170e:	9b e9       	ldi	r25, 0x9B	; 155
    1710:	98 0f       	add	r25, r24
    1712:	93 30       	cpi	r25, 0x03	; 3
    1714:	08 f0       	brcs	.+2      	; 0x1718 <vfprintf+0x138>
    1716:	66 c1       	rjmp	.+716    	; 0x19e4 <vfprintf+0x404>
    1718:	99 2d       	mov	r25, r9
    171a:	9f 7e       	andi	r25, 0xEF	; 239
    171c:	96 ff       	sbrs	r25, 6
    171e:	16 e0       	ldi	r17, 0x06	; 6
    1720:	9f 73       	andi	r25, 0x3F	; 63
    1722:	99 2e       	mov	r9, r25
    1724:	85 36       	cpi	r24, 0x65	; 101
    1726:	19 f4       	brne	.+6      	; 0x172e <vfprintf+0x14e>
    1728:	90 64       	ori	r25, 0x40	; 64
    172a:	99 2e       	mov	r9, r25
    172c:	08 c0       	rjmp	.+16     	; 0x173e <vfprintf+0x15e>
    172e:	86 36       	cpi	r24, 0x66	; 102
    1730:	21 f4       	brne	.+8      	; 0x173a <vfprintf+0x15a>
    1732:	39 2f       	mov	r19, r25
    1734:	30 68       	ori	r19, 0x80	; 128
    1736:	93 2e       	mov	r9, r19
    1738:	02 c0       	rjmp	.+4      	; 0x173e <vfprintf+0x15e>
    173a:	11 11       	cpse	r17, r1
    173c:	11 50       	subi	r17, 0x01	; 1
    173e:	97 fe       	sbrs	r9, 7
    1740:	07 c0       	rjmp	.+14     	; 0x1750 <vfprintf+0x170>
    1742:	1c 33       	cpi	r17, 0x3C	; 60
    1744:	50 f4       	brcc	.+20     	; 0x175a <vfprintf+0x17a>
    1746:	44 24       	eor	r4, r4
    1748:	43 94       	inc	r4
    174a:	41 0e       	add	r4, r17
    174c:	27 e0       	ldi	r18, 0x07	; 7
    174e:	0b c0       	rjmp	.+22     	; 0x1766 <vfprintf+0x186>
    1750:	18 30       	cpi	r17, 0x08	; 8
    1752:	38 f0       	brcs	.+14     	; 0x1762 <vfprintf+0x182>
    1754:	27 e0       	ldi	r18, 0x07	; 7
    1756:	17 e0       	ldi	r17, 0x07	; 7
    1758:	05 c0       	rjmp	.+10     	; 0x1764 <vfprintf+0x184>
    175a:	27 e0       	ldi	r18, 0x07	; 7
    175c:	9c e3       	ldi	r25, 0x3C	; 60
    175e:	49 2e       	mov	r4, r25
    1760:	02 c0       	rjmp	.+4      	; 0x1766 <vfprintf+0x186>
    1762:	21 2f       	mov	r18, r17
    1764:	41 2c       	mov	r4, r1
    1766:	56 01       	movw	r10, r12
    1768:	84 e0       	ldi	r24, 0x04	; 4
    176a:	a8 0e       	add	r10, r24
    176c:	b1 1c       	adc	r11, r1
    176e:	f6 01       	movw	r30, r12
    1770:	60 81       	ld	r22, Z
    1772:	71 81       	ldd	r23, Z+1	; 0x01
    1774:	82 81       	ldd	r24, Z+2	; 0x02
    1776:	93 81       	ldd	r25, Z+3	; 0x03
    1778:	04 2d       	mov	r16, r4
    177a:	a3 01       	movw	r20, r6
    177c:	0e 94 9f 0e 	call	0x1d3e	; 0x1d3e <__ftoa_engine>
    1780:	6c 01       	movw	r12, r24
    1782:	f9 81       	ldd	r31, Y+1	; 0x01
    1784:	fc 87       	std	Y+12, r31	; 0x0c
    1786:	f0 ff       	sbrs	r31, 0
    1788:	02 c0       	rjmp	.+4      	; 0x178e <vfprintf+0x1ae>
    178a:	f3 ff       	sbrs	r31, 3
    178c:	06 c0       	rjmp	.+12     	; 0x179a <vfprintf+0x1ba>
    178e:	91 fc       	sbrc	r9, 1
    1790:	06 c0       	rjmp	.+12     	; 0x179e <vfprintf+0x1be>
    1792:	92 fe       	sbrs	r9, 2
    1794:	06 c0       	rjmp	.+12     	; 0x17a2 <vfprintf+0x1c2>
    1796:	00 e2       	ldi	r16, 0x20	; 32
    1798:	05 c0       	rjmp	.+10     	; 0x17a4 <vfprintf+0x1c4>
    179a:	0d e2       	ldi	r16, 0x2D	; 45
    179c:	03 c0       	rjmp	.+6      	; 0x17a4 <vfprintf+0x1c4>
    179e:	0b e2       	ldi	r16, 0x2B	; 43
    17a0:	01 c0       	rjmp	.+2      	; 0x17a4 <vfprintf+0x1c4>
    17a2:	00 e0       	ldi	r16, 0x00	; 0
    17a4:	8c 85       	ldd	r24, Y+12	; 0x0c
    17a6:	8c 70       	andi	r24, 0x0C	; 12
    17a8:	19 f0       	breq	.+6      	; 0x17b0 <vfprintf+0x1d0>
    17aa:	01 11       	cpse	r16, r1
    17ac:	5a c2       	rjmp	.+1204   	; 0x1c62 <vfprintf+0x682>
    17ae:	9b c2       	rjmp	.+1334   	; 0x1ce6 <vfprintf+0x706>
    17b0:	97 fe       	sbrs	r9, 7
    17b2:	10 c0       	rjmp	.+32     	; 0x17d4 <vfprintf+0x1f4>
    17b4:	4c 0c       	add	r4, r12
    17b6:	fc 85       	ldd	r31, Y+12	; 0x0c
    17b8:	f4 ff       	sbrs	r31, 4
    17ba:	04 c0       	rjmp	.+8      	; 0x17c4 <vfprintf+0x1e4>
    17bc:	8a 81       	ldd	r24, Y+2	; 0x02
    17be:	81 33       	cpi	r24, 0x31	; 49
    17c0:	09 f4       	brne	.+2      	; 0x17c4 <vfprintf+0x1e4>
    17c2:	4a 94       	dec	r4
    17c4:	14 14       	cp	r1, r4
    17c6:	74 f5       	brge	.+92     	; 0x1824 <vfprintf+0x244>
    17c8:	28 e0       	ldi	r18, 0x08	; 8
    17ca:	24 15       	cp	r18, r4
    17cc:	78 f5       	brcc	.+94     	; 0x182c <vfprintf+0x24c>
    17ce:	88 e0       	ldi	r24, 0x08	; 8
    17d0:	48 2e       	mov	r4, r24
    17d2:	2c c0       	rjmp	.+88     	; 0x182c <vfprintf+0x24c>
    17d4:	96 fc       	sbrc	r9, 6
    17d6:	2a c0       	rjmp	.+84     	; 0x182c <vfprintf+0x24c>
    17d8:	81 2f       	mov	r24, r17
    17da:	90 e0       	ldi	r25, 0x00	; 0
    17dc:	8c 15       	cp	r24, r12
    17de:	9d 05       	cpc	r25, r13
    17e0:	9c f0       	brlt	.+38     	; 0x1808 <vfprintf+0x228>
    17e2:	3c ef       	ldi	r19, 0xFC	; 252
    17e4:	c3 16       	cp	r12, r19
    17e6:	3f ef       	ldi	r19, 0xFF	; 255
    17e8:	d3 06       	cpc	r13, r19
    17ea:	74 f0       	brlt	.+28     	; 0x1808 <vfprintf+0x228>
    17ec:	89 2d       	mov	r24, r9
    17ee:	80 68       	ori	r24, 0x80	; 128
    17f0:	98 2e       	mov	r9, r24
    17f2:	0a c0       	rjmp	.+20     	; 0x1808 <vfprintf+0x228>
    17f4:	e2 e0       	ldi	r30, 0x02	; 2
    17f6:	f0 e0       	ldi	r31, 0x00	; 0
    17f8:	ec 0f       	add	r30, r28
    17fa:	fd 1f       	adc	r31, r29
    17fc:	e1 0f       	add	r30, r17
    17fe:	f1 1d       	adc	r31, r1
    1800:	80 81       	ld	r24, Z
    1802:	80 33       	cpi	r24, 0x30	; 48
    1804:	19 f4       	brne	.+6      	; 0x180c <vfprintf+0x22c>
    1806:	11 50       	subi	r17, 0x01	; 1
    1808:	11 11       	cpse	r17, r1
    180a:	f4 cf       	rjmp	.-24     	; 0x17f4 <vfprintf+0x214>
    180c:	97 fe       	sbrs	r9, 7
    180e:	0e c0       	rjmp	.+28     	; 0x182c <vfprintf+0x24c>
    1810:	44 24       	eor	r4, r4
    1812:	43 94       	inc	r4
    1814:	41 0e       	add	r4, r17
    1816:	81 2f       	mov	r24, r17
    1818:	90 e0       	ldi	r25, 0x00	; 0
    181a:	c8 16       	cp	r12, r24
    181c:	d9 06       	cpc	r13, r25
    181e:	2c f4       	brge	.+10     	; 0x182a <vfprintf+0x24a>
    1820:	1c 19       	sub	r17, r12
    1822:	04 c0       	rjmp	.+8      	; 0x182c <vfprintf+0x24c>
    1824:	44 24       	eor	r4, r4
    1826:	43 94       	inc	r4
    1828:	01 c0       	rjmp	.+2      	; 0x182c <vfprintf+0x24c>
    182a:	10 e0       	ldi	r17, 0x00	; 0
    182c:	97 fe       	sbrs	r9, 7
    182e:	06 c0       	rjmp	.+12     	; 0x183c <vfprintf+0x25c>
    1830:	1c 14       	cp	r1, r12
    1832:	1d 04       	cpc	r1, r13
    1834:	34 f4       	brge	.+12     	; 0x1842 <vfprintf+0x262>
    1836:	c6 01       	movw	r24, r12
    1838:	01 96       	adiw	r24, 0x01	; 1
    183a:	05 c0       	rjmp	.+10     	; 0x1846 <vfprintf+0x266>
    183c:	85 e0       	ldi	r24, 0x05	; 5
    183e:	90 e0       	ldi	r25, 0x00	; 0
    1840:	02 c0       	rjmp	.+4      	; 0x1846 <vfprintf+0x266>
    1842:	81 e0       	ldi	r24, 0x01	; 1
    1844:	90 e0       	ldi	r25, 0x00	; 0
    1846:	01 11       	cpse	r16, r1
    1848:	01 96       	adiw	r24, 0x01	; 1
    184a:	11 23       	and	r17, r17
    184c:	31 f0       	breq	.+12     	; 0x185a <vfprintf+0x27a>
    184e:	21 2f       	mov	r18, r17
    1850:	30 e0       	ldi	r19, 0x00	; 0
    1852:	2f 5f       	subi	r18, 0xFF	; 255
    1854:	3f 4f       	sbci	r19, 0xFF	; 255
    1856:	82 0f       	add	r24, r18
    1858:	93 1f       	adc	r25, r19
    185a:	25 2d       	mov	r18, r5
    185c:	30 e0       	ldi	r19, 0x00	; 0
    185e:	82 17       	cp	r24, r18
    1860:	93 07       	cpc	r25, r19
    1862:	14 f4       	brge	.+4      	; 0x1868 <vfprintf+0x288>
    1864:	58 1a       	sub	r5, r24
    1866:	01 c0       	rjmp	.+2      	; 0x186a <vfprintf+0x28a>
    1868:	51 2c       	mov	r5, r1
    186a:	89 2d       	mov	r24, r9
    186c:	89 70       	andi	r24, 0x09	; 9
    186e:	49 f4       	brne	.+18     	; 0x1882 <vfprintf+0x2a2>
    1870:	55 20       	and	r5, r5
    1872:	39 f0       	breq	.+14     	; 0x1882 <vfprintf+0x2a2>
    1874:	b7 01       	movw	r22, r14
    1876:	80 e2       	ldi	r24, 0x20	; 32
    1878:	90 e0       	ldi	r25, 0x00	; 0
    187a:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <fputc>
    187e:	5a 94       	dec	r5
    1880:	f7 cf       	rjmp	.-18     	; 0x1870 <vfprintf+0x290>
    1882:	00 23       	and	r16, r16
    1884:	29 f0       	breq	.+10     	; 0x1890 <vfprintf+0x2b0>
    1886:	b7 01       	movw	r22, r14
    1888:	80 2f       	mov	r24, r16
    188a:	90 e0       	ldi	r25, 0x00	; 0
    188c:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <fputc>
    1890:	93 fc       	sbrc	r9, 3
    1892:	09 c0       	rjmp	.+18     	; 0x18a6 <vfprintf+0x2c6>
    1894:	55 20       	and	r5, r5
    1896:	39 f0       	breq	.+14     	; 0x18a6 <vfprintf+0x2c6>
    1898:	b7 01       	movw	r22, r14
    189a:	80 e3       	ldi	r24, 0x30	; 48
    189c:	90 e0       	ldi	r25, 0x00	; 0
    189e:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <fputc>
    18a2:	5a 94       	dec	r5
    18a4:	f7 cf       	rjmp	.-18     	; 0x1894 <vfprintf+0x2b4>
    18a6:	97 fe       	sbrs	r9, 7
    18a8:	4c c0       	rjmp	.+152    	; 0x1942 <vfprintf+0x362>
    18aa:	46 01       	movw	r8, r12
    18ac:	d7 fe       	sbrs	r13, 7
    18ae:	02 c0       	rjmp	.+4      	; 0x18b4 <vfprintf+0x2d4>
    18b0:	81 2c       	mov	r8, r1
    18b2:	91 2c       	mov	r9, r1
    18b4:	c6 01       	movw	r24, r12
    18b6:	88 19       	sub	r24, r8
    18b8:	99 09       	sbc	r25, r9
    18ba:	f3 01       	movw	r30, r6
    18bc:	e8 0f       	add	r30, r24
    18be:	f9 1f       	adc	r31, r25
    18c0:	ed 87       	std	Y+13, r30	; 0x0d
    18c2:	fe 87       	std	Y+14, r31	; 0x0e
    18c4:	96 01       	movw	r18, r12
    18c6:	24 19       	sub	r18, r4
    18c8:	31 09       	sbc	r19, r1
    18ca:	2f 87       	std	Y+15, r18	; 0x0f
    18cc:	38 8b       	std	Y+16, r19	; 0x10
    18ce:	01 2f       	mov	r16, r17
    18d0:	10 e0       	ldi	r17, 0x00	; 0
    18d2:	11 95       	neg	r17
    18d4:	01 95       	neg	r16
    18d6:	11 09       	sbc	r17, r1
    18d8:	3f ef       	ldi	r19, 0xFF	; 255
    18da:	83 16       	cp	r8, r19
    18dc:	93 06       	cpc	r9, r19
    18de:	29 f4       	brne	.+10     	; 0x18ea <vfprintf+0x30a>
    18e0:	b7 01       	movw	r22, r14
    18e2:	8e e2       	ldi	r24, 0x2E	; 46
    18e4:	90 e0       	ldi	r25, 0x00	; 0
    18e6:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <fputc>
    18ea:	c8 14       	cp	r12, r8
    18ec:	d9 04       	cpc	r13, r9
    18ee:	4c f0       	brlt	.+18     	; 0x1902 <vfprintf+0x322>
    18f0:	8f 85       	ldd	r24, Y+15	; 0x0f
    18f2:	98 89       	ldd	r25, Y+16	; 0x10
    18f4:	88 15       	cp	r24, r8
    18f6:	99 05       	cpc	r25, r9
    18f8:	24 f4       	brge	.+8      	; 0x1902 <vfprintf+0x322>
    18fa:	ed 85       	ldd	r30, Y+13	; 0x0d
    18fc:	fe 85       	ldd	r31, Y+14	; 0x0e
    18fe:	81 81       	ldd	r24, Z+1	; 0x01
    1900:	01 c0       	rjmp	.+2      	; 0x1904 <vfprintf+0x324>
    1902:	80 e3       	ldi	r24, 0x30	; 48
    1904:	f1 e0       	ldi	r31, 0x01	; 1
    1906:	8f 1a       	sub	r8, r31
    1908:	91 08       	sbc	r9, r1
    190a:	2d 85       	ldd	r18, Y+13	; 0x0d
    190c:	3e 85       	ldd	r19, Y+14	; 0x0e
    190e:	2f 5f       	subi	r18, 0xFF	; 255
    1910:	3f 4f       	sbci	r19, 0xFF	; 255
    1912:	2d 87       	std	Y+13, r18	; 0x0d
    1914:	3e 87       	std	Y+14, r19	; 0x0e
    1916:	80 16       	cp	r8, r16
    1918:	91 06       	cpc	r9, r17
    191a:	2c f0       	brlt	.+10     	; 0x1926 <vfprintf+0x346>
    191c:	b7 01       	movw	r22, r14
    191e:	90 e0       	ldi	r25, 0x00	; 0
    1920:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <fputc>
    1924:	d9 cf       	rjmp	.-78     	; 0x18d8 <vfprintf+0x2f8>
    1926:	c8 14       	cp	r12, r8
    1928:	d9 04       	cpc	r13, r9
    192a:	41 f4       	brne	.+16     	; 0x193c <vfprintf+0x35c>
    192c:	9a 81       	ldd	r25, Y+2	; 0x02
    192e:	96 33       	cpi	r25, 0x36	; 54
    1930:	20 f4       	brcc	.+8      	; 0x193a <vfprintf+0x35a>
    1932:	95 33       	cpi	r25, 0x35	; 53
    1934:	19 f4       	brne	.+6      	; 0x193c <vfprintf+0x35c>
    1936:	3c 85       	ldd	r19, Y+12	; 0x0c
    1938:	34 ff       	sbrs	r19, 4
    193a:	81 e3       	ldi	r24, 0x31	; 49
    193c:	b7 01       	movw	r22, r14
    193e:	90 e0       	ldi	r25, 0x00	; 0
    1940:	4e c0       	rjmp	.+156    	; 0x19de <vfprintf+0x3fe>
    1942:	8a 81       	ldd	r24, Y+2	; 0x02
    1944:	81 33       	cpi	r24, 0x31	; 49
    1946:	19 f0       	breq	.+6      	; 0x194e <vfprintf+0x36e>
    1948:	9c 85       	ldd	r25, Y+12	; 0x0c
    194a:	9f 7e       	andi	r25, 0xEF	; 239
    194c:	9c 87       	std	Y+12, r25	; 0x0c
    194e:	b7 01       	movw	r22, r14
    1950:	90 e0       	ldi	r25, 0x00	; 0
    1952:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <fputc>
    1956:	11 11       	cpse	r17, r1
    1958:	05 c0       	rjmp	.+10     	; 0x1964 <vfprintf+0x384>
    195a:	94 fc       	sbrc	r9, 4
    195c:	18 c0       	rjmp	.+48     	; 0x198e <vfprintf+0x3ae>
    195e:	85 e6       	ldi	r24, 0x65	; 101
    1960:	90 e0       	ldi	r25, 0x00	; 0
    1962:	17 c0       	rjmp	.+46     	; 0x1992 <vfprintf+0x3b2>
    1964:	b7 01       	movw	r22, r14
    1966:	8e e2       	ldi	r24, 0x2E	; 46
    1968:	90 e0       	ldi	r25, 0x00	; 0
    196a:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <fputc>
    196e:	1e 5f       	subi	r17, 0xFE	; 254
    1970:	82 e0       	ldi	r24, 0x02	; 2
    1972:	01 e0       	ldi	r16, 0x01	; 1
    1974:	08 0f       	add	r16, r24
    1976:	f3 01       	movw	r30, r6
    1978:	e8 0f       	add	r30, r24
    197a:	f1 1d       	adc	r31, r1
    197c:	80 81       	ld	r24, Z
    197e:	b7 01       	movw	r22, r14
    1980:	90 e0       	ldi	r25, 0x00	; 0
    1982:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <fputc>
    1986:	80 2f       	mov	r24, r16
    1988:	01 13       	cpse	r16, r17
    198a:	f3 cf       	rjmp	.-26     	; 0x1972 <vfprintf+0x392>
    198c:	e6 cf       	rjmp	.-52     	; 0x195a <vfprintf+0x37a>
    198e:	85 e4       	ldi	r24, 0x45	; 69
    1990:	90 e0       	ldi	r25, 0x00	; 0
    1992:	b7 01       	movw	r22, r14
    1994:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <fputc>
    1998:	d7 fc       	sbrc	r13, 7
    199a:	06 c0       	rjmp	.+12     	; 0x19a8 <vfprintf+0x3c8>
    199c:	c1 14       	cp	r12, r1
    199e:	d1 04       	cpc	r13, r1
    19a0:	41 f4       	brne	.+16     	; 0x19b2 <vfprintf+0x3d2>
    19a2:	ec 85       	ldd	r30, Y+12	; 0x0c
    19a4:	e4 ff       	sbrs	r30, 4
    19a6:	05 c0       	rjmp	.+10     	; 0x19b2 <vfprintf+0x3d2>
    19a8:	d1 94       	neg	r13
    19aa:	c1 94       	neg	r12
    19ac:	d1 08       	sbc	r13, r1
    19ae:	8d e2       	ldi	r24, 0x2D	; 45
    19b0:	01 c0       	rjmp	.+2      	; 0x19b4 <vfprintf+0x3d4>
    19b2:	8b e2       	ldi	r24, 0x2B	; 43
    19b4:	b7 01       	movw	r22, r14
    19b6:	90 e0       	ldi	r25, 0x00	; 0
    19b8:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <fputc>
    19bc:	80 e3       	ldi	r24, 0x30	; 48
    19be:	2a e0       	ldi	r18, 0x0A	; 10
    19c0:	c2 16       	cp	r12, r18
    19c2:	d1 04       	cpc	r13, r1
    19c4:	2c f0       	brlt	.+10     	; 0x19d0 <vfprintf+0x3f0>
    19c6:	8f 5f       	subi	r24, 0xFF	; 255
    19c8:	fa e0       	ldi	r31, 0x0A	; 10
    19ca:	cf 1a       	sub	r12, r31
    19cc:	d1 08       	sbc	r13, r1
    19ce:	f7 cf       	rjmp	.-18     	; 0x19be <vfprintf+0x3de>
    19d0:	b7 01       	movw	r22, r14
    19d2:	90 e0       	ldi	r25, 0x00	; 0
    19d4:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <fputc>
    19d8:	b7 01       	movw	r22, r14
    19da:	c6 01       	movw	r24, r12
    19dc:	c0 96       	adiw	r24, 0x30	; 48
    19de:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <fputc>
    19e2:	54 c1       	rjmp	.+680    	; 0x1c8c <vfprintf+0x6ac>
    19e4:	83 36       	cpi	r24, 0x63	; 99
    19e6:	31 f0       	breq	.+12     	; 0x19f4 <vfprintf+0x414>
    19e8:	83 37       	cpi	r24, 0x73	; 115
    19ea:	79 f0       	breq	.+30     	; 0x1a0a <vfprintf+0x42a>
    19ec:	83 35       	cpi	r24, 0x53	; 83
    19ee:	09 f0       	breq	.+2      	; 0x19f2 <vfprintf+0x412>
    19f0:	56 c0       	rjmp	.+172    	; 0x1a9e <vfprintf+0x4be>
    19f2:	20 c0       	rjmp	.+64     	; 0x1a34 <vfprintf+0x454>
    19f4:	56 01       	movw	r10, r12
    19f6:	32 e0       	ldi	r19, 0x02	; 2
    19f8:	a3 0e       	add	r10, r19
    19fa:	b1 1c       	adc	r11, r1
    19fc:	f6 01       	movw	r30, r12
    19fe:	80 81       	ld	r24, Z
    1a00:	89 83       	std	Y+1, r24	; 0x01
    1a02:	01 e0       	ldi	r16, 0x01	; 1
    1a04:	10 e0       	ldi	r17, 0x00	; 0
    1a06:	63 01       	movw	r12, r6
    1a08:	12 c0       	rjmp	.+36     	; 0x1a2e <vfprintf+0x44e>
    1a0a:	56 01       	movw	r10, r12
    1a0c:	f2 e0       	ldi	r31, 0x02	; 2
    1a0e:	af 0e       	add	r10, r31
    1a10:	b1 1c       	adc	r11, r1
    1a12:	f6 01       	movw	r30, r12
    1a14:	c0 80       	ld	r12, Z
    1a16:	d1 80       	ldd	r13, Z+1	; 0x01
    1a18:	96 fe       	sbrs	r9, 6
    1a1a:	03 c0       	rjmp	.+6      	; 0x1a22 <vfprintf+0x442>
    1a1c:	61 2f       	mov	r22, r17
    1a1e:	70 e0       	ldi	r23, 0x00	; 0
    1a20:	02 c0       	rjmp	.+4      	; 0x1a26 <vfprintf+0x446>
    1a22:	6f ef       	ldi	r22, 0xFF	; 255
    1a24:	7f ef       	ldi	r23, 0xFF	; 255
    1a26:	c6 01       	movw	r24, r12
    1a28:	0e 94 82 0f 	call	0x1f04	; 0x1f04 <strnlen>
    1a2c:	8c 01       	movw	r16, r24
    1a2e:	f9 2d       	mov	r31, r9
    1a30:	ff 77       	andi	r31, 0x7F	; 127
    1a32:	14 c0       	rjmp	.+40     	; 0x1a5c <vfprintf+0x47c>
    1a34:	56 01       	movw	r10, r12
    1a36:	22 e0       	ldi	r18, 0x02	; 2
    1a38:	a2 0e       	add	r10, r18
    1a3a:	b1 1c       	adc	r11, r1
    1a3c:	f6 01       	movw	r30, r12
    1a3e:	c0 80       	ld	r12, Z
    1a40:	d1 80       	ldd	r13, Z+1	; 0x01
    1a42:	96 fe       	sbrs	r9, 6
    1a44:	03 c0       	rjmp	.+6      	; 0x1a4c <vfprintf+0x46c>
    1a46:	61 2f       	mov	r22, r17
    1a48:	70 e0       	ldi	r23, 0x00	; 0
    1a4a:	02 c0       	rjmp	.+4      	; 0x1a50 <vfprintf+0x470>
    1a4c:	6f ef       	ldi	r22, 0xFF	; 255
    1a4e:	7f ef       	ldi	r23, 0xFF	; 255
    1a50:	c6 01       	movw	r24, r12
    1a52:	0e 94 77 0f 	call	0x1eee	; 0x1eee <strnlen_P>
    1a56:	8c 01       	movw	r16, r24
    1a58:	f9 2d       	mov	r31, r9
    1a5a:	f0 68       	ori	r31, 0x80	; 128
    1a5c:	9f 2e       	mov	r9, r31
    1a5e:	f3 fd       	sbrc	r31, 3
    1a60:	1a c0       	rjmp	.+52     	; 0x1a96 <vfprintf+0x4b6>
    1a62:	85 2d       	mov	r24, r5
    1a64:	90 e0       	ldi	r25, 0x00	; 0
    1a66:	08 17       	cp	r16, r24
    1a68:	19 07       	cpc	r17, r25
    1a6a:	a8 f4       	brcc	.+42     	; 0x1a96 <vfprintf+0x4b6>
    1a6c:	b7 01       	movw	r22, r14
    1a6e:	80 e2       	ldi	r24, 0x20	; 32
    1a70:	90 e0       	ldi	r25, 0x00	; 0
    1a72:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <fputc>
    1a76:	5a 94       	dec	r5
    1a78:	f4 cf       	rjmp	.-24     	; 0x1a62 <vfprintf+0x482>
    1a7a:	f6 01       	movw	r30, r12
    1a7c:	97 fc       	sbrc	r9, 7
    1a7e:	85 91       	lpm	r24, Z+
    1a80:	97 fe       	sbrs	r9, 7
    1a82:	81 91       	ld	r24, Z+
    1a84:	6f 01       	movw	r12, r30
    1a86:	b7 01       	movw	r22, r14
    1a88:	90 e0       	ldi	r25, 0x00	; 0
    1a8a:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <fputc>
    1a8e:	51 10       	cpse	r5, r1
    1a90:	5a 94       	dec	r5
    1a92:	01 50       	subi	r16, 0x01	; 1
    1a94:	11 09       	sbc	r17, r1
    1a96:	01 15       	cp	r16, r1
    1a98:	11 05       	cpc	r17, r1
    1a9a:	79 f7       	brne	.-34     	; 0x1a7a <vfprintf+0x49a>
    1a9c:	f7 c0       	rjmp	.+494    	; 0x1c8c <vfprintf+0x6ac>
    1a9e:	84 36       	cpi	r24, 0x64	; 100
    1aa0:	11 f0       	breq	.+4      	; 0x1aa6 <vfprintf+0x4c6>
    1aa2:	89 36       	cpi	r24, 0x69	; 105
    1aa4:	61 f5       	brne	.+88     	; 0x1afe <vfprintf+0x51e>
    1aa6:	56 01       	movw	r10, r12
    1aa8:	97 fe       	sbrs	r9, 7
    1aaa:	09 c0       	rjmp	.+18     	; 0x1abe <vfprintf+0x4de>
    1aac:	24 e0       	ldi	r18, 0x04	; 4
    1aae:	a2 0e       	add	r10, r18
    1ab0:	b1 1c       	adc	r11, r1
    1ab2:	f6 01       	movw	r30, r12
    1ab4:	60 81       	ld	r22, Z
    1ab6:	71 81       	ldd	r23, Z+1	; 0x01
    1ab8:	82 81       	ldd	r24, Z+2	; 0x02
    1aba:	93 81       	ldd	r25, Z+3	; 0x03
    1abc:	0a c0       	rjmp	.+20     	; 0x1ad2 <vfprintf+0x4f2>
    1abe:	f2 e0       	ldi	r31, 0x02	; 2
    1ac0:	af 0e       	add	r10, r31
    1ac2:	b1 1c       	adc	r11, r1
    1ac4:	f6 01       	movw	r30, r12
    1ac6:	60 81       	ld	r22, Z
    1ac8:	71 81       	ldd	r23, Z+1	; 0x01
    1aca:	07 2e       	mov	r0, r23
    1acc:	00 0c       	add	r0, r0
    1ace:	88 0b       	sbc	r24, r24
    1ad0:	99 0b       	sbc	r25, r25
    1ad2:	f9 2d       	mov	r31, r9
    1ad4:	ff 76       	andi	r31, 0x6F	; 111
    1ad6:	9f 2e       	mov	r9, r31
    1ad8:	97 ff       	sbrs	r25, 7
    1ada:	09 c0       	rjmp	.+18     	; 0x1aee <vfprintf+0x50e>
    1adc:	90 95       	com	r25
    1ade:	80 95       	com	r24
    1ae0:	70 95       	com	r23
    1ae2:	61 95       	neg	r22
    1ae4:	7f 4f       	sbci	r23, 0xFF	; 255
    1ae6:	8f 4f       	sbci	r24, 0xFF	; 255
    1ae8:	9f 4f       	sbci	r25, 0xFF	; 255
    1aea:	f0 68       	ori	r31, 0x80	; 128
    1aec:	9f 2e       	mov	r9, r31
    1aee:	2a e0       	ldi	r18, 0x0A	; 10
    1af0:	30 e0       	ldi	r19, 0x00	; 0
    1af2:	a3 01       	movw	r20, r6
    1af4:	0e 94 0d 10 	call	0x201a	; 0x201a <__ultoa_invert>
    1af8:	c8 2e       	mov	r12, r24
    1afa:	c6 18       	sub	r12, r6
    1afc:	3f c0       	rjmp	.+126    	; 0x1b7c <vfprintf+0x59c>
    1afe:	09 2d       	mov	r16, r9
    1b00:	85 37       	cpi	r24, 0x75	; 117
    1b02:	21 f4       	brne	.+8      	; 0x1b0c <vfprintf+0x52c>
    1b04:	0f 7e       	andi	r16, 0xEF	; 239
    1b06:	2a e0       	ldi	r18, 0x0A	; 10
    1b08:	30 e0       	ldi	r19, 0x00	; 0
    1b0a:	1d c0       	rjmp	.+58     	; 0x1b46 <vfprintf+0x566>
    1b0c:	09 7f       	andi	r16, 0xF9	; 249
    1b0e:	8f 36       	cpi	r24, 0x6F	; 111
    1b10:	91 f0       	breq	.+36     	; 0x1b36 <vfprintf+0x556>
    1b12:	18 f4       	brcc	.+6      	; 0x1b1a <vfprintf+0x53a>
    1b14:	88 35       	cpi	r24, 0x58	; 88
    1b16:	59 f0       	breq	.+22     	; 0x1b2e <vfprintf+0x54e>
    1b18:	c3 c0       	rjmp	.+390    	; 0x1ca0 <vfprintf+0x6c0>
    1b1a:	80 37       	cpi	r24, 0x70	; 112
    1b1c:	19 f0       	breq	.+6      	; 0x1b24 <vfprintf+0x544>
    1b1e:	88 37       	cpi	r24, 0x78	; 120
    1b20:	11 f0       	breq	.+4      	; 0x1b26 <vfprintf+0x546>
    1b22:	be c0       	rjmp	.+380    	; 0x1ca0 <vfprintf+0x6c0>
    1b24:	00 61       	ori	r16, 0x10	; 16
    1b26:	04 ff       	sbrs	r16, 4
    1b28:	09 c0       	rjmp	.+18     	; 0x1b3c <vfprintf+0x55c>
    1b2a:	04 60       	ori	r16, 0x04	; 4
    1b2c:	07 c0       	rjmp	.+14     	; 0x1b3c <vfprintf+0x55c>
    1b2e:	94 fe       	sbrs	r9, 4
    1b30:	08 c0       	rjmp	.+16     	; 0x1b42 <vfprintf+0x562>
    1b32:	06 60       	ori	r16, 0x06	; 6
    1b34:	06 c0       	rjmp	.+12     	; 0x1b42 <vfprintf+0x562>
    1b36:	28 e0       	ldi	r18, 0x08	; 8
    1b38:	30 e0       	ldi	r19, 0x00	; 0
    1b3a:	05 c0       	rjmp	.+10     	; 0x1b46 <vfprintf+0x566>
    1b3c:	20 e1       	ldi	r18, 0x10	; 16
    1b3e:	30 e0       	ldi	r19, 0x00	; 0
    1b40:	02 c0       	rjmp	.+4      	; 0x1b46 <vfprintf+0x566>
    1b42:	20 e1       	ldi	r18, 0x10	; 16
    1b44:	32 e0       	ldi	r19, 0x02	; 2
    1b46:	56 01       	movw	r10, r12
    1b48:	07 ff       	sbrs	r16, 7
    1b4a:	09 c0       	rjmp	.+18     	; 0x1b5e <vfprintf+0x57e>
    1b4c:	84 e0       	ldi	r24, 0x04	; 4
    1b4e:	a8 0e       	add	r10, r24
    1b50:	b1 1c       	adc	r11, r1
    1b52:	f6 01       	movw	r30, r12
    1b54:	60 81       	ld	r22, Z
    1b56:	71 81       	ldd	r23, Z+1	; 0x01
    1b58:	82 81       	ldd	r24, Z+2	; 0x02
    1b5a:	93 81       	ldd	r25, Z+3	; 0x03
    1b5c:	08 c0       	rjmp	.+16     	; 0x1b6e <vfprintf+0x58e>
    1b5e:	f2 e0       	ldi	r31, 0x02	; 2
    1b60:	af 0e       	add	r10, r31
    1b62:	b1 1c       	adc	r11, r1
    1b64:	f6 01       	movw	r30, r12
    1b66:	60 81       	ld	r22, Z
    1b68:	71 81       	ldd	r23, Z+1	; 0x01
    1b6a:	80 e0       	ldi	r24, 0x00	; 0
    1b6c:	90 e0       	ldi	r25, 0x00	; 0
    1b6e:	a3 01       	movw	r20, r6
    1b70:	0e 94 0d 10 	call	0x201a	; 0x201a <__ultoa_invert>
    1b74:	c8 2e       	mov	r12, r24
    1b76:	c6 18       	sub	r12, r6
    1b78:	0f 77       	andi	r16, 0x7F	; 127
    1b7a:	90 2e       	mov	r9, r16
    1b7c:	96 fe       	sbrs	r9, 6
    1b7e:	0b c0       	rjmp	.+22     	; 0x1b96 <vfprintf+0x5b6>
    1b80:	09 2d       	mov	r16, r9
    1b82:	0e 7f       	andi	r16, 0xFE	; 254
    1b84:	c1 16       	cp	r12, r17
    1b86:	50 f4       	brcc	.+20     	; 0x1b9c <vfprintf+0x5bc>
    1b88:	94 fe       	sbrs	r9, 4
    1b8a:	0a c0       	rjmp	.+20     	; 0x1ba0 <vfprintf+0x5c0>
    1b8c:	92 fc       	sbrc	r9, 2
    1b8e:	08 c0       	rjmp	.+16     	; 0x1ba0 <vfprintf+0x5c0>
    1b90:	09 2d       	mov	r16, r9
    1b92:	0e 7e       	andi	r16, 0xEE	; 238
    1b94:	05 c0       	rjmp	.+10     	; 0x1ba0 <vfprintf+0x5c0>
    1b96:	dc 2c       	mov	r13, r12
    1b98:	09 2d       	mov	r16, r9
    1b9a:	03 c0       	rjmp	.+6      	; 0x1ba2 <vfprintf+0x5c2>
    1b9c:	dc 2c       	mov	r13, r12
    1b9e:	01 c0       	rjmp	.+2      	; 0x1ba2 <vfprintf+0x5c2>
    1ba0:	d1 2e       	mov	r13, r17
    1ba2:	04 ff       	sbrs	r16, 4
    1ba4:	0d c0       	rjmp	.+26     	; 0x1bc0 <vfprintf+0x5e0>
    1ba6:	fe 01       	movw	r30, r28
    1ba8:	ec 0d       	add	r30, r12
    1baa:	f1 1d       	adc	r31, r1
    1bac:	80 81       	ld	r24, Z
    1bae:	80 33       	cpi	r24, 0x30	; 48
    1bb0:	11 f4       	brne	.+4      	; 0x1bb6 <vfprintf+0x5d6>
    1bb2:	09 7e       	andi	r16, 0xE9	; 233
    1bb4:	09 c0       	rjmp	.+18     	; 0x1bc8 <vfprintf+0x5e8>
    1bb6:	02 ff       	sbrs	r16, 2
    1bb8:	06 c0       	rjmp	.+12     	; 0x1bc6 <vfprintf+0x5e6>
    1bba:	d3 94       	inc	r13
    1bbc:	d3 94       	inc	r13
    1bbe:	04 c0       	rjmp	.+8      	; 0x1bc8 <vfprintf+0x5e8>
    1bc0:	80 2f       	mov	r24, r16
    1bc2:	86 78       	andi	r24, 0x86	; 134
    1bc4:	09 f0       	breq	.+2      	; 0x1bc8 <vfprintf+0x5e8>
    1bc6:	d3 94       	inc	r13
    1bc8:	03 fd       	sbrc	r16, 3
    1bca:	11 c0       	rjmp	.+34     	; 0x1bee <vfprintf+0x60e>
    1bcc:	00 ff       	sbrs	r16, 0
    1bce:	06 c0       	rjmp	.+12     	; 0x1bdc <vfprintf+0x5fc>
    1bd0:	1c 2d       	mov	r17, r12
    1bd2:	d5 14       	cp	r13, r5
    1bd4:	80 f4       	brcc	.+32     	; 0x1bf6 <vfprintf+0x616>
    1bd6:	15 0d       	add	r17, r5
    1bd8:	1d 19       	sub	r17, r13
    1bda:	0d c0       	rjmp	.+26     	; 0x1bf6 <vfprintf+0x616>
    1bdc:	d5 14       	cp	r13, r5
    1bde:	58 f4       	brcc	.+22     	; 0x1bf6 <vfprintf+0x616>
    1be0:	b7 01       	movw	r22, r14
    1be2:	80 e2       	ldi	r24, 0x20	; 32
    1be4:	90 e0       	ldi	r25, 0x00	; 0
    1be6:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <fputc>
    1bea:	d3 94       	inc	r13
    1bec:	f7 cf       	rjmp	.-18     	; 0x1bdc <vfprintf+0x5fc>
    1bee:	d5 14       	cp	r13, r5
    1bf0:	10 f4       	brcc	.+4      	; 0x1bf6 <vfprintf+0x616>
    1bf2:	5d 18       	sub	r5, r13
    1bf4:	01 c0       	rjmp	.+2      	; 0x1bf8 <vfprintf+0x618>
    1bf6:	51 2c       	mov	r5, r1
    1bf8:	04 ff       	sbrs	r16, 4
    1bfa:	10 c0       	rjmp	.+32     	; 0x1c1c <vfprintf+0x63c>
    1bfc:	b7 01       	movw	r22, r14
    1bfe:	80 e3       	ldi	r24, 0x30	; 48
    1c00:	90 e0       	ldi	r25, 0x00	; 0
    1c02:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <fputc>
    1c06:	02 ff       	sbrs	r16, 2
    1c08:	17 c0       	rjmp	.+46     	; 0x1c38 <vfprintf+0x658>
    1c0a:	01 fd       	sbrc	r16, 1
    1c0c:	03 c0       	rjmp	.+6      	; 0x1c14 <vfprintf+0x634>
    1c0e:	88 e7       	ldi	r24, 0x78	; 120
    1c10:	90 e0       	ldi	r25, 0x00	; 0
    1c12:	02 c0       	rjmp	.+4      	; 0x1c18 <vfprintf+0x638>
    1c14:	88 e5       	ldi	r24, 0x58	; 88
    1c16:	90 e0       	ldi	r25, 0x00	; 0
    1c18:	b7 01       	movw	r22, r14
    1c1a:	0c c0       	rjmp	.+24     	; 0x1c34 <vfprintf+0x654>
    1c1c:	80 2f       	mov	r24, r16
    1c1e:	86 78       	andi	r24, 0x86	; 134
    1c20:	59 f0       	breq	.+22     	; 0x1c38 <vfprintf+0x658>
    1c22:	01 ff       	sbrs	r16, 1
    1c24:	02 c0       	rjmp	.+4      	; 0x1c2a <vfprintf+0x64a>
    1c26:	8b e2       	ldi	r24, 0x2B	; 43
    1c28:	01 c0       	rjmp	.+2      	; 0x1c2c <vfprintf+0x64c>
    1c2a:	80 e2       	ldi	r24, 0x20	; 32
    1c2c:	07 fd       	sbrc	r16, 7
    1c2e:	8d e2       	ldi	r24, 0x2D	; 45
    1c30:	b7 01       	movw	r22, r14
    1c32:	90 e0       	ldi	r25, 0x00	; 0
    1c34:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <fputc>
    1c38:	c1 16       	cp	r12, r17
    1c3a:	38 f4       	brcc	.+14     	; 0x1c4a <vfprintf+0x66a>
    1c3c:	b7 01       	movw	r22, r14
    1c3e:	80 e3       	ldi	r24, 0x30	; 48
    1c40:	90 e0       	ldi	r25, 0x00	; 0
    1c42:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <fputc>
    1c46:	11 50       	subi	r17, 0x01	; 1
    1c48:	f7 cf       	rjmp	.-18     	; 0x1c38 <vfprintf+0x658>
    1c4a:	ca 94       	dec	r12
    1c4c:	f3 01       	movw	r30, r6
    1c4e:	ec 0d       	add	r30, r12
    1c50:	f1 1d       	adc	r31, r1
    1c52:	80 81       	ld	r24, Z
    1c54:	b7 01       	movw	r22, r14
    1c56:	90 e0       	ldi	r25, 0x00	; 0
    1c58:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <fputc>
    1c5c:	c1 10       	cpse	r12, r1
    1c5e:	f5 cf       	rjmp	.-22     	; 0x1c4a <vfprintf+0x66a>
    1c60:	15 c0       	rjmp	.+42     	; 0x1c8c <vfprintf+0x6ac>
    1c62:	f4 e0       	ldi	r31, 0x04	; 4
    1c64:	f5 15       	cp	r31, r5
    1c66:	60 f5       	brcc	.+88     	; 0x1cc0 <vfprintf+0x6e0>
    1c68:	84 e0       	ldi	r24, 0x04	; 4
    1c6a:	58 1a       	sub	r5, r24
    1c6c:	93 fe       	sbrs	r9, 3
    1c6e:	1f c0       	rjmp	.+62     	; 0x1cae <vfprintf+0x6ce>
    1c70:	01 11       	cpse	r16, r1
    1c72:	27 c0       	rjmp	.+78     	; 0x1cc2 <vfprintf+0x6e2>
    1c74:	2c 85       	ldd	r18, Y+12	; 0x0c
    1c76:	23 ff       	sbrs	r18, 3
    1c78:	2a c0       	rjmp	.+84     	; 0x1cce <vfprintf+0x6ee>
    1c7a:	06 e8       	ldi	r16, 0x86	; 134
    1c7c:	12 e0       	ldi	r17, 0x02	; 2
    1c7e:	39 2d       	mov	r19, r9
    1c80:	30 71       	andi	r19, 0x10	; 16
    1c82:	93 2e       	mov	r9, r19
    1c84:	f8 01       	movw	r30, r16
    1c86:	84 91       	lpm	r24, Z
    1c88:	81 11       	cpse	r24, r1
    1c8a:	24 c0       	rjmp	.+72     	; 0x1cd4 <vfprintf+0x6f4>
    1c8c:	55 20       	and	r5, r5
    1c8e:	09 f4       	brne	.+2      	; 0x1c92 <vfprintf+0x6b2>
    1c90:	e4 cc       	rjmp	.-1592   	; 0x165a <vfprintf+0x7a>
    1c92:	b7 01       	movw	r22, r14
    1c94:	80 e2       	ldi	r24, 0x20	; 32
    1c96:	90 e0       	ldi	r25, 0x00	; 0
    1c98:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <fputc>
    1c9c:	5a 94       	dec	r5
    1c9e:	f6 cf       	rjmp	.-20     	; 0x1c8c <vfprintf+0x6ac>
    1ca0:	f7 01       	movw	r30, r14
    1ca2:	86 81       	ldd	r24, Z+6	; 0x06
    1ca4:	97 81       	ldd	r25, Z+7	; 0x07
    1ca6:	26 c0       	rjmp	.+76     	; 0x1cf4 <vfprintf+0x714>
    1ca8:	8f ef       	ldi	r24, 0xFF	; 255
    1caa:	9f ef       	ldi	r25, 0xFF	; 255
    1cac:	23 c0       	rjmp	.+70     	; 0x1cf4 <vfprintf+0x714>
    1cae:	b7 01       	movw	r22, r14
    1cb0:	80 e2       	ldi	r24, 0x20	; 32
    1cb2:	90 e0       	ldi	r25, 0x00	; 0
    1cb4:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <fputc>
    1cb8:	5a 94       	dec	r5
    1cba:	51 10       	cpse	r5, r1
    1cbc:	f8 cf       	rjmp	.-16     	; 0x1cae <vfprintf+0x6ce>
    1cbe:	d8 cf       	rjmp	.-80     	; 0x1c70 <vfprintf+0x690>
    1cc0:	51 2c       	mov	r5, r1
    1cc2:	b7 01       	movw	r22, r14
    1cc4:	80 2f       	mov	r24, r16
    1cc6:	90 e0       	ldi	r25, 0x00	; 0
    1cc8:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <fputc>
    1ccc:	d3 cf       	rjmp	.-90     	; 0x1c74 <vfprintf+0x694>
    1cce:	0a e8       	ldi	r16, 0x8A	; 138
    1cd0:	12 e0       	ldi	r17, 0x02	; 2
    1cd2:	d5 cf       	rjmp	.-86     	; 0x1c7e <vfprintf+0x69e>
    1cd4:	91 10       	cpse	r9, r1
    1cd6:	80 52       	subi	r24, 0x20	; 32
    1cd8:	b7 01       	movw	r22, r14
    1cda:	90 e0       	ldi	r25, 0x00	; 0
    1cdc:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <fputc>
    1ce0:	0f 5f       	subi	r16, 0xFF	; 255
    1ce2:	1f 4f       	sbci	r17, 0xFF	; 255
    1ce4:	cf cf       	rjmp	.-98     	; 0x1c84 <vfprintf+0x6a4>
    1ce6:	23 e0       	ldi	r18, 0x03	; 3
    1ce8:	25 15       	cp	r18, r5
    1cea:	10 f4       	brcc	.+4      	; 0x1cf0 <vfprintf+0x710>
    1cec:	83 e0       	ldi	r24, 0x03	; 3
    1cee:	bd cf       	rjmp	.-134    	; 0x1c6a <vfprintf+0x68a>
    1cf0:	51 2c       	mov	r5, r1
    1cf2:	c0 cf       	rjmp	.-128    	; 0x1c74 <vfprintf+0x694>
    1cf4:	60 96       	adiw	r28, 0x10	; 16
    1cf6:	cd bf       	out	0x3d, r28	; 61
    1cf8:	de bf       	out	0x3e, r29	; 62
    1cfa:	df 91       	pop	r29
    1cfc:	cf 91       	pop	r28
    1cfe:	1f 91       	pop	r17
    1d00:	0f 91       	pop	r16
    1d02:	ff 90       	pop	r15
    1d04:	ef 90       	pop	r14
    1d06:	df 90       	pop	r13
    1d08:	cf 90       	pop	r12
    1d0a:	bf 90       	pop	r11
    1d0c:	af 90       	pop	r10
    1d0e:	9f 90       	pop	r9
    1d10:	8f 90       	pop	r8
    1d12:	7f 90       	pop	r7
    1d14:	6f 90       	pop	r6
    1d16:	5f 90       	pop	r5
    1d18:	4f 90       	pop	r4
    1d1a:	3f 90       	pop	r3
    1d1c:	2f 90       	pop	r2
    1d1e:	08 95       	ret

00001d20 <__umulhisi3>:
    1d20:	a2 9f       	mul	r26, r18
    1d22:	b0 01       	movw	r22, r0
    1d24:	b3 9f       	mul	r27, r19
    1d26:	c0 01       	movw	r24, r0
    1d28:	a3 9f       	mul	r26, r19
    1d2a:	70 0d       	add	r23, r0
    1d2c:	81 1d       	adc	r24, r1
    1d2e:	11 24       	eor	r1, r1
    1d30:	91 1d       	adc	r25, r1
    1d32:	b2 9f       	mul	r27, r18
    1d34:	70 0d       	add	r23, r0
    1d36:	81 1d       	adc	r24, r1
    1d38:	11 24       	eor	r1, r1
    1d3a:	91 1d       	adc	r25, r1
    1d3c:	08 95       	ret

00001d3e <__ftoa_engine>:
    1d3e:	28 30       	cpi	r18, 0x08	; 8
    1d40:	08 f0       	brcs	.+2      	; 0x1d44 <__ftoa_engine+0x6>
    1d42:	27 e0       	ldi	r18, 0x07	; 7
    1d44:	33 27       	eor	r19, r19
    1d46:	da 01       	movw	r26, r20
    1d48:	99 0f       	add	r25, r25
    1d4a:	31 1d       	adc	r19, r1
    1d4c:	87 fd       	sbrc	r24, 7
    1d4e:	91 60       	ori	r25, 0x01	; 1
    1d50:	00 96       	adiw	r24, 0x00	; 0
    1d52:	61 05       	cpc	r22, r1
    1d54:	71 05       	cpc	r23, r1
    1d56:	39 f4       	brne	.+14     	; 0x1d66 <__ftoa_engine+0x28>
    1d58:	32 60       	ori	r19, 0x02	; 2
    1d5a:	2e 5f       	subi	r18, 0xFE	; 254
    1d5c:	3d 93       	st	X+, r19
    1d5e:	30 e3       	ldi	r19, 0x30	; 48
    1d60:	2a 95       	dec	r18
    1d62:	e1 f7       	brne	.-8      	; 0x1d5c <__ftoa_engine+0x1e>
    1d64:	08 95       	ret
    1d66:	9f 3f       	cpi	r25, 0xFF	; 255
    1d68:	30 f0       	brcs	.+12     	; 0x1d76 <__ftoa_engine+0x38>
    1d6a:	80 38       	cpi	r24, 0x80	; 128
    1d6c:	71 05       	cpc	r23, r1
    1d6e:	61 05       	cpc	r22, r1
    1d70:	09 f0       	breq	.+2      	; 0x1d74 <__ftoa_engine+0x36>
    1d72:	3c 5f       	subi	r19, 0xFC	; 252
    1d74:	3c 5f       	subi	r19, 0xFC	; 252
    1d76:	3d 93       	st	X+, r19
    1d78:	91 30       	cpi	r25, 0x01	; 1
    1d7a:	08 f0       	brcs	.+2      	; 0x1d7e <__ftoa_engine+0x40>
    1d7c:	80 68       	ori	r24, 0x80	; 128
    1d7e:	91 1d       	adc	r25, r1
    1d80:	df 93       	push	r29
    1d82:	cf 93       	push	r28
    1d84:	1f 93       	push	r17
    1d86:	0f 93       	push	r16
    1d88:	ff 92       	push	r15
    1d8a:	ef 92       	push	r14
    1d8c:	19 2f       	mov	r17, r25
    1d8e:	98 7f       	andi	r25, 0xF8	; 248
    1d90:	96 95       	lsr	r25
    1d92:	e9 2f       	mov	r30, r25
    1d94:	96 95       	lsr	r25
    1d96:	96 95       	lsr	r25
    1d98:	e9 0f       	add	r30, r25
    1d9a:	ff 27       	eor	r31, r31
    1d9c:	e8 51       	subi	r30, 0x18	; 24
    1d9e:	fd 4f       	sbci	r31, 0xFD	; 253
    1da0:	99 27       	eor	r25, r25
    1da2:	33 27       	eor	r19, r19
    1da4:	ee 24       	eor	r14, r14
    1da6:	ff 24       	eor	r15, r15
    1da8:	a7 01       	movw	r20, r14
    1daa:	e7 01       	movw	r28, r14
    1dac:	05 90       	lpm	r0, Z+
    1dae:	08 94       	sec
    1db0:	07 94       	ror	r0
    1db2:	28 f4       	brcc	.+10     	; 0x1dbe <__ftoa_engine+0x80>
    1db4:	36 0f       	add	r19, r22
    1db6:	e7 1e       	adc	r14, r23
    1db8:	f8 1e       	adc	r15, r24
    1dba:	49 1f       	adc	r20, r25
    1dbc:	51 1d       	adc	r21, r1
    1dbe:	66 0f       	add	r22, r22
    1dc0:	77 1f       	adc	r23, r23
    1dc2:	88 1f       	adc	r24, r24
    1dc4:	99 1f       	adc	r25, r25
    1dc6:	06 94       	lsr	r0
    1dc8:	a1 f7       	brne	.-24     	; 0x1db2 <__ftoa_engine+0x74>
    1dca:	05 90       	lpm	r0, Z+
    1dcc:	07 94       	ror	r0
    1dce:	28 f4       	brcc	.+10     	; 0x1dda <__ftoa_engine+0x9c>
    1dd0:	e7 0e       	add	r14, r23
    1dd2:	f8 1e       	adc	r15, r24
    1dd4:	49 1f       	adc	r20, r25
    1dd6:	56 1f       	adc	r21, r22
    1dd8:	c1 1d       	adc	r28, r1
    1dda:	77 0f       	add	r23, r23
    1ddc:	88 1f       	adc	r24, r24
    1dde:	99 1f       	adc	r25, r25
    1de0:	66 1f       	adc	r22, r22
    1de2:	06 94       	lsr	r0
    1de4:	a1 f7       	brne	.-24     	; 0x1dce <__ftoa_engine+0x90>
    1de6:	05 90       	lpm	r0, Z+
    1de8:	07 94       	ror	r0
    1dea:	28 f4       	brcc	.+10     	; 0x1df6 <__ftoa_engine+0xb8>
    1dec:	f8 0e       	add	r15, r24
    1dee:	49 1f       	adc	r20, r25
    1df0:	56 1f       	adc	r21, r22
    1df2:	c7 1f       	adc	r28, r23
    1df4:	d1 1d       	adc	r29, r1
    1df6:	88 0f       	add	r24, r24
    1df8:	99 1f       	adc	r25, r25
    1dfa:	66 1f       	adc	r22, r22
    1dfc:	77 1f       	adc	r23, r23
    1dfe:	06 94       	lsr	r0
    1e00:	a1 f7       	brne	.-24     	; 0x1dea <__ftoa_engine+0xac>
    1e02:	05 90       	lpm	r0, Z+
    1e04:	07 94       	ror	r0
    1e06:	20 f4       	brcc	.+8      	; 0x1e10 <__ftoa_engine+0xd2>
    1e08:	49 0f       	add	r20, r25
    1e0a:	56 1f       	adc	r21, r22
    1e0c:	c7 1f       	adc	r28, r23
    1e0e:	d8 1f       	adc	r29, r24
    1e10:	99 0f       	add	r25, r25
    1e12:	66 1f       	adc	r22, r22
    1e14:	77 1f       	adc	r23, r23
    1e16:	88 1f       	adc	r24, r24
    1e18:	06 94       	lsr	r0
    1e1a:	a9 f7       	brne	.-22     	; 0x1e06 <__ftoa_engine+0xc8>
    1e1c:	84 91       	lpm	r24, Z
    1e1e:	10 95       	com	r17
    1e20:	17 70       	andi	r17, 0x07	; 7
    1e22:	41 f0       	breq	.+16     	; 0x1e34 <__ftoa_engine+0xf6>
    1e24:	d6 95       	lsr	r29
    1e26:	c7 95       	ror	r28
    1e28:	57 95       	ror	r21
    1e2a:	47 95       	ror	r20
    1e2c:	f7 94       	ror	r15
    1e2e:	e7 94       	ror	r14
    1e30:	1a 95       	dec	r17
    1e32:	c1 f7       	brne	.-16     	; 0x1e24 <__ftoa_engine+0xe6>
    1e34:	ee e8       	ldi	r30, 0x8E	; 142
    1e36:	f2 e0       	ldi	r31, 0x02	; 2
    1e38:	68 94       	set
    1e3a:	15 90       	lpm	r1, Z+
    1e3c:	15 91       	lpm	r17, Z+
    1e3e:	35 91       	lpm	r19, Z+
    1e40:	65 91       	lpm	r22, Z+
    1e42:	95 91       	lpm	r25, Z+
    1e44:	05 90       	lpm	r0, Z+
    1e46:	7f e2       	ldi	r23, 0x2F	; 47
    1e48:	73 95       	inc	r23
    1e4a:	e1 18       	sub	r14, r1
    1e4c:	f1 0a       	sbc	r15, r17
    1e4e:	43 0b       	sbc	r20, r19
    1e50:	56 0b       	sbc	r21, r22
    1e52:	c9 0b       	sbc	r28, r25
    1e54:	d0 09       	sbc	r29, r0
    1e56:	c0 f7       	brcc	.-16     	; 0x1e48 <__ftoa_engine+0x10a>
    1e58:	e1 0c       	add	r14, r1
    1e5a:	f1 1e       	adc	r15, r17
    1e5c:	43 1f       	adc	r20, r19
    1e5e:	56 1f       	adc	r21, r22
    1e60:	c9 1f       	adc	r28, r25
    1e62:	d0 1d       	adc	r29, r0
    1e64:	7e f4       	brtc	.+30     	; 0x1e84 <__ftoa_engine+0x146>
    1e66:	70 33       	cpi	r23, 0x30	; 48
    1e68:	11 f4       	brne	.+4      	; 0x1e6e <__ftoa_engine+0x130>
    1e6a:	8a 95       	dec	r24
    1e6c:	e6 cf       	rjmp	.-52     	; 0x1e3a <__ftoa_engine+0xfc>
    1e6e:	e8 94       	clt
    1e70:	01 50       	subi	r16, 0x01	; 1
    1e72:	30 f0       	brcs	.+12     	; 0x1e80 <__ftoa_engine+0x142>
    1e74:	08 0f       	add	r16, r24
    1e76:	0a f4       	brpl	.+2      	; 0x1e7a <__ftoa_engine+0x13c>
    1e78:	00 27       	eor	r16, r16
    1e7a:	02 17       	cp	r16, r18
    1e7c:	08 f4       	brcc	.+2      	; 0x1e80 <__ftoa_engine+0x142>
    1e7e:	20 2f       	mov	r18, r16
    1e80:	23 95       	inc	r18
    1e82:	02 2f       	mov	r16, r18
    1e84:	7a 33       	cpi	r23, 0x3A	; 58
    1e86:	28 f0       	brcs	.+10     	; 0x1e92 <__ftoa_engine+0x154>
    1e88:	79 e3       	ldi	r23, 0x39	; 57
    1e8a:	7d 93       	st	X+, r23
    1e8c:	2a 95       	dec	r18
    1e8e:	e9 f7       	brne	.-6      	; 0x1e8a <__ftoa_engine+0x14c>
    1e90:	10 c0       	rjmp	.+32     	; 0x1eb2 <__ftoa_engine+0x174>
    1e92:	7d 93       	st	X+, r23
    1e94:	2a 95       	dec	r18
    1e96:	89 f6       	brne	.-94     	; 0x1e3a <__ftoa_engine+0xfc>
    1e98:	06 94       	lsr	r0
    1e9a:	97 95       	ror	r25
    1e9c:	67 95       	ror	r22
    1e9e:	37 95       	ror	r19
    1ea0:	17 95       	ror	r17
    1ea2:	17 94       	ror	r1
    1ea4:	e1 18       	sub	r14, r1
    1ea6:	f1 0a       	sbc	r15, r17
    1ea8:	43 0b       	sbc	r20, r19
    1eaa:	56 0b       	sbc	r21, r22
    1eac:	c9 0b       	sbc	r28, r25
    1eae:	d0 09       	sbc	r29, r0
    1eb0:	98 f0       	brcs	.+38     	; 0x1ed8 <__ftoa_engine+0x19a>
    1eb2:	23 95       	inc	r18
    1eb4:	7e 91       	ld	r23, -X
    1eb6:	73 95       	inc	r23
    1eb8:	7a 33       	cpi	r23, 0x3A	; 58
    1eba:	08 f0       	brcs	.+2      	; 0x1ebe <__ftoa_engine+0x180>
    1ebc:	70 e3       	ldi	r23, 0x30	; 48
    1ebe:	7c 93       	st	X, r23
    1ec0:	20 13       	cpse	r18, r16
    1ec2:	b8 f7       	brcc	.-18     	; 0x1eb2 <__ftoa_engine+0x174>
    1ec4:	7e 91       	ld	r23, -X
    1ec6:	70 61       	ori	r23, 0x10	; 16
    1ec8:	7d 93       	st	X+, r23
    1eca:	30 f0       	brcs	.+12     	; 0x1ed8 <__ftoa_engine+0x19a>
    1ecc:	83 95       	inc	r24
    1ece:	71 e3       	ldi	r23, 0x31	; 49
    1ed0:	7d 93       	st	X+, r23
    1ed2:	70 e3       	ldi	r23, 0x30	; 48
    1ed4:	2a 95       	dec	r18
    1ed6:	e1 f7       	brne	.-8      	; 0x1ed0 <__ftoa_engine+0x192>
    1ed8:	11 24       	eor	r1, r1
    1eda:	ef 90       	pop	r14
    1edc:	ff 90       	pop	r15
    1ede:	0f 91       	pop	r16
    1ee0:	1f 91       	pop	r17
    1ee2:	cf 91       	pop	r28
    1ee4:	df 91       	pop	r29
    1ee6:	99 27       	eor	r25, r25
    1ee8:	87 fd       	sbrc	r24, 7
    1eea:	90 95       	com	r25
    1eec:	08 95       	ret

00001eee <strnlen_P>:
    1eee:	fc 01       	movw	r30, r24
    1ef0:	05 90       	lpm	r0, Z+
    1ef2:	61 50       	subi	r22, 0x01	; 1
    1ef4:	70 40       	sbci	r23, 0x00	; 0
    1ef6:	01 10       	cpse	r0, r1
    1ef8:	d8 f7       	brcc	.-10     	; 0x1ef0 <strnlen_P+0x2>
    1efa:	80 95       	com	r24
    1efc:	90 95       	com	r25
    1efe:	8e 0f       	add	r24, r30
    1f00:	9f 1f       	adc	r25, r31
    1f02:	08 95       	ret

00001f04 <strnlen>:
    1f04:	fc 01       	movw	r30, r24
    1f06:	61 50       	subi	r22, 0x01	; 1
    1f08:	70 40       	sbci	r23, 0x00	; 0
    1f0a:	01 90       	ld	r0, Z+
    1f0c:	01 10       	cpse	r0, r1
    1f0e:	d8 f7       	brcc	.-10     	; 0x1f06 <strnlen+0x2>
    1f10:	80 95       	com	r24
    1f12:	90 95       	com	r25
    1f14:	8e 0f       	add	r24, r30
    1f16:	9f 1f       	adc	r25, r31
    1f18:	08 95       	ret

00001f1a <fputc>:
    1f1a:	0f 93       	push	r16
    1f1c:	1f 93       	push	r17
    1f1e:	cf 93       	push	r28
    1f20:	df 93       	push	r29
    1f22:	fb 01       	movw	r30, r22
    1f24:	23 81       	ldd	r18, Z+3	; 0x03
    1f26:	21 fd       	sbrc	r18, 1
    1f28:	03 c0       	rjmp	.+6      	; 0x1f30 <fputc+0x16>
    1f2a:	8f ef       	ldi	r24, 0xFF	; 255
    1f2c:	9f ef       	ldi	r25, 0xFF	; 255
    1f2e:	2c c0       	rjmp	.+88     	; 0x1f88 <fputc+0x6e>
    1f30:	22 ff       	sbrs	r18, 2
    1f32:	16 c0       	rjmp	.+44     	; 0x1f60 <fputc+0x46>
    1f34:	46 81       	ldd	r20, Z+6	; 0x06
    1f36:	57 81       	ldd	r21, Z+7	; 0x07
    1f38:	24 81       	ldd	r18, Z+4	; 0x04
    1f3a:	35 81       	ldd	r19, Z+5	; 0x05
    1f3c:	42 17       	cp	r20, r18
    1f3e:	53 07       	cpc	r21, r19
    1f40:	44 f4       	brge	.+16     	; 0x1f52 <fputc+0x38>
    1f42:	a0 81       	ld	r26, Z
    1f44:	b1 81       	ldd	r27, Z+1	; 0x01
    1f46:	9d 01       	movw	r18, r26
    1f48:	2f 5f       	subi	r18, 0xFF	; 255
    1f4a:	3f 4f       	sbci	r19, 0xFF	; 255
    1f4c:	20 83       	st	Z, r18
    1f4e:	31 83       	std	Z+1, r19	; 0x01
    1f50:	8c 93       	st	X, r24
    1f52:	26 81       	ldd	r18, Z+6	; 0x06
    1f54:	37 81       	ldd	r19, Z+7	; 0x07
    1f56:	2f 5f       	subi	r18, 0xFF	; 255
    1f58:	3f 4f       	sbci	r19, 0xFF	; 255
    1f5a:	26 83       	std	Z+6, r18	; 0x06
    1f5c:	37 83       	std	Z+7, r19	; 0x07
    1f5e:	14 c0       	rjmp	.+40     	; 0x1f88 <fputc+0x6e>
    1f60:	8b 01       	movw	r16, r22
    1f62:	ec 01       	movw	r28, r24
    1f64:	fb 01       	movw	r30, r22
    1f66:	00 84       	ldd	r0, Z+8	; 0x08
    1f68:	f1 85       	ldd	r31, Z+9	; 0x09
    1f6a:	e0 2d       	mov	r30, r0
    1f6c:	19 95       	eicall
    1f6e:	89 2b       	or	r24, r25
    1f70:	e1 f6       	brne	.-72     	; 0x1f2a <fputc+0x10>
    1f72:	d8 01       	movw	r26, r16
    1f74:	16 96       	adiw	r26, 0x06	; 6
    1f76:	8d 91       	ld	r24, X+
    1f78:	9c 91       	ld	r25, X
    1f7a:	17 97       	sbiw	r26, 0x07	; 7
    1f7c:	01 96       	adiw	r24, 0x01	; 1
    1f7e:	16 96       	adiw	r26, 0x06	; 6
    1f80:	8d 93       	st	X+, r24
    1f82:	9c 93       	st	X, r25
    1f84:	17 97       	sbiw	r26, 0x07	; 7
    1f86:	ce 01       	movw	r24, r28
    1f88:	df 91       	pop	r29
    1f8a:	cf 91       	pop	r28
    1f8c:	1f 91       	pop	r17
    1f8e:	0f 91       	pop	r16
    1f90:	08 95       	ret

00001f92 <printf>:
    1f92:	cf 93       	push	r28
    1f94:	df 93       	push	r29
    1f96:	cd b7       	in	r28, 0x3d	; 61
    1f98:	de b7       	in	r29, 0x3e	; 62
    1f9a:	ae 01       	movw	r20, r28
    1f9c:	4a 5f       	subi	r20, 0xFA	; 250
    1f9e:	5f 4f       	sbci	r21, 0xFF	; 255
    1fa0:	fa 01       	movw	r30, r20
    1fa2:	61 91       	ld	r22, Z+
    1fa4:	71 91       	ld	r23, Z+
    1fa6:	af 01       	movw	r20, r30
    1fa8:	80 91 da 23 	lds	r24, 0x23DA	; 0x8023da <__iob+0x2>
    1fac:	90 91 db 23 	lds	r25, 0x23DB	; 0x8023db <__iob+0x3>
    1fb0:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <vfprintf>
    1fb4:	df 91       	pop	r29
    1fb6:	cf 91       	pop	r28
    1fb8:	08 95       	ret

00001fba <puts>:
    1fba:	0f 93       	push	r16
    1fbc:	1f 93       	push	r17
    1fbe:	cf 93       	push	r28
    1fc0:	df 93       	push	r29
    1fc2:	e0 91 da 23 	lds	r30, 0x23DA	; 0x8023da <__iob+0x2>
    1fc6:	f0 91 db 23 	lds	r31, 0x23DB	; 0x8023db <__iob+0x3>
    1fca:	23 81       	ldd	r18, Z+3	; 0x03
    1fcc:	21 ff       	sbrs	r18, 1
    1fce:	1b c0       	rjmp	.+54     	; 0x2006 <puts+0x4c>
    1fd0:	8c 01       	movw	r16, r24
    1fd2:	d0 e0       	ldi	r29, 0x00	; 0
    1fd4:	c0 e0       	ldi	r28, 0x00	; 0
    1fd6:	f8 01       	movw	r30, r16
    1fd8:	81 91       	ld	r24, Z+
    1fda:	8f 01       	movw	r16, r30
    1fdc:	60 91 da 23 	lds	r22, 0x23DA	; 0x8023da <__iob+0x2>
    1fe0:	70 91 db 23 	lds	r23, 0x23DB	; 0x8023db <__iob+0x3>
    1fe4:	db 01       	movw	r26, r22
    1fe6:	18 96       	adiw	r26, 0x08	; 8
    1fe8:	ed 91       	ld	r30, X+
    1fea:	fc 91       	ld	r31, X
    1fec:	19 97       	sbiw	r26, 0x09	; 9
    1fee:	88 23       	and	r24, r24
    1ff0:	31 f0       	breq	.+12     	; 0x1ffe <puts+0x44>
    1ff2:	19 95       	eicall
    1ff4:	89 2b       	or	r24, r25
    1ff6:	79 f3       	breq	.-34     	; 0x1fd6 <puts+0x1c>
    1ff8:	df ef       	ldi	r29, 0xFF	; 255
    1ffa:	cf ef       	ldi	r28, 0xFF	; 255
    1ffc:	ec cf       	rjmp	.-40     	; 0x1fd6 <puts+0x1c>
    1ffe:	8a e0       	ldi	r24, 0x0A	; 10
    2000:	19 95       	eicall
    2002:	89 2b       	or	r24, r25
    2004:	19 f0       	breq	.+6      	; 0x200c <puts+0x52>
    2006:	8f ef       	ldi	r24, 0xFF	; 255
    2008:	9f ef       	ldi	r25, 0xFF	; 255
    200a:	02 c0       	rjmp	.+4      	; 0x2010 <puts+0x56>
    200c:	8d 2f       	mov	r24, r29
    200e:	9c 2f       	mov	r25, r28
    2010:	df 91       	pop	r29
    2012:	cf 91       	pop	r28
    2014:	1f 91       	pop	r17
    2016:	0f 91       	pop	r16
    2018:	08 95       	ret

0000201a <__ultoa_invert>:
    201a:	fa 01       	movw	r30, r20
    201c:	aa 27       	eor	r26, r26
    201e:	28 30       	cpi	r18, 0x08	; 8
    2020:	51 f1       	breq	.+84     	; 0x2076 <__ultoa_invert+0x5c>
    2022:	20 31       	cpi	r18, 0x10	; 16
    2024:	81 f1       	breq	.+96     	; 0x2086 <__ultoa_invert+0x6c>
    2026:	e8 94       	clt
    2028:	6f 93       	push	r22
    202a:	6e 7f       	andi	r22, 0xFE	; 254
    202c:	6e 5f       	subi	r22, 0xFE	; 254
    202e:	7f 4f       	sbci	r23, 0xFF	; 255
    2030:	8f 4f       	sbci	r24, 0xFF	; 255
    2032:	9f 4f       	sbci	r25, 0xFF	; 255
    2034:	af 4f       	sbci	r26, 0xFF	; 255
    2036:	b1 e0       	ldi	r27, 0x01	; 1
    2038:	3e d0       	rcall	.+124    	; 0x20b6 <__ultoa_invert+0x9c>
    203a:	b4 e0       	ldi	r27, 0x04	; 4
    203c:	3c d0       	rcall	.+120    	; 0x20b6 <__ultoa_invert+0x9c>
    203e:	67 0f       	add	r22, r23
    2040:	78 1f       	adc	r23, r24
    2042:	89 1f       	adc	r24, r25
    2044:	9a 1f       	adc	r25, r26
    2046:	a1 1d       	adc	r26, r1
    2048:	68 0f       	add	r22, r24
    204a:	79 1f       	adc	r23, r25
    204c:	8a 1f       	adc	r24, r26
    204e:	91 1d       	adc	r25, r1
    2050:	a1 1d       	adc	r26, r1
    2052:	6a 0f       	add	r22, r26
    2054:	71 1d       	adc	r23, r1
    2056:	81 1d       	adc	r24, r1
    2058:	91 1d       	adc	r25, r1
    205a:	a1 1d       	adc	r26, r1
    205c:	20 d0       	rcall	.+64     	; 0x209e <__ultoa_invert+0x84>
    205e:	09 f4       	brne	.+2      	; 0x2062 <__ultoa_invert+0x48>
    2060:	68 94       	set
    2062:	3f 91       	pop	r19
    2064:	2a e0       	ldi	r18, 0x0A	; 10
    2066:	26 9f       	mul	r18, r22
    2068:	11 24       	eor	r1, r1
    206a:	30 19       	sub	r19, r0
    206c:	30 5d       	subi	r19, 0xD0	; 208
    206e:	31 93       	st	Z+, r19
    2070:	de f6       	brtc	.-74     	; 0x2028 <__ultoa_invert+0xe>
    2072:	cf 01       	movw	r24, r30
    2074:	08 95       	ret
    2076:	46 2f       	mov	r20, r22
    2078:	47 70       	andi	r20, 0x07	; 7
    207a:	40 5d       	subi	r20, 0xD0	; 208
    207c:	41 93       	st	Z+, r20
    207e:	b3 e0       	ldi	r27, 0x03	; 3
    2080:	0f d0       	rcall	.+30     	; 0x20a0 <__ultoa_invert+0x86>
    2082:	c9 f7       	brne	.-14     	; 0x2076 <__ultoa_invert+0x5c>
    2084:	f6 cf       	rjmp	.-20     	; 0x2072 <__ultoa_invert+0x58>
    2086:	46 2f       	mov	r20, r22
    2088:	4f 70       	andi	r20, 0x0F	; 15
    208a:	40 5d       	subi	r20, 0xD0	; 208
    208c:	4a 33       	cpi	r20, 0x3A	; 58
    208e:	18 f0       	brcs	.+6      	; 0x2096 <__ultoa_invert+0x7c>
    2090:	49 5d       	subi	r20, 0xD9	; 217
    2092:	31 fd       	sbrc	r19, 1
    2094:	40 52       	subi	r20, 0x20	; 32
    2096:	41 93       	st	Z+, r20
    2098:	02 d0       	rcall	.+4      	; 0x209e <__ultoa_invert+0x84>
    209a:	a9 f7       	brne	.-22     	; 0x2086 <__ultoa_invert+0x6c>
    209c:	ea cf       	rjmp	.-44     	; 0x2072 <__ultoa_invert+0x58>
    209e:	b4 e0       	ldi	r27, 0x04	; 4
    20a0:	a6 95       	lsr	r26
    20a2:	97 95       	ror	r25
    20a4:	87 95       	ror	r24
    20a6:	77 95       	ror	r23
    20a8:	67 95       	ror	r22
    20aa:	ba 95       	dec	r27
    20ac:	c9 f7       	brne	.-14     	; 0x20a0 <__ultoa_invert+0x86>
    20ae:	00 97       	sbiw	r24, 0x00	; 0
    20b0:	61 05       	cpc	r22, r1
    20b2:	71 05       	cpc	r23, r1
    20b4:	08 95       	ret
    20b6:	9b 01       	movw	r18, r22
    20b8:	ac 01       	movw	r20, r24
    20ba:	0a 2e       	mov	r0, r26
    20bc:	06 94       	lsr	r0
    20be:	57 95       	ror	r21
    20c0:	47 95       	ror	r20
    20c2:	37 95       	ror	r19
    20c4:	27 95       	ror	r18
    20c6:	ba 95       	dec	r27
    20c8:	c9 f7       	brne	.-14     	; 0x20bc <__ultoa_invert+0xa2>
    20ca:	62 0f       	add	r22, r18
    20cc:	73 1f       	adc	r23, r19
    20ce:	84 1f       	adc	r24, r20
    20d0:	95 1f       	adc	r25, r21
    20d2:	a0 1d       	adc	r26, r0
    20d4:	08 95       	ret

000020d6 <_exit>:
    20d6:	f8 94       	cli

000020d8 <__stop_program>:
    20d8:	ff cf       	rjmp	.-2      	; 0x20d8 <__stop_program>
